generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change to your database provider if needed
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  emailVerified Boolean
  username     String   @unique
  role         String
  updatedAt    DateTime @updatedAt
  updatedBy    String?
  isDeleted    Boolean
  accounts     Account[]
  projects     ProjectMember[]
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  projectId   String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   String?
  isDeleted   Boolean
  projectMembers ProjectMember[]
  planeElements PlaneElement[]
}

model ProjectMember {
  id        String   @id @default(uuid())
  memberId  String
  projectId String
  access    String
  updatedAt DateTime @updatedAt
  updatedBy String?
  project   Project @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  member    User    @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model PlaneElement {
  planeId   String   @id @default(uuid())
  projectId String
  updatedAt DateTime @updatedAt
  updatedBy String?
  isDeleted Boolean
  project   Project @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  graphElements GraphElement[]
  planeElementData PlaneElementData?
}

model GraphElement {
  elementId String   @id @default(uuid())
  planeId   String
  updatedAt DateTime @updatedAt
  updatedBy String?
  isDeleted Boolean
  plane     PlaneElement @relation(fields: [planeId], references: [planeId], onDelete: Cascade)
  graphElementData GraphElementData?
}

model PlaneElementData {
  dataId               String   @id @default(uuid())
  planeId              String   @unique
  planeElementsJsonData Json
  plane                PlaneElement @relation(fields: [planeId], references: [planeId], onDelete: Cascade)
}

model GraphElementData {
  dataId               String   @id @default(uuid())
  elementId            String   @unique
  graphElementsJsonData Json
  graphElement         GraphElement @relation(fields: [elementId], references: [elementId], onDelete: Cascade)
}
