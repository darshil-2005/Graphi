generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change to your database provider if needed
  url      = env("DATABASE_URL")
}

model user {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  username      String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isDeleted     Boolean         @default(false)
  accounts      account[]
  project       project[]
  projectmember projectMember[]

  @@map("users")
}

model account {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  updatedAt         DateTime @updatedAt
  user              user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model project {
  projectId      String          @id @default(uuid())
  projectName    String          @default("Untitled Project")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  updatedBy      String
  isDeleted      Boolean         @default(false)
  projectMembers projectMember[]
  planeElements  planeElement[]

  user user @relation(fields: [updatedBy], references: [id], onDelete: Cascade)
  @@map("projects")
}

model projectMember {
  id        String   @id @default(uuid())
  memberId  String
  projectId String
  access    String
  updatedAt DateTime @updatedAt
  updatedBy String?
  project   project  @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  member    user     @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model planeElement {
  planeId          String            @id @default(uuid())
  projectId        String
  updatedAt        DateTime          @updatedAt
  isDeleted        Boolean           @default(false)
  project          project           @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  graphElements    graphElement[]
  planeElementData planeElementData?
}

model graphElement {
  elementId        String            @id @default(uuid())
  planeId          String
  updatedAt        DateTime          @updatedAt
  isDeleted        Boolean           @default(false)
  plane            planeElement      @relation(fields: [planeId], references: [planeId], onDelete: Cascade)
  graphElementData graphElementData?
}

model planeElementData {
  dataId                String       @id @default(uuid())
  planeId               String       @unique
  planeElementsJsonData Json
  plane                 planeElement @relation(fields: [planeId], references: [planeId], onDelete: Cascade)
}

model graphElementData {
  dataId                String       @id @default(uuid())
  elementId             String       @unique
  graphElementsJsonData Json
  graphElement          graphElement @relation(fields: [elementId], references: [elementId], onDelete: Cascade)
}
