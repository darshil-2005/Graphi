generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change to your database provider if needed
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  username      String?    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  updatedBy     String?
  isDeleted     Boolean   @default(false)
  accounts      Account[]
  projects      ProjectMember[]
 
  @@map("users")
}

model Account {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Project {
  projectId   String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   String?
  isDeleted   Boolean
  projectMembers ProjectMember[]
  planeElements PlaneElement[]
}

model ProjectMember {
  id        String   @id @default(uuid())
  memberId  String
  projectId String
  access    String
  updatedAt DateTime @updatedAt
  updatedBy String?
  project   Project @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  member    User    @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model PlaneElement {
  planeId   String   @id @default(uuid())
  projectId String
  updatedAt DateTime @updatedAt
  updatedBy String?
  isDeleted Boolean
  project   Project @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  graphElements GraphElement[]
  planeElementData PlaneElementData?
}

model GraphElement {
  elementId String   @id @default(uuid())
  planeId   String
  updatedAt DateTime @updatedAt
  updatedBy String?
  isDeleted Boolean
  plane     PlaneElement @relation(fields: [planeId], references: [planeId], onDelete: Cascade)
  graphElementData GraphElementData?
}

model PlaneElementData {
  dataId               String   @id @default(uuid())
  planeId              String   @unique
  planeElementsJsonData Json
  plane                PlaneElement @relation(fields: [planeId], references: [planeId], onDelete: Cascade)
}

model GraphElementData {
  dataId               String   @id @default(uuid())
  elementId            String   @unique
  graphElementsJsonData Json
  graphElement         GraphElement @relation(fields: [elementId], references: [elementId], onDelete: Cascade)
}