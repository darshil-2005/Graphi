generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            String           @id @default(cuid())
  name          String?          @default("Guest")
  email         String           @unique
  username      String?          @unique
  emailVerified DateTime?        @map("email_verified")
  image         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deletedAt     DateTime?
  accounts      account[]
  project       project[]
  projectmember projectMember[]
  dataAccess    fileDataAccess[]

  @@index([email])
  @@map("users")
}

model account {
  id                String   @id @default(uuid())
  userId            String   @unique @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  updatedAt         DateTime @updatedAt
  user              user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model project {
  projectId      String          @id
  projectName    String          @default("Untitled Project")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  updatedBy      String
  deletedAt      DateTime?
  projectMembers projectMember[]
  planes         plane[]
  user           user            @relation(fields: [updatedBy], references: [username], onDelete: Cascade)

  @@map("projects")
}

enum AccessLevel {
  ADMIN
  EDITOR
  VIEWER
}

model projectMember {
  id                  String      @id @default(uuid())
  memberId            String
  projectId           String
  access              AccessLevel
  addedAt             DateTime    @default(now())
  updatedUserConfigAt DateTime    @updatedAt
  userConfigUpdater   String?
  project             project     @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  member              user        @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("projectMembers")
}

model planeElement {
  planeElementId       String         @id
  planeId              String
  planeElementJsonData Json
  updatedAt            DateTime       @updatedAt
  deletedAt            DateTime?
  graphElements        graphElement[]

  @@map("planeElements")
}

model graphElement {
  elementId             String       @id
  planeElementId        String
  graphElementsJsonData Json
  updatedAt             DateTime     @updatedAt
  deletedAt             DateTime?
  planeElement          planeElement @relation(fields: [planeElementId], references: [planeElementId], onDelete: Cascade)

  @@map("graphElements")
}

model plane {
  planeId   String  @id
  projectId String
  planeData Json
  project   project @relation(fields: [projectId], references: [projectId], onDelete: Cascade)

  @@map("planes")
}

model fileDataAccess {
  fileId   String   @id
  userId   String
  fileName String
  fileSize Int
  addedAt  DateTime @default(now())

  dataOwner user @relation(fields: [userId], references: [id], onDelete: Cascade)
}
