/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-telegram-bot-api";
exports.ids = ["vendor-chunks/node-telegram-bot-api"];
exports.modules = {

/***/ "(rsc)/./node_modules/node-telegram-bot-api/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * If running on Nodejs 5.x and below, we load the transpiled code.\n * Otherwise, we use the ES6 code.\n * We are deprecating support for Node.js v5.x and below.\n */\nconst majorVersion = parseInt(process.versions.node.split('.')[0], 10);\nif (majorVersion <= 5) {\n  const deprecate = (__webpack_require__(/*! ./src/utils */ \"(rsc)/./node_modules/node-telegram-bot-api/src/utils.js\").deprecate);\n  deprecate('Node.js v5.x and below will no longer be supported in the future');\n  module.exports = __webpack_require__(/*! ./lib/telegram */ \"(rsc)/./node_modules/node-telegram-bot-api/lib/telegram.js\");\n} else {\n  module.exports = __webpack_require__(/*! ./src/telegram */ \"(rsc)/./node_modules/node-telegram-bot-api/src/telegram.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS10ZWxlZ3JhbS1ib3QtYXBpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDZHQUFnQztBQUNwRDtBQUNBLEVBQUUsd0hBQTBDO0FBQzVDLEVBQUU7QUFDRixFQUFFLHdIQUEwQztBQUM1QyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxkYXJzaFxcT25lRHJpdmVcXERlc2t0b3BcXENvZGVcXE1FUk4gV2ViIERldlxcR3JhcGhpXFxub2RlX21vZHVsZXNcXG5vZGUtdGVsZWdyYW0tYm90LWFwaVxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJZiBydW5uaW5nIG9uIE5vZGVqcyA1LnggYW5kIGJlbG93LCB3ZSBsb2FkIHRoZSB0cmFuc3BpbGVkIGNvZGUuXG4gKiBPdGhlcndpc2UsIHdlIHVzZSB0aGUgRVM2IGNvZGUuXG4gKiBXZSBhcmUgZGVwcmVjYXRpbmcgc3VwcG9ydCBmb3IgTm9kZS5qcyB2NS54IGFuZCBiZWxvdy5cbiAqL1xuY29uc3QgbWFqb3JWZXJzaW9uID0gcGFyc2VJbnQocHJvY2Vzcy52ZXJzaW9ucy5ub2RlLnNwbGl0KCcuJylbMF0sIDEwKTtcbmlmIChtYWpvclZlcnNpb24gPD0gNSkge1xuICBjb25zdCBkZXByZWNhdGUgPSByZXF1aXJlKCcuL3NyYy91dGlscycpLmRlcHJlY2F0ZTtcbiAgZGVwcmVjYXRlKCdOb2RlLmpzIHY1LnggYW5kIGJlbG93IHdpbGwgbm8gbG9uZ2VyIGJlIHN1cHBvcnRlZCBpbiB0aGUgZnV0dXJlJyk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvdGVsZWdyYW0nKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zcmMvdGVsZWdyYW0nKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/lib/errors.js":
/*!**********************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/lib/errors.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nexports.BaseError = function (_Error) {\n  _inherits(BaseError, _Error);\n\n  /**\n   * @class BaseError\n   * @constructor\n   * @private\n   * @param  {String} code Error code\n   * @param  {String} message Error message\n   */\n  function BaseError(code, message) {\n    _classCallCheck(this, BaseError);\n\n    var _this = _possibleConstructorReturn(this, (BaseError.__proto__ || Object.getPrototypeOf(BaseError)).call(this, code + ': ' + message));\n\n    _this.code = code;\n    return _this;\n  }\n\n  _createClass(BaseError, [{\n    key: 'toJSON',\n    value: function toJSON() {\n      return {\n        code: this.code,\n        message: this.message\n      };\n    }\n  }]);\n\n  return BaseError;\n}(Error);\n\nexports.FatalError = function (_exports$BaseError) {\n  _inherits(FatalError, _exports$BaseError);\n\n  /**\n   * Fatal Error. Error code is `\"EFATAL\"`.\n   * @class FatalError\n   * @constructor\n   * @param  {String|Error} data Error object or message\n   */\n  function FatalError(data) {\n    _classCallCheck(this, FatalError);\n\n    var error = typeof data === 'string' ? null : data;\n    var message = error ? error.message : data;\n\n    var _this2 = _possibleConstructorReturn(this, (FatalError.__proto__ || Object.getPrototypeOf(FatalError)).call(this, 'EFATAL', message));\n\n    if (error) _this2.stack = error.stack;\n    return _this2;\n  }\n\n  return FatalError;\n}(exports.BaseError);\n\nexports.ParseError = function (_exports$BaseError2) {\n  _inherits(ParseError, _exports$BaseError2);\n\n  /**\n   * Error during parsing. Error code is `\"EPARSE\"`.\n   * @class ParseError\n   * @constructor\n   * @param  {String} message Error message\n   * @param  {http.IncomingMessage} response Server response\n   */\n  function ParseError(message, response) {\n    _classCallCheck(this, ParseError);\n\n    var _this3 = _possibleConstructorReturn(this, (ParseError.__proto__ || Object.getPrototypeOf(ParseError)).call(this, 'EPARSE', message));\n\n    _this3.response = response;\n    return _this3;\n  }\n\n  return ParseError;\n}(exports.BaseError);\n\nexports.TelegramError = function (_exports$BaseError3) {\n  _inherits(TelegramError, _exports$BaseError3);\n\n  /**\n   * Error returned from Telegram. Error code is `\"ETELEGRAM\"`.\n   * @class TelegramError\n   * @constructor\n   * @param  {String} message Error message\n   * @param  {http.IncomingMessage} response Server response\n   */\n  function TelegramError(message, response) {\n    _classCallCheck(this, TelegramError);\n\n    var _this4 = _possibleConstructorReturn(this, (TelegramError.__proto__ || Object.getPrototypeOf(TelegramError)).call(this, 'ETELEGRAM', message));\n\n    _this4.response = response;\n    return _this4;\n  }\n\n  return TelegramError;\n}(exports.BaseError);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS10ZWxlZ3JhbS1ib3QtYXBpL2xpYi9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsaUNBQWlDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELCtEQUErRCx5REFBeUQscUVBQXFFLDZEQUE2RCx3QkFBd0I7O0FBRWpqQixrREFBa0QsMENBQTBDOztBQUU1RixrREFBa0QsYUFBYSx5RkFBeUY7O0FBRXhKLDJDQUEyQywrREFBK0QsdUdBQXVHLHlFQUF5RSxlQUFlLDBFQUEwRSxHQUFHOztBQUV0WCxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELGtCQUFrQjtBQUNsQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsY0FBYztBQUM1QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVELGtCQUFrQjtBQUNsQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QixjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRCxxQkFBcUI7QUFDckI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZGFyc2hcXE9uZURyaXZlXFxEZXNrdG9wXFxDb2RlXFxNRVJOIFdlYiBEZXZcXEdyYXBoaVxcbm9kZV9tb2R1bGVzXFxub2RlLXRlbGVncmFtLWJvdC1hcGlcXGxpYlxcZXJyb3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5leHBvcnRzLkJhc2VFcnJvciA9IGZ1bmN0aW9uIChfRXJyb3IpIHtcbiAgX2luaGVyaXRzKEJhc2VFcnJvciwgX0Vycm9yKTtcblxuICAvKipcbiAgICogQGNsYXNzIEJhc2VFcnJvclxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtICB7U3RyaW5nfSBjb2RlIEVycm9yIGNvZGVcbiAgICogQHBhcmFtICB7U3RyaW5nfSBtZXNzYWdlIEVycm9yIG1lc3NhZ2VcbiAgICovXG4gIGZ1bmN0aW9uIEJhc2VFcnJvcihjb2RlLCBtZXNzYWdlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VFcnJvcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQmFzZUVycm9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQmFzZUVycm9yKSkuY2FsbCh0aGlzLCBjb2RlICsgJzogJyArIG1lc3NhZ2UpKTtcblxuICAgIF90aGlzLmNvZGUgPSBjb2RlO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCYXNlRXJyb3IsIFt7XG4gICAga2V5OiAndG9KU09OJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2VcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJhc2VFcnJvcjtcbn0oRXJyb3IpO1xuXG5leHBvcnRzLkZhdGFsRXJyb3IgPSBmdW5jdGlvbiAoX2V4cG9ydHMkQmFzZUVycm9yKSB7XG4gIF9pbmhlcml0cyhGYXRhbEVycm9yLCBfZXhwb3J0cyRCYXNlRXJyb3IpO1xuXG4gIC8qKlxuICAgKiBGYXRhbCBFcnJvci4gRXJyb3IgY29kZSBpcyBgXCJFRkFUQUxcImAuXG4gICAqIEBjbGFzcyBGYXRhbEVycm9yXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gIHtTdHJpbmd8RXJyb3J9IGRhdGEgRXJyb3Igb2JqZWN0IG9yIG1lc3NhZ2VcbiAgICovXG4gIGZ1bmN0aW9uIEZhdGFsRXJyb3IoZGF0YSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGYXRhbEVycm9yKTtcblxuICAgIHZhciBlcnJvciA9IHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyA/IG51bGwgOiBkYXRhO1xuICAgIHZhciBtZXNzYWdlID0gZXJyb3IgPyBlcnJvci5tZXNzYWdlIDogZGF0YTtcblxuICAgIHZhciBfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRmF0YWxFcnJvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZhdGFsRXJyb3IpKS5jYWxsKHRoaXMsICdFRkFUQUwnLCBtZXNzYWdlKSk7XG5cbiAgICBpZiAoZXJyb3IpIF90aGlzMi5zdGFjayA9IGVycm9yLnN0YWNrO1xuICAgIHJldHVybiBfdGhpczI7XG4gIH1cblxuICByZXR1cm4gRmF0YWxFcnJvcjtcbn0oZXhwb3J0cy5CYXNlRXJyb3IpO1xuXG5leHBvcnRzLlBhcnNlRXJyb3IgPSBmdW5jdGlvbiAoX2V4cG9ydHMkQmFzZUVycm9yMikge1xuICBfaW5oZXJpdHMoUGFyc2VFcnJvciwgX2V4cG9ydHMkQmFzZUVycm9yMik7XG5cbiAgLyoqXG4gICAqIEVycm9yIGR1cmluZyBwYXJzaW5nLiBFcnJvciBjb2RlIGlzIGBcIkVQQVJTRVwiYC5cbiAgICogQGNsYXNzIFBhcnNlRXJyb3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSAge1N0cmluZ30gbWVzc2FnZSBFcnJvciBtZXNzYWdlXG4gICAqIEBwYXJhbSAge2h0dHAuSW5jb21pbmdNZXNzYWdlfSByZXNwb25zZSBTZXJ2ZXIgcmVzcG9uc2VcbiAgICovXG4gIGZ1bmN0aW9uIFBhcnNlRXJyb3IobWVzc2FnZSwgcmVzcG9uc2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFyc2VFcnJvcik7XG5cbiAgICB2YXIgX3RoaXMzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFBhcnNlRXJyb3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQYXJzZUVycm9yKSkuY2FsbCh0aGlzLCAnRVBBUlNFJywgbWVzc2FnZSkpO1xuXG4gICAgX3RoaXMzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuXG4gIHJldHVybiBQYXJzZUVycm9yO1xufShleHBvcnRzLkJhc2VFcnJvcik7XG5cbmV4cG9ydHMuVGVsZWdyYW1FcnJvciA9IGZ1bmN0aW9uIChfZXhwb3J0cyRCYXNlRXJyb3IzKSB7XG4gIF9pbmhlcml0cyhUZWxlZ3JhbUVycm9yLCBfZXhwb3J0cyRCYXNlRXJyb3IzKTtcblxuICAvKipcbiAgICogRXJyb3IgcmV0dXJuZWQgZnJvbSBUZWxlZ3JhbS4gRXJyb3IgY29kZSBpcyBgXCJFVEVMRUdSQU1cImAuXG4gICAqIEBjbGFzcyBUZWxlZ3JhbUVycm9yXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IG1lc3NhZ2UgRXJyb3IgbWVzc2FnZVxuICAgKiBAcGFyYW0gIHtodHRwLkluY29taW5nTWVzc2FnZX0gcmVzcG9uc2UgU2VydmVyIHJlc3BvbnNlXG4gICAqL1xuICBmdW5jdGlvbiBUZWxlZ3JhbUVycm9yKG1lc3NhZ2UsIHJlc3BvbnNlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRlbGVncmFtRXJyb3IpO1xuXG4gICAgdmFyIF90aGlzNCA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUZWxlZ3JhbUVycm9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGVsZWdyYW1FcnJvcikpLmNhbGwodGhpcywgJ0VURUxFR1JBTScsIG1lc3NhZ2UpKTtcblxuICAgIF90aGlzNC5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgIHJldHVybiBfdGhpczQ7XG4gIH1cblxuICByZXR1cm4gVGVsZWdyYW1FcnJvcjtcbn0oZXhwb3J0cy5CYXNlRXJyb3IpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/lib/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/lib/telegram.js":
/*!************************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/lib/telegram.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// shims\n(__webpack_require__(/*! array.prototype.findindex */ \"(rsc)/./node_modules/array.prototype.findindex/index.js\").shim)(); // for Node.js v0.x\n\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/node-telegram-bot-api/lib/errors.js\");\nvar TelegramBotWebHook = __webpack_require__(/*! ./telegramWebHook */ \"(rsc)/./node_modules/node-telegram-bot-api/lib/telegramWebHook.js\");\nvar TelegramBotPolling = __webpack_require__(/*! ./telegramPolling */ \"(rsc)/./node_modules/node-telegram-bot-api/lib/telegramPolling.js\");\nvar debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/index.js\")('node-telegram-bot-api');\nvar EventEmitter = __webpack_require__(/*! eventemitter3 */ \"(rsc)/./node_modules/node-telegram-bot-api/node_modules/eventemitter3/index.js\");\nvar fileType = __webpack_require__(/*! file-type */ \"(rsc)/./node_modules/file-type/index.js\");\nvar request = __webpack_require__(/*! @cypress/request-promise */ \"(rsc)/./node_modules/@cypress/request-promise/lib/rp.js\");\nvar streamedRequest = __webpack_require__(/*! @cypress/request */ \"(rsc)/./node_modules/@cypress/request/index.js\");\nvar qs = __webpack_require__(/*! querystring */ \"querystring\");\nvar stream = __webpack_require__(/*! stream */ \"stream\");\nvar mime = __webpack_require__(/*! mime */ \"(rsc)/./node_modules/mime/mime.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar URL = __webpack_require__(/*! url */ \"url\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar pump = __webpack_require__(/*! pump */ \"(rsc)/./node_modules/pump/index.js\");\nvar deprecate = (__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/node-telegram-bot-api/lib/utils.js\").deprecate);\n\nvar _messageTypes = ['text', 'animation', 'audio', 'channel_chat_created', 'contact', 'delete_chat_photo', 'dice', 'document', 'game', 'group_chat_created', 'invoice', 'left_chat_member', 'location', 'migrate_from_chat_id', 'migrate_to_chat_id', 'new_chat_members', 'new_chat_photo', 'new_chat_title', 'passport_data', 'photo', 'pinned_message', 'poll', 'sticker', 'successful_payment', 'supergroup_chat_created', 'video', 'video_note', 'voice', 'video_chat_started', 'video_chat_ended', 'video_chat_participants_invited', 'video_chat_scheduled', 'message_auto_delete_timer_changed', 'chat_invite_link', 'chat_member_updated', 'web_app_data', 'message_reaction'];\n\nvar _deprecatedMessageTypes = ['new_chat_participant', 'left_chat_participant'];\n\n/**\n * JSON-serialize data. If the provided data is already a String,\n * return it as is.\n * @private\n * @param  {*} data\n * @return {String}\n */\nfunction stringify(data) {\n  if (typeof data === 'string') {\n    return data;\n  }\n  return JSON.stringify(data);\n}\n\nvar TelegramBot = function (_EventEmitter) {\n  _inherits(TelegramBot, _EventEmitter);\n\n  _createClass(TelegramBot, [{\n    key: 'on',\n\n\n    /**\n     * Add listener for the specified [event](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events).\n     * This is the usual `emitter.on()` method.\n     * @param  {String} event\n     * @param  {Function} listener\n     * @see {@link https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events|Available events}\n     * @see https://nodejs.org/api/events.html#events_emitter_on_eventname_listener\n     */\n    value: function on(event, listener) {\n      if (_deprecatedMessageTypes.indexOf(event) !== -1) {\n        var url = 'https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events';\n        deprecate('Events ' + _deprecatedMessageTypes.join(',') + ' are deprecated. See the updated list of events: ' + url);\n      }\n      _get(TelegramBot.prototype.__proto__ || Object.getPrototypeOf(TelegramBot.prototype), 'on', this).call(this, event, listener);\n    }\n\n    /**\n     * Both request method to obtain messages are implemented. To use standard polling, set `polling: true`\n     * on `options`. Notice that [webHook](https://core.telegram.org/bots/api#setwebhook) will need a SSL certificate.\n     * Emits `message` when a message arrives.\n     *\n     * @class TelegramBot\n     * @constructor\n     * @param {String} token Bot Token\n     * @param {Object} [options]\n     * @param {Boolean|Object} [options.polling=false] Set true to enable polling or set options.\n     *  If a WebHook has been set, it will be deleted automatically.\n     * @param {String|Number} [options.polling.timeout=10] *Deprecated. Use `options.polling.params` instead*.\n     *  Timeout in seconds for long polling.\n     * @param {Boolean} [options.testEnvironment=false] Set true to  work with test enviroment.\n     * When working with the test environment, you may use HTTP links without TLS to test your Web App.\n     * @param {String|Number} [options.polling.interval=300] Interval between requests in miliseconds\n     * @param {Boolean} [options.polling.autoStart=true] Start polling immediately\n     * @param {Object} [options.polling.params] Parameters to be used in polling API requests.\n     *  See https://core.telegram.org/bots/api#getupdates for more information.\n     * @param  {Number} [options.polling.params.timeout=10] Timeout in seconds for long polling.\n     * @param {Boolean|Object} [options.webHook=false] Set true to enable WebHook or set options\n     * @param {String} [options.webHook.host=\"0.0.0.0\"] Host to bind to\n     * @param {Number} [options.webHook.port=8443] Port to bind to\n     * @param {String} [options.webHook.key] Path to file with PEM private key for webHook server.\n     *  The file is read **synchronously**!\n     * @param {String} [options.webHook.cert] Path to file with PEM certificate (public) for webHook server.\n     *  The file is read **synchronously**!\n     * @param {String} [options.webHook.pfx] Path to file with PFX private key and certificate chain for webHook server.\n     *  The file is read **synchronously**!\n     * @param {Boolean} [options.webHook.autoOpen=true] Open webHook immediately\n     * @param {Object} [options.webHook.https] Options to be passed to `https.createServer()`.\n     *  Note that `options.webHook.key`, `options.webHook.cert` and `options.webHook.pfx`, if provided, will be\n     *  used to override `key`, `cert` and `pfx` in this object, respectively.\n     *  See https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener for more information.\n     * @param {String} [options.webHook.healthEndpoint=\"/healthz\"] An endpoint for health checks that always responds with 200 OK\n     * @param {Boolean} [options.onlyFirstMatch=false] Set to true to stop after first match. Otherwise, all regexps are executed\n     * @param {Object} [options.request] Options which will be added for all requests to telegram api.\n     *  See https://github.com/request/request#requestoptions-callback for more information.\n     * @param {String} [options.baseApiUrl=\"https://api.telegram.org\"] API Base URl; useful for proxying and testing\n     * @param {Boolean} [options.filepath=true] Allow passing file-paths as arguments when sending files,\n     *  such as photos using `TelegramBot#sendPhoto()`. See [usage information][usage-sending-files-performance]\n     *  for more information on this option and its consequences.\n     * @param {Boolean} [options.badRejection=false] Set to `true`\n     *  **if and only if** the Node.js version you're using terminates the\n     *  process on unhandled rejections. This option is only for\n     *  *forward-compatibility purposes*.\n     * @see https://core.telegram.org/bots/api\n     */\n\n  }], [{\n    key: 'errors',\n\n    /**\n     * The different errors the library uses.\n     * @type {Object}\n     */\n    get: function get() {\n      return errors;\n    }\n\n    /**\n     * The types of message updates the library handles.\n     * @type {String[]}\n     */\n\n  }, {\n    key: 'messageTypes',\n    get: function get() {\n      return _messageTypes;\n    }\n  }]);\n\n  function TelegramBot(token) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TelegramBot);\n\n    var _this = _possibleConstructorReturn(this, (TelegramBot.__proto__ || Object.getPrototypeOf(TelegramBot)).call(this));\n\n    _this.token = token;\n    _this.options = options;\n    _this.options.polling = typeof options.polling === 'undefined' ? false : options.polling;\n    _this.options.webHook = typeof options.webHook === 'undefined' ? false : options.webHook;\n    _this.options.baseApiUrl = options.baseApiUrl || 'https://api.telegram.org';\n    _this.options.filepath = typeof options.filepath === 'undefined' ? true : options.filepath;\n    _this.options.badRejection = typeof options.badRejection === 'undefined' ? false : options.badRejection;\n    _this._textRegexpCallbacks = [];\n    _this._replyListenerId = 0;\n    _this._replyListeners = [];\n    _this._polling = null;\n    _this._webHook = null;\n\n    if (options.polling) {\n      var autoStart = options.polling.autoStart;\n      if (typeof autoStart === 'undefined' || autoStart === true) {\n        _this.startPolling();\n      }\n    }\n\n    if (options.webHook) {\n      var autoOpen = options.webHook.autoOpen;\n      if (typeof autoOpen === 'undefined' || autoOpen === true) {\n        _this.openWebHook();\n      }\n    }\n    return _this;\n  }\n\n  /**\n   * Generates url with bot token and provided path/method you want to be got/executed by bot\n   * @param  {String} path\n   * @return {String} url\n   * @private\n   * @see https://core.telegram.org/bots/api#making-requests\n   */\n\n\n  _createClass(TelegramBot, [{\n    key: '_buildURL',\n    value: function _buildURL(_path) {\n      return this.options.baseApiUrl + '/bot' + this.token + (this.options.testEnvironment ? '/test' : '') + '/' + _path;\n    }\n\n    /**\n     * Fix 'reply_markup' parameter by making it JSON-serialized, as\n     * required by the Telegram Bot API\n     * @param {Object} obj Object; either 'form' or 'qs'\n     * @private\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n\n  }, {\n    key: '_fixReplyMarkup',\n    value: function _fixReplyMarkup(obj) {\n      var replyMarkup = obj.reply_markup;\n      if (replyMarkup && typeof replyMarkup !== 'string') {\n        obj.reply_markup = stringify(replyMarkup);\n      }\n    }\n\n    /**\n     * Fix 'entities' or 'caption_entities' or 'explanation_entities' parameter by making it JSON-serialized, as\n     * required by the Telegram Bot API\n     * @param {Object} obj Object;\n     * @private\n     * @see https://core.telegram.org/bots/api#sendmessage\n     * @see https://core.telegram.org/bots/api#copymessage\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n\n  }, {\n    key: '_fixEntitiesField',\n    value: function _fixEntitiesField(obj) {\n      var entities = obj.entities;\n      var captionEntities = obj.caption_entities;\n      var explanationEntities = obj.explanation_entities;\n      if (entities && typeof entities !== 'string') {\n        obj.entities = stringify(entities);\n      }\n\n      if (captionEntities && typeof captionEntities !== 'string') {\n        obj.caption_entities = stringify(captionEntities);\n      }\n\n      if (explanationEntities && typeof explanationEntities !== 'string') {\n        obj.explanation_entities = stringify(explanationEntities);\n      }\n    }\n  }, {\n    key: '_fixAddFileThumbnail',\n    value: function _fixAddFileThumbnail(options, opts) {\n      if (options.thumb) {\n        if (opts.formData === null) {\n          opts.formData = {};\n        }\n\n        var attachName = 'photo';\n\n        var _formatSendData2 = this._formatSendData(attachName, options.thumb.replace('attach://', '')),\n            _formatSendData3 = _slicedToArray(_formatSendData2, 1),\n            formData = _formatSendData3[0];\n\n        if (formData) {\n          opts.formData[attachName] = formData[attachName];\n          opts.qs.thumbnail = 'attach://' + attachName;\n        }\n      }\n    }\n\n    /**\n     * Fix 'reply_parameters' parameter by making it JSON-serialized, as\n     * required by the Telegram Bot API\n     * @param {Object} obj Object; either 'form' or 'qs'\n     * @private\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n\n  }, {\n    key: '_fixReplyParameters',\n    value: function _fixReplyParameters(obj) {\n      if (obj.hasOwnProperty('reply_parameters') && typeof obj.reply_parameters !== 'string') {\n        obj.reply_parameters = stringify(obj.reply_parameters);\n      }\n    }\n\n    /**\n     * Make request against the API\n     * @param  {String} _path API endpoint\n     * @param  {Object} [options]\n     * @private\n     * @return {Promise}\n     */\n\n  }, {\n    key: '_request',\n    value: function _request(_path) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!this.token) {\n        return Promise.reject(new errors.FatalError('Telegram Bot Token not provided!'));\n      }\n\n      if (this.options.request) {\n        Object.assign(options, this.options.request);\n      }\n\n      if (options.form) {\n        this._fixReplyMarkup(options.form);\n        this._fixEntitiesField(options.form);\n        this._fixReplyParameters(options.form);\n      }\n      if (options.qs) {\n        this._fixReplyMarkup(options.qs);\n        this._fixReplyParameters(options.qs);\n      }\n\n      options.method = 'POST';\n      options.url = this._buildURL(_path);\n      options.simple = false;\n      options.resolveWithFullResponse = true;\n      options.forever = true;\n      debug('HTTP request: %j', options);\n      return request(options).then(function (resp) {\n        var data = void 0;\n        try {\n          data = resp.body = JSON.parse(resp.body);\n        } catch (err) {\n          throw new errors.ParseError('Error parsing response: ' + resp.body, resp);\n        }\n\n        if (data.ok) {\n          return data.result;\n        }\n\n        throw new errors.TelegramError(data.error_code + ' ' + data.description, resp);\n      }).catch(function (error) {\n        // TODO: why can't we do `error instanceof errors.BaseError`?\n        if (error.response) throw error;\n        throw new errors.FatalError(error);\n      });\n    }\n\n    /**\n     * Format data to be uploaded; handles file paths, streams and buffers\n     * @param  {String} type\n     * @param  {String|stream.Stream|Buffer} data\n     * @param  {Object} fileOptions File options\n     * @param  {String} [fileOptions.filename] File name\n     * @param  {String} [fileOptions.contentType] Content type (i.e. MIME)\n     * @return {Array} formatted\n     * @return {Object} formatted[0] formData\n     * @return {String} formatted[1] fileId\n     * @throws Error if Buffer file type is not supported.\n     * @see https://npmjs.com/package/file-type\n     * @private\n     */\n\n  }, {\n    key: '_formatSendData',\n    value: function _formatSendData(type, data) {\n      var fileOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var deprecationMessage = 'See https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files' + ' for more information on how sending files has been improved and' + ' on how to disable this deprecation message altogether.';\n      var filedata = data;\n      var filename = fileOptions.filename;\n      var contentType = fileOptions.contentType;\n\n      if (data instanceof stream.Stream) {\n        if (!filename && data.path) {\n          // Will be 'null' if could not be parsed.\n          // For example, 'data.path' === '/?id=123' from 'request(\"https://example.com/?id=123\")'\n          var url = URL.parse(path.basename(data.path.toString()));\n          if (url.pathname) {\n            filename = qs.unescape(url.pathname);\n          }\n        }\n      } else if (Buffer.isBuffer(data)) {\n        if (!filename && !process.env.NTBA_FIX_350) {\n          deprecate('Buffers will have their filenames default to \"filename\" instead of \"data\". ' + deprecationMessage);\n          filename = 'data';\n        }\n        if (!contentType) {\n          var filetype = fileType(data);\n          if (filetype) {\n            contentType = filetype.mime;\n            var ext = filetype.ext;\n            if (ext && !process.env.NTBA_FIX_350) {\n              filename = filename + '.' + ext;\n            }\n          } else if (!process.env.NTBA_FIX_350) {\n            deprecate('An error will no longer be thrown if file-type of buffer could not be detected. ' + deprecationMessage);\n            throw new errors.FatalError('Unsupported Buffer file-type');\n          }\n        }\n      } else if (data) {\n        if (this.options.filepath && fs.existsSync(data)) {\n          filedata = fs.createReadStream(data);\n          if (!filename) {\n            filename = path.basename(data);\n          }\n        } else {\n          return [null, data];\n        }\n      } else {\n        return [null, data];\n      }\n\n      filename = filename || 'filename';\n      contentType = contentType || mime.lookup(filename);\n      if (process.env.NTBA_FIX_350) {\n        contentType = contentType || 'application/octet-stream';\n      } else {\n        deprecate('In the future, content-type of files you send will default to \"application/octet-stream\". ' + deprecationMessage);\n      }\n\n      // TODO: Add missing file extension.\n\n      return [_defineProperty({}, type, {\n        value: filedata,\n        options: {\n          filename: filename,\n          contentType: contentType\n        }\n      }), null];\n    }\n\n    /**\n     * Start polling.\n     * Rejects returned promise if a WebHook is being used by this instance.\n     * @param  {Object} [options]\n     * @param  {Boolean} [options.restart=true] Consecutive calls to this method causes polling to be restarted\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'startPolling',\n    value: function startPolling() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this.hasOpenWebHook()) {\n        return Promise.reject(new errors.FatalError('Polling and WebHook are mutually exclusive'));\n      }\n      options.restart = typeof options.restart === 'undefined' ? true : options.restart;\n      if (!this._polling) {\n        this._polling = new TelegramBotPolling(this);\n      }\n      return this._polling.start(options);\n    }\n\n    /**\n     * Alias of `TelegramBot#startPolling()`. This is **deprecated**.\n     * @param  {Object} [options]\n     * @return {Promise}\n     * @deprecated\n     */\n\n  }, {\n    key: 'initPolling',\n    value: function initPolling() {\n      deprecate('TelegramBot#initPolling() is deprecated. Use TelegramBot#startPolling() instead.');\n      return this.startPolling();\n    }\n\n    /**\n     * Stops polling after the last polling request resolves.\n     * Multiple invocations do nothing if polling is already stopped.\n     * Returning the promise of the last polling request is **deprecated**.\n     * @param  {Object} [options] Options\n     * @param  {Boolean} [options.cancel] Cancel current request\n     * @param  {String} [options.reason] Reason for stopping polling\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'stopPolling',\n    value: function stopPolling(options) {\n      if (!this._polling) {\n        return Promise.resolve();\n      }\n      return this._polling.stop(options);\n    }\n\n    /**\n     * Get link for file.\n     * Use this method to get link for file for subsequent use.\n     * Attention: link will be valid for 1 hour.\n     *\n     * This method is a sugar extension of the (getFile)[#getfilefileid] method,\n     * which returns just path to file on remote server (you will have to manually build full uri after that).\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Promise which will have  *fileURI* in resolve callback\n     * @see https://core.telegram.org/bots/api#getfile\n     */\n\n  }, {\n    key: 'getFileLink',\n    value: function getFileLink(fileId) {\n      var _this2 = this;\n\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return this.getFile(fileId, form).then(function (resp) {\n        return _this2.options.baseApiUrl + '/file/bot' + _this2.token + '/' + resp.file_path;\n      });\n    }\n\n    /**\n     * Return a readable stream for file.\n     *\n     * `fileStream.path` is the specified file ID i.e. `fileId`.\n     * `fileStream` emits event `info` passing a single argument i.e.\n     * `info` with the interface `{ uri }` where `uri` is the URI of the\n     * file on Telegram servers.\n     *\n     * This method is a sugar extension of the [getFileLink](#TelegramBot+getFileLink) method,\n     * which returns the full URI to the file on remote server.\n     *\n     * @param  {String} fileId File identifier to get info about\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {stream.Readable} fileStream\n     */\n\n  }, {\n    key: 'getFileStream',\n    value: function getFileStream(fileId) {\n      var _this3 = this;\n\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var fileStream = new stream.PassThrough();\n      fileStream.path = fileId;\n      this.getFileLink(fileId, form).then(function (fileURI) {\n        fileStream.emit('info', {\n          uri: fileURI\n        });\n        pump(streamedRequest(Object.assign({ uri: fileURI }, _this3.options.request)), fileStream);\n      }).catch(function (error) {\n        fileStream.emit('error', error);\n      });\n      return fileStream;\n    }\n\n    /**\n     * Downloads file in the specified folder.\n     *\n     * This method is a sugar extension of the [getFileStream](#TelegramBot+getFileStream) method,\n     * which returns a readable file stream.\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @param  {String} downloadDir Absolute path to the folder in which file will be saved\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Promise, which will have *filePath* of downloaded file in resolve callback\n     */\n\n  }, {\n    key: 'downloadFile',\n    value: function downloadFile(fileId, downloadDir) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var resolve = void 0;\n      var reject = void 0;\n      var promise = new Promise(function (a, b) {\n        resolve = a;\n        reject = b;\n      });\n      var fileStream = this.getFileStream(fileId, form);\n      fileStream.on('info', function (info) {\n        var fileName = info.uri.slice(info.uri.lastIndexOf('/') + 1);\n        // TODO: Ensure fileName doesn't contains slashes\n        var filePath = path.join(downloadDir, fileName);\n        pump(fileStream, fs.createWriteStream(filePath), function (error) {\n          if (error) {\n            return reject(error);\n          }\n          return resolve(filePath);\n        });\n      });\n      fileStream.on('error', function (err) {\n        reject(err);\n      });\n      return promise;\n    }\n\n    /**\n     * Register a RegExp to test against an incomming text message.\n     * @param  {RegExp}   regexpRexecuted with `exec`.\n     * @param  {Function} callback     Callback will be called with 2 parameters,\n     * the `msg` and the result of executing `regexp.exec` on message text.\n     */\n\n  }, {\n    key: 'onText',\n    value: function onText(regexp, callback) {\n      this._textRegexpCallbacks.push({ regexp: regexp, callback: callback });\n    }\n\n    /**\n     * Remove a listener registered with `onText()`.\n     * @param  {RegExp} regexp RegExp used previously in `onText()`\n     * @return {Object} deletedListener The removed reply listener if\n     *   found. This object has `regexp` and `callback`\n     *   properties. If not found, returns `null`.\n     */\n\n  }, {\n    key: 'removeTextListener',\n    value: function removeTextListener(regexp) {\n      var index = this._textRegexpCallbacks.findIndex(function (textListener) {\n        return String(textListener.regexp) === String(regexp);\n      });\n      if (index === -1) {\n        return null;\n      }\n      return this._textRegexpCallbacks.splice(index, 1)[0];\n    }\n\n    /**\n     * Remove all listeners registered with `onText()`.\n     */\n\n  }, {\n    key: 'clearTextListeners',\n    value: function clearTextListeners() {\n      this._textRegexpCallbacks = [];\n    }\n\n    /**\n     * Register a reply to wait for a message response.\n     *\n     * @param  {Number|String} chatId The chat id where the message cames from.\n     * @param  {Number|String} messageId The message id to be replied.\n     * @param  {Function} callback Callback will be called with the reply\n     *  message.\n     * @return {Number} id The ID of the inserted reply listener.\n     */\n\n  }, {\n    key: 'onReplyToMessage',\n    value: function onReplyToMessage(chatId, messageId, callback) {\n      var id = ++this._replyListenerId;\n      this._replyListeners.push({\n        id: id,\n        chatId: chatId,\n        messageId: messageId,\n        callback: callback\n      });\n      return id;\n    }\n\n    /**\n     * Removes a reply that has been prev. registered for a message response.\n     * @param   {Number} replyListenerId The ID of the reply listener.\n     * @return  {Object} deletedListener The removed reply listener if\n     *   found. This object has `id`, `chatId`, `messageId` and `callback`\n     *   properties. If not found, returns `null`.\n     */\n\n  }, {\n    key: 'removeReplyListener',\n    value: function removeReplyListener(replyListenerId) {\n      var index = this._replyListeners.findIndex(function (replyListener) {\n        return replyListener.id === replyListenerId;\n      });\n      if (index === -1) {\n        return null;\n      }\n      return this._replyListeners.splice(index, 1)[0];\n    }\n\n    /**\n     * Removes all replies that have been prev. registered for a message response.\n     *\n     * @return  {Array} deletedListeners An array of removed listeners.\n     */\n\n  }, {\n    key: 'clearReplyListeners',\n    value: function clearReplyListeners() {\n      this._replyListeners = [];\n    }\n\n    /**\n     * Return true if polling. Otherwise, false.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isPolling',\n    value: function isPolling() {\n      return this._polling ? this._polling.isPolling() : false;\n    }\n\n    /**\n     * Open webhook.\n     * Multiple invocations do nothing if webhook is already open.\n     * Rejects returned promise if Polling is being used by this instance.\n     *\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'openWebHook',\n    value: function openWebHook() {\n      if (this.isPolling()) {\n        return Promise.reject(new errors.FatalError('WebHook and Polling are mutually exclusive'));\n      }\n      if (!this._webHook) {\n        this._webHook = new TelegramBotWebHook(this);\n      }\n      return this._webHook.open();\n    }\n\n    /**\n     * Close webhook after closing all current connections.\n     * Multiple invocations do nothing if webhook is already closed.\n     *\n     * @return {Promise} Promise\n     */\n\n  }, {\n    key: 'closeWebHook',\n    value: function closeWebHook() {\n      if (!this._webHook) {\n        return Promise.resolve();\n      }\n      return this._webHook.close();\n    }\n\n    /**\n     * Return true if using webhook and it is open i.e. accepts connections.\n     * Otherwise, false.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'hasOpenWebHook',\n    value: function hasOpenWebHook() {\n      return this._webHook ? this._webHook.isOpen() : false;\n    }\n\n    /**\n     * Process an update; emitting the proper events and executing regexp\n     * callbacks. This method is useful should you be using a different\n     * way to fetch updates, other than those provided by TelegramBot.\n     *\n     * @param  {Object} update\n     * @see https://core.telegram.org/bots/api#update\n     */\n\n  }, {\n    key: 'processUpdate',\n    value: function processUpdate(update) {\n      var _this4 = this;\n\n      debug('Process Update %j', update);\n      var message = update.message;\n      var editedMessage = update.edited_message;\n      var channelPost = update.channel_post;\n      var editedChannelPost = update.edited_channel_post;\n      var businessConnection = update.business_connection;\n      var businesssMessage = update.business_message;\n      var editedBusinessMessage = update.edited_business_message;\n      var deletedBusinessMessage = update.deleted_business_messages;\n      var messageReaction = update.message_reaction;\n      var messageReactionCount = update.message_reaction_count;\n      var inlineQuery = update.inline_query;\n      var chosenInlineResult = update.chosen_inline_result;\n      var callbackQuery = update.callback_query;\n      var shippingQuery = update.shipping_query;\n      var preCheckoutQuery = update.pre_checkout_query;\n      var poll = update.poll;\n      var pollAnswer = update.poll_answer;\n      var myChatMember = update.my_chat_member;\n      var chatMember = update.chat_member;\n      var chatJoinRequest = update.chat_join_request;\n      var chatBoost = update.chat_boost;\n      var removedChatBoost = update.removed_chat_boost;\n\n      if (message) {\n        debug('Process Update message %j', message);\n        var metadata = {};\n        metadata.type = TelegramBot.messageTypes.find(function (messageType) {\n          return message[messageType];\n        });\n        this.emit('message', message, metadata);\n        if (metadata.type) {\n          debug('Emitting %s: %j', metadata.type, message);\n          this.emit(metadata.type, message, metadata);\n        }\n        if (message.text) {\n          debug('Text message');\n          this._textRegexpCallbacks.some(function (reg) {\n            debug('Matching %s with %s', message.text, reg.regexp);\n\n            if (!(reg.regexp instanceof RegExp)) {\n              reg.regexp = new RegExp(reg.regexp);\n            }\n\n            var result = reg.regexp.exec(message.text);\n            if (!result) {\n              return false;\n            }\n            // reset index so we start at the beginning of the regex each time\n            reg.regexp.lastIndex = 0;\n            debug('Matches %s', reg.regexp);\n            reg.callback(message, result);\n            // returning truthy value exits .some\n            return _this4.options.onlyFirstMatch;\n          });\n        }\n        if (message.reply_to_message) {\n          // Only callbacks waiting for this message\n          this._replyListeners.forEach(function (reply) {\n            // Message from the same chat\n            if (reply.chatId === message.chat.id) {\n              // Responding to that message\n              if (reply.messageId === message.reply_to_message.message_id) {\n                // Resolve the promise\n                reply.callback(message);\n              }\n            }\n          });\n        }\n      } else if (editedMessage) {\n        debug('Process Update edited_message %j', editedMessage);\n        this.emit('edited_message', editedMessage);\n        if (editedMessage.text) {\n          this.emit('edited_message_text', editedMessage);\n        }\n        if (editedMessage.caption) {\n          this.emit('edited_message_caption', editedMessage);\n        }\n      } else if (channelPost) {\n        debug('Process Update channel_post %j', channelPost);\n        this.emit('channel_post', channelPost);\n      } else if (editedChannelPost) {\n        debug('Process Update edited_channel_post %j', editedChannelPost);\n        this.emit('edited_channel_post', editedChannelPost);\n        if (editedChannelPost.text) {\n          this.emit('edited_channel_post_text', editedChannelPost);\n        }\n        if (editedChannelPost.caption) {\n          this.emit('edited_channel_post_caption', editedChannelPost);\n        }\n      } else if (businessConnection) {\n        debug('Process Update business_connection %j', businessConnection);\n        this.emit('business_connection', businessConnection);\n      } else if (businesssMessage) {\n        debug('Process Update business_message %j', businesssMessage);\n        this.emit('business_message', businesssMessage);\n      } else if (editedBusinessMessage) {\n        debug('Process Update edited_business_message %j', editedBusinessMessage);\n        this.emit('edited_business_message', editedBusinessMessage);\n      } else if (deletedBusinessMessage) {\n        debug('Process Update deleted_business_messages %j', deletedBusinessMessage);\n        this.emit('deleted_business_messages', deletedBusinessMessage);\n      } else if (messageReaction) {\n        debug('Process Update message_reaction %j', messageReaction);\n        this.emit('message_reaction', messageReaction);\n      } else if (messageReactionCount) {\n        debug('Process Update message_reaction_count %j', messageReactionCount);\n        this.emit('message_reaction_count', messageReactionCount);\n      } else if (inlineQuery) {\n        debug('Process Update inline_query %j', inlineQuery);\n        this.emit('inline_query', inlineQuery);\n      } else if (chosenInlineResult) {\n        debug('Process Update chosen_inline_result %j', chosenInlineResult);\n        this.emit('chosen_inline_result', chosenInlineResult);\n      } else if (callbackQuery) {\n        debug('Process Update callback_query %j', callbackQuery);\n        this.emit('callback_query', callbackQuery);\n      } else if (shippingQuery) {\n        debug('Process Update shipping_query %j', shippingQuery);\n        this.emit('shipping_query', shippingQuery);\n      } else if (preCheckoutQuery) {\n        debug('Process Update pre_checkout_query %j', preCheckoutQuery);\n        this.emit('pre_checkout_query', preCheckoutQuery);\n      } else if (poll) {\n        debug('Process Update poll %j', poll);\n        this.emit('poll', poll);\n      } else if (pollAnswer) {\n        debug('Process Update poll_answer %j', pollAnswer);\n        this.emit('poll_answer', pollAnswer);\n      } else if (chatMember) {\n        debug('Process Update chat_member %j', chatMember);\n        this.emit('chat_member', chatMember);\n      } else if (myChatMember) {\n        debug('Process Update my_chat_member %j', myChatMember);\n        this.emit('my_chat_member', myChatMember);\n      } else if (chatJoinRequest) {\n        debug('Process Update my_chat_member %j', chatJoinRequest);\n        this.emit('chat_join_request', chatJoinRequest);\n      } else if (chatBoost) {\n        debug('Process Update chat_boost %j', chatBoost);\n        this.emit('chat_boost', chatBoost);\n      } else if (removedChatBoost) {\n        debug('Process Update removed_chat_boost %j', removedChatBoost);\n        this.emit('removed_chat_boost', removedChatBoost);\n      }\n    }\n\n    /** Start Telegram Bot API methods */\n\n    /**\n    * Use this method to receive incoming updates using long polling.\n    * This method has an [older, compatible signature][getUpdates-v0.25.0]\n    * that is being deprecated.\n    *\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise}\n    * @see https://core.telegram.org/bots/api#getupdates\n    */\n\n  }, {\n    key: 'getUpdates',\n    value: function getUpdates() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /* The older method signature was getUpdates(timeout, limit, offset).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) !== 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature getUpdates(timeout, limit, offset) has been deprecated since v0.25.0');\n        form = {\n          timeout: arguments[0],\n          limit: arguments[1],\n          offset: arguments[2]\n        };\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      }\n\n      return this._request('getUpdates', { form: form });\n    }\n\n    /**\n     * Specify an url to receive incoming updates via an outgoing webHook.\n     * This method has an [older, compatible signature][setWebHook-v0.25.0]\n     * that is being deprecated.\n     *\n     * @param  {String} url URL where Telegram will make HTTP Post. Leave empty to\n     * delete webHook.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {String|stream.Stream} [options.certificate] PEM certificate key (public).\n     * @param  {String} [options.secret_token] Optional secret token to be sent in a header `X-Telegram-Bot-Api-Secret-Token` in every webhook request.\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#setwebhook\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'setWebHook',\n    value: function setWebHook(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var fileOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      /* The older method signature was setWebHook(url, cert).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      var cert = void 0;\n      // Note: 'options' could be an object, if a stream was provided (in place of 'cert')\n      if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object' || options instanceof stream.Stream) {\n        deprecate('The method signature setWebHook(url, cert) has been deprecated since v0.25.0');\n        cert = options;\n        options = {}; // eslint-disable-line no-param-reassign\n      } else {\n        cert = options.certificate;\n      }\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.url = url;\n\n      if (cert) {\n        try {\n          var sendData = this._formatSendData('certificate', cert, fileOptions);\n          opts.formData = sendData[0];\n          opts.qs.certificate = sendData[1];\n        } catch (ex) {\n          return Promise.reject(ex);\n        }\n      }\n\n      return this._request('setWebHook', opts);\n    }\n\n    /**\n     * Use this method to remove webhook integration if you decide to\n     * switch back to getUpdates. Returns True on success.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#deletewebhook\n     */\n\n  }, {\n    key: 'deleteWebHook',\n    value: function deleteWebHook() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('deleteWebhook', { form: form });\n    }\n\n    /**\n     * Use this method to get current webhook status.\n     * On success, returns a [WebhookInfo](https://core.telegram.org/bots/api#webhookinfo) object.\n     * If the bot is using getUpdates, will return an object with the\n     * url field empty.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#getwebhookinfo\n     */\n\n  }, {\n    key: 'getWebHookInfo',\n    value: function getWebHookInfo() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getWebhookInfo', { form: form });\n    }\n\n    /**\n     * A simple method for testing your bot's authentication token. Requires no parameters.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} basic information about the bot in form of a [User](https://core.telegram.org/bots/api#user) object.\n     * @see https://core.telegram.org/bots/api#getme\n     */\n\n  }, {\n    key: 'getMe',\n    value: function getMe() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMe', { form: form });\n    }\n\n    /**\n     * This method log out your bot from the cloud Bot API server before launching the bot locally.\n     * You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates.\n     * After a successful call, you will not be able to log in again using the same token for 10 minutes.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#logout\n     */\n\n  }, {\n    key: 'logOut',\n    value: function logOut() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('logOut', { form: form });\n    }\n\n    /**\n     * This method close the bot instance before moving it from one local server to another.\n     * This method will return error 429 in the first 10 minutes after the bot is launched.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#close\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('close', { form: form });\n    }\n\n    /**\n     * Send text message.\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} text Text of the message to be sent\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n\n  }, {\n    key: 'sendMessage',\n    value: function sendMessage(chatId, text) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.text = text;\n      return this._request('sendMessage', { form: form });\n    }\n\n    /**\n     * Forward messages of any kind.\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * or username of the target channel (in the format `@channelusername`)\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent (or channel username in the format `@channelusername`)\n     * @param  {Number|String} messageId  Unique message identifier in the chat specified in fromChatId\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#forwardmessage\n     */\n\n  }, {\n    key: 'forwardMessage',\n    value: function forwardMessage(chatId, fromChatId, messageId) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_id = messageId;\n      return this._request('forwardMessage', { form: form });\n    }\n\n    /**\n     * Use this method to forward multiple messages of any kind.\n     * If some of the specified messages can't be found or forwarded, they are skipped.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * or username of the target channel (in the format `@channelusername`)\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent (or channel username in the format `@channelusername`)\n     * @param  {Array<Number|String>} messageIds Identifiers of 1-100 messages in the chat from_chat_id to forward.\n     * The identifiers must be specified in a strictly increasing order.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} An array of MessageId of the sent messages on success\n     * @see https://core.telegram.org/bots/api#forwardmessages\n     */\n\n  }, {\n    key: 'forwardMessages',\n    value: function forwardMessages(chatId, fromChatId, messageIds) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_ids = messageIds;\n      return this._request('forwardMessages', { form: form });\n    }\n\n    /**\n     * Copy messages of any kind. **Service messages and invoice messages can't be copied.**\n     * The method is analogous to the method forwardMessages, but the copied message doesn't\n     * have a link to the original message.\n     * Returns the MessageId of the sent message on success.\n     * @param  {Number|String} chatId     Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent\n     * @param  {Number|String} messageId  Unique message identifier\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} The [MessageId](https://core.telegram.org/bots/api#messageid) of the sent message on success\n     * @see https://core.telegram.org/bots/api#copymessage\n     */\n\n  }, {\n    key: 'copyMessage',\n    value: function copyMessage(chatId, fromChatId, messageId) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_id = messageId;\n      return this._request('copyMessage', { form: form });\n    }\n\n    /**\n     * Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped.\n     * Service messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied.\n     * Returns the MessageId of the sent message on success.\n     * @param  {Number|String} chatId Unique identifier for the target chat\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent\n     * @param  {Array} messageIds  Identifiers of 1-100 messages in the chat from_chat_id to copy.\n     * The identifiers must be specified in a strictly increasing order.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} An array of MessageId of the sent messages\n     * @see https://core.telegram.org/bots/api#copymessages\n     */\n\n  }, {\n    key: 'copyMessages',\n    value: function copyMessages(chatId, fromChatId, messageIds) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_ids = stringify(messageIds);\n      return this._request('copyMessages', { form: form });\n    }\n\n    /**\n     * Send photo\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} photo A file path or a Stream. Can\n     * also be a `file_id` previously uploaded\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendphoto\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendPhoto',\n    value: function sendPhoto(chatId, photo) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('photo', photo, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.photo = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendPhoto', opts);\n    }\n\n    /**\n    * Send audio\n    *\n    * **Your audio must be in the .MP3 or .M4A format.**\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {String|stream.Stream|Buffer} audio A file path, Stream or Buffer.\n    * Can also be a `file_id` previously uploaded.\n    * @param  {Object} [options] Additional Telegram query options\n    * @param  {Object} [fileOptions] Optional file related meta-data\n    * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n    * @see https://core.telegram.org/bots/api#sendaudio\n    * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n    */\n\n  }, {\n    key: 'sendAudio',\n    value: function sendAudio(chatId, audio) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n\n      opts.qs.chat_id = chatId;\n\n      try {\n        var sendData = this._formatSendData('audio', audio, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.audio = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n\n      return this._request('sendAudio', opts);\n    }\n\n    /**\n    * Send Document\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {String|stream.Stream|Buffer} doc A file path, Stream or Buffer.\n    * Can also be a `file_id` previously uploaded.\n    * @param  {Object} [options] Additional Telegram query options\n    * @param  {Object} [fileOptions] Optional file related meta-data\n    * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n    * @see https://core.telegram.org/bots/api#sendDocument\n    * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n    */\n\n  }, {\n    key: 'sendDocument',\n    value: function sendDocument(chatId, doc) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('document', doc, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.document = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n\n      return this._request('sendDocument', opts);\n    }\n\n    /**\n     * Use this method to send video files, **Telegram clients support mp4 videos** (other formats may be sent as Document).\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} video A file path or Stream.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendvideo\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendVideo',\n    value: function sendVideo(chatId, video) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('video', video, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.video = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendVideo', opts);\n    }\n\n    /**\n     * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound).\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} animation A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendanimation\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendAnimation',\n    value: function sendAnimation(chatId, animation) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('animation', animation, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.animation = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendAnimation', opts);\n    }\n\n    /**\n     * Send voice\n     *\n     * **Your audio must be in an .OGG file encoded with OPUS**, or in .MP3 format, or in .M4A format (other formats may be sent as Audio or Document)\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} voice A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendvoice\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendVoice',\n    value: function sendVoice(chatId, voice) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('voice', voice, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.voice = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendVoice', opts);\n    }\n\n    /**\n     * Use this method to send video messages\n     * Telegram clients support **rounded square MPEG4 videos** of up to 1 minute long.\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} videoNote A file path or Stream.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @info The length parameter is actually optional. However, the API (at time of writing) requires you to always provide it until it is fixed.\n     * @see https://core.telegram.org/bots/api#sendvideonote\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n    */\n\n  }, {\n    key: 'sendVideoNote',\n    value: function sendVideoNote(chatId, videoNote) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('video_note', videoNote, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.video_note = sendData[1];\n        this._fixAddFileThumbnail(options, opts);\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendVideoNote', opts);\n    }\n\n    /**\n     * Use this method to send a group of photos or videos as an album.\n     *\n     * **Documents and audio files can be only grouped in an album with messages of the same type**\n     *\n     * If you wish to [specify file options](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files),\n     * add a `fileOptions` property to the target input in `media`.\n     *\n     * @param  {String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Array} media A JSON-serialized array describing photos and videos to be sent, must include 2–10 items\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, an array of the sent [Messages](https://core.telegram.org/bots/api#message)\n     * is returned.\n     * @see https://core.telegram.org/bots/api#sendmediagroup\n     * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n     */\n\n  }, {\n    key: 'sendMediaGroup',\n    value: function sendMediaGroup(chatId, media) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n\n      opts.formData = {};\n      var inputMedia = [];\n      var index = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = media[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var input = _step.value;\n\n          var payload = Object.assign({}, input);\n          delete payload.media;\n          delete payload.fileOptions;\n          try {\n            var attachName = String(index);\n\n            var _formatSendData4 = this._formatSendData(attachName, input.media, input.fileOptions),\n                _formatSendData5 = _slicedToArray(_formatSendData4, 2),\n                formData = _formatSendData5[0],\n                fileId = _formatSendData5[1];\n\n            if (formData) {\n              opts.formData[attachName] = formData[attachName];\n              payload.media = 'attach://' + attachName;\n            } else {\n              payload.media = fileId;\n            }\n          } catch (ex) {\n            return Promise.reject(ex);\n          }\n          inputMedia.push(payload);\n          index++;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      opts.qs.media = stringify(inputMedia);\n\n      return this._request('sendMediaGroup', opts);\n    }\n\n    /**\n     * Send location.\n     * Use this method to send point on the map.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Float} latitude Latitude of location\n     * @param  {Float} longitude Longitude of location\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendlocation\n     */\n\n  }, {\n    key: 'sendLocation',\n    value: function sendLocation(chatId, latitude, longitude) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.latitude = latitude;\n      form.longitude = longitude;\n      return this._request('sendLocation', { form: form });\n    }\n\n    /**\n     * Use this method to edit live location messages sent by\n     * the bot or via the bot (for inline bots).\n     *\n     *  A location **can be edited until its live_period expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api#stopmessagelivelocation)**\n     *\n     * Note that you must provide one of chat_id, message_id, or\n     * inline_message_id in your request.\n     *\n     * @param  {Float} latitude Latitude of location\n     * @param  {Float} longitude Longitude of location\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n     * @see https://core.telegram.org/bots/api#editmessagelivelocation\n     */\n\n  }, {\n    key: 'editMessageLiveLocation',\n    value: function editMessageLiveLocation(latitude, longitude) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.latitude = latitude;\n      form.longitude = longitude;\n      return this._request('editMessageLiveLocation', { form: form });\n    }\n\n    /**\n     * Use this method to stop updating a live location message sent by\n     * the bot or via the bot (for inline bots) before live_period expires.\n     *\n     * Note that you must provide one of chat_id, message_id, or\n     * inline_message_id in your request.\n     *\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n     * @see https://core.telegram.org/bots/api#stopmessagelivelocation\n     */\n\n  }, {\n    key: 'stopMessageLiveLocation',\n    value: function stopMessageLiveLocation() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('stopMessageLiveLocation', { form: form });\n    }\n\n    /**\n     * Send venue.\n     * Use this method to send information about a venue.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Float} latitude Latitude of location\n     * @param  {Float} longitude Longitude of location\n     * @param  {String} title Name of the venue\n     * @param  {String} address Address of the venue\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned.\n     * @see https://core.telegram.org/bots/api#sendvenue\n     */\n\n  }, {\n    key: 'sendVenue',\n    value: function sendVenue(chatId, latitude, longitude, title, address) {\n      var form = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n      form.chat_id = chatId;\n      form.latitude = latitude;\n      form.longitude = longitude;\n      form.title = title;\n      form.address = address;\n      return this._request('sendVenue', { form: form });\n    }\n\n    /**\n     * Send contact.\n     * Use this method to send phone contacts.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} phoneNumber Contact's phone number\n     * @param  {String} firstName Contact's first name\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendcontact\n     */\n\n  }, {\n    key: 'sendContact',\n    value: function sendContact(chatId, phoneNumber, firstName) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.phone_number = phoneNumber;\n      form.first_name = firstName;\n      return this._request('sendContact', { form: form });\n    }\n\n    /**\n     * Send poll.\n     * Use this method to send a native poll.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the group/channel\n     * @param  {String} question Poll question, 1-300 characters\n     * @param  {Array} pollOptions Poll options, between 2-10 options (only 1-100 characters each)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#sendpoll\n     */\n\n  }, {\n    key: 'sendPoll',\n    value: function sendPoll(chatId, question, pollOptions) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.question = question;\n      form.options = stringify(pollOptions);\n      return this._request('sendPoll', { form: form });\n    }\n\n    /**\n     * Send Dice\n     * Use this method to send an animated emoji that will display a random value.\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n     * @see https://core.telegram.org/bots/api#senddice\n     */\n\n  }, {\n    key: 'sendDice',\n    value: function sendDice(chatId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('dice');\n        opts.formData = sendData[0];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendDice', opts);\n    }\n\n    /**\n     * Send chat action.\n     *\n     * Use this method when you need to tell the user that something is happening on the bot's side.\n     * **The status is set for 5 seconds or less** (when a message arrives from your bot, Telegram clients clear its typing status).\n     *\n     *  Action `typing` for [text messages](https://core.telegram.org/bots/api#sendmessage),\n     * `upload_photo` for [photos](https://core.telegram.org/bots/api#sendphoto), `record_video` or `upload_video` for [videos](https://core.telegram.org/bots/api#sendvideo),\n     * `record_voice` or `upload_voice` for [voice notes](https://core.telegram.org/bots/api#sendvoice), `upload_document` for [general files](https://core.telegram.org/bots/api#senddocument),\n     * `choose_sticker` for [stickers](https://core.telegram.org/bots/api#sendsticker), `find_location` for [location data](https://core.telegram.org/bots/api#sendlocation),\n     * `record_video_note` or `upload_video_note` for [video notes](https://core.telegram.org/bots/api#sendvideonote).\n     *\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} action Type of action to broadcast.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#sendchataction\n     */\n\n  }, {\n    key: 'sendChatAction',\n    value: function sendChatAction(chatId, action) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.action = action;\n      return this._request('sendChatAction', { form: form });\n    }\n\n    /**\n     * Use this method to change the chosen reactions on a message.\n     * - Service messages can't be reacted to.\n     * - Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel.\n     * - In albums, bots must react to the first message.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param  {Number} messageId  Unique identifier of the target message\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise<Boolean>} True on success\n     * @see https://core.telegram.org/bots/api#setmessagereaction\n     */\n\n  }, {\n    key: 'setMessageReaction',\n    value: function setMessageReaction(chatId, messageId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_id = messageId;\n      if (form.reaction) {\n        form.reaction = stringify(form.reaction);\n      }\n      return this._request('setMessageReaction', { form: form });\n    }\n\n    /**\n     * Use this method to get a list of profile pictures for a user.\n     * Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.\n     * This method has an [older, compatible signature][getUserProfilePhotos-v0.25.0]\n     * that is being deprecated.\n     *\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}  Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object\n     * @see https://core.telegram.org/bots/api#getuserprofilephotos\n     */\n\n  }, {\n    key: 'getUserProfilePhotos',\n    value: function getUserProfilePhotos(userId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      /* The older method signature was getUserProfilePhotos(userId, offset, limit).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) !== 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature getUserProfilePhotos(userId, offset, limit) has been deprecated since v0.25.0');\n        form = {\n          offset: arguments[1],\n          limit: arguments[2]\n        };\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      }\n      form.user_id = userId;\n      return this._request('getUserProfilePhotos', { form: form });\n    }\n\n    /**\n     * Get file.\n     * Use this method to get basic info about a file and prepare it for downloading.\n     *\n     * Attention: **link will be valid for 1 hour.**\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n     * @see https://core.telegram.org/bots/api#getfile\n     */\n\n  }, {\n    key: 'getFile',\n    value: function getFile(fileId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.file_id = fileId;\n      return this._request('getFile', { form: form });\n    }\n\n    /**\n      * Use this method to ban a user in a group, a supergroup or a channel.\n      * In the case of supergroups and channels, the user will not be able to\n      * return to the chat on their own using invite links, etc., unless unbanned first..\n      *\n      * The **bot must be an administrator in the group, supergroup or a channel** for this to work.\n      *\n      *\n      * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n      * @param  {Number} userId  Unique identifier of the target user\n      * @param  {Object} [options] Additional Telegram query options\n      * @return {Promise} True on success.\n      * @see https://core.telegram.org/bots/api#banchatmember\n      */\n\n  }, {\n    key: 'banChatMember',\n    value: function banChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('banChatMember', { form: form });\n    }\n\n    /**\n    * Use this method to unban a previously kicked user in a supergroup.\n    * The user will not return to the group automatically, but will be\n    * able to join via link, etc.\n    *\n    * The **bot must be an administrator** in the supergroup or channel for this to work.\n    *\n    * **By default**, this method guarantees that after the call the user is not a member of the chat, but will be able to join it.\n    * So **if the user is a member of the chat they will also be removed from the chat**. If you don't want this, use the parameter *only_if_banned*\n    *\n    * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} userId  Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#unbanchatmember\n    */\n\n  }, {\n    key: 'unbanChatMember',\n    value: function unbanChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('unbanChatMember', { form: form });\n    }\n\n    /**\n    * Use this method to restrict a user in a supergroup.\n    * The bot **must be an administrator in the supergroup** for this to work\n    * and must have the appropriate admin rights. Pass True for all boolean parameters\n    * to lift restrictions from a user. Returns True on success.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} userId Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#restrictchatmember\n    */\n\n  }, {\n    key: 'restrictChatMember',\n    value: function restrictChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('restrictChatMember', { form: form });\n    }\n\n    /**\n     * Use this method to promote or demote a user in a supergroup or a channel.\n     * The bot **must be an administrator** in the chat for this to work\n     * and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success.\n     * @see https://core.telegram.org/bots/api#promotechatmember\n     */\n\n  }, {\n    key: 'promoteChatMember',\n    value: function promoteChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('promoteChatMember', { form: form });\n    }\n\n    /**\n     * Use this method to set a custom title for an administrator in a supergroup promoted by the bot.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId Unique identifier of the target user\n     * @param  {String} customTitle New custom title for the administrator; 0-16 characters, emoji are not allowed\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatadministratorcustomtitle\n     */\n\n  }, {\n    key: 'setChatAdministratorCustomTitle',\n    value: function setChatAdministratorCustomTitle(chatId, userId, customTitle) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      form.custom_title = customTitle;\n      return this._request('setChatAdministratorCustomTitle', { form: form });\n    }\n\n    /**\n     * Use this method to ban a channel chat in a supergroup or a channel.\n     *\n     * Until the chat is [unbanned](https://core.telegram.org/bots/api#unbanchatsenderchat), the owner of the banned chat won't be able to send messages on behalf of any of their channels.\n     * The bot **must be an administrator in the supergroup or channel** for this to work and must have the appropriate administrator rights\n     *\n     * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} senderChatId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success.\n     * @see https://core.telegram.org/bots/api#banchatsenderchat\n     */\n\n  }, {\n    key: 'banChatSenderChat',\n    value: function banChatSenderChat(chatId, senderChatId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.sender_chat_id = senderChatId;\n      return this._request('banChatSenderChat', { form: form });\n    }\n\n    /**\n    * Use this method to unban a previously banned channel chat in a supergroup or channel.\n    *\n    * The bot **must be an administrator** for this to work and must have the appropriate administrator rights.\n    *\n    * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} senderChatId Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#unbanchatsenderchat\n    */\n\n  }, {\n    key: 'unbanChatSenderChat',\n    value: function unbanChatSenderChat(chatId, senderChatId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.sender_chat_id = senderChatId;\n      return this._request('unbanChatSenderChat', { form: form });\n    }\n\n    /**\n     * Use this method to set default chat permissions for all members.\n     *\n     * The bot **must be an administrator in the group or a supergroup** for this to\n     * work and **must have the `can_restrict_members` admin rights.**\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Array} chatPermissions New default chat permissions\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatpermissions\n     */\n\n  }, {\n    key: 'setChatPermissions',\n    value: function setChatPermissions(chatId, chatPermissions) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.permissions = stringify(chatPermissions);\n      return this._request('setChatPermissions', { form: form });\n    }\n\n    /**\n     * Use this method to generate a new primary invite link for a chat. **Any previously generated primary link is revoked**.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Exported invite link as String on success.\n     * @see https://core.telegram.org/bots/api#exportchatinvitelink\n     */\n\n  }, {\n    key: 'exportChatInviteLink',\n    value: function exportChatInviteLink(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('exportChatInviteLink', { form: form });\n    }\n\n    /**\n     * Use this method to create an additional invite link for a chat.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * The link generated with this method can be revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api#revokechatinvitelink)\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Object} The new invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n     * @see https://core.telegram.org/bots/api#createchatinvitelink\n     */\n\n  }, {\n    key: 'createChatInviteLink',\n    value: function createChatInviteLink(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('createChatInviteLink', { form: form });\n    }\n\n    /**\n     * Use this method to edit a non-primary invite link created by the bot.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} inviteLink Text with the invite link to edit\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} The edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n     * @see https://core.telegram.org/bots/api#editchatinvitelink\n     */\n\n  }, {\n    key: 'editChatInviteLink',\n    value: function editChatInviteLink(chatId, inviteLink) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.invite_link = inviteLink;\n      return this._request('editChatInviteLink', { form: form });\n    }\n\n    /**\n     * Use this method to revoke an invite link created by the bot.\n     * Note: If the primary link is revoked, a new link is automatically generated\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} inviteLink The invite link to revoke\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} The revoked invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n     * @see https://core.telegram.org/bots/api#revokechatinvitelink\n     */\n\n  }, {\n    key: 'revokeChatInviteLink',\n    value: function revokeChatInviteLink(chatId, inviteLink) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.invite_link = inviteLink;\n      return this._request('revokeChatInviteLink', { form: form });\n    }\n\n    /**\n     * Use this method to approve a chat join request.\n     *\n     * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right.**\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#approvechatjoinrequest\n     */\n\n  }, {\n    key: 'approveChatJoinRequest',\n    value: function approveChatJoinRequest(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('approveChatJoinRequest', { form: form });\n    }\n\n    /**\n     * Use this method to decline a chat join request.\n     *\n     * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right**.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#declinechatjoinrequest\n     */\n\n  }, {\n    key: 'declineChatJoinRequest',\n    value: function declineChatJoinRequest(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('declineChatJoinRequest', { form: form });\n    }\n\n    /**\n     * Use this method to set a new profile photo for the chat. **Photos can't be changed for private chats**.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {stream.Stream|Buffer} photo A file path or a Stream.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatphoto\n     */\n\n  }, {\n    key: 'setChatPhoto',\n    value: function setChatPhoto(chatId, photo) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('photo', photo, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.photo = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('setChatPhoto', opts);\n    }\n\n    /**\n    * Use this method to delete a chat photo. **Photos can't be changed for private chats**.\n    *\n    * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#deletechatphoto\n    */\n\n  }, {\n    key: 'deleteChatPhoto',\n    value: function deleteChatPhoto(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('deleteChatPhoto', { form: form });\n    }\n\n    /**\n     * Use this method to change the title of a chat. **Titles can't be changed for private chats**.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} title New chat title, 1-255 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchattitle\n     */\n\n  }, {\n    key: 'setChatTitle',\n    value: function setChatTitle(chatId, title) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.title = title;\n      return this._request('setChatTitle', { form: form });\n    }\n\n    /**\n     * Use this method to change the description of a group, a supergroup or a channel.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} description New chat title, 0-255 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatdescription\n     */\n\n  }, {\n    key: 'setChatDescription',\n    value: function setChatDescription(chatId, description) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.description = description;\n      return this._request('setChatDescription', { form: form });\n    }\n\n    /**\n     * Use this method to pin a message in a supergroup.\n     *\n     * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n     * right in a supergroup or `can_edit_messages` administrator right in a channel.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Number} messageId Identifier of a message to pin\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#pinchatmessage\n     */\n\n  }, {\n    key: 'pinChatMessage',\n    value: function pinChatMessage(chatId, messageId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_id = messageId;\n      return this._request('pinChatMessage', { form: form });\n    }\n\n    /**\n     * Use this method to remove a message from the list of pinned messages in a chat\n     *\n     * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n     * right in a supergroup or `can_edit_messages` administrator right in a channel.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unpinchatmessage\n     */\n\n  }, {\n    key: 'unpinChatMessage',\n    value: function unpinChatMessage(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('unpinChatMessage', { form: form });\n    }\n\n    /**\n    * Use this method to clear the list of pinned messages in a chat.\n    *\n    * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n    * right in a supergroup or `can_edit_messages` administrator right in a channel.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#unpinallchatmessages\n    */\n\n  }, {\n    key: 'unpinAllChatMessages',\n    value: function unpinAllChatMessages(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('unpinAllChatMessages', { form: form });\n    }\n\n    /**\n     * Use this method for your bot to leave a group, supergroup or channel\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#leavechat\n     */\n\n  }, {\n    key: 'leaveChat',\n    value: function leaveChat(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('leaveChat', { form: form });\n    }\n\n    /**\n     * Use this method to get up to date information about the chat\n     * (current name of the user for one-on-one conversations, current\n     * username of a user, group or channel, etc.).\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`) or channel\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [ChatFullInfo](https://core.telegram.org/bots/api#chatfullinfo) object on success\n     * @see https://core.telegram.org/bots/api#getchat\n     */\n\n  }, {\n    key: 'getChat',\n    value: function getChat(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('getChat', { form: form });\n    }\n\n    /**\n     * Use this method to get a list of administrators in a chat\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api#chatmember) objects that contains information about all chat administrators except other bots.\n     * If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned\n     * @see https://core.telegram.org/bots/api#getchatadministrators\n     */\n\n  }, {\n    key: 'getChatAdministrators',\n    value: function getChatAdministrators(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('getChatAdministrators', { form: form });\n    }\n\n    /**\n    * Use this method to get the number of members in a chat.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} Int on success\n    * @see https://core.telegram.org/bots/api#getchatmembercount\n    */\n\n  }, {\n    key: 'getChatMemberCount',\n    value: function getChatMemberCount(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('getChatMemberCount', { form: form });\n    }\n\n    /**\n     * Use this method to get information about a member of a chat.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [ChatMember](https://core.telegram.org/bots/api#chatmember) object on success\n     * @see https://core.telegram.org/bots/api#getchatmember\n     */\n\n  }, {\n    key: 'getChatMember',\n    value: function getChatMember(chatId, userId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.user_id = userId;\n      return this._request('getChatMember', { form: form });\n    }\n\n    /**\n     * Use this method to set a new group sticker set for a supergroup.\n     *\n     * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n     *\n     * **Note:** Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {String} stickerSetName Name of the sticker set to be set as the group sticker set\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatstickerset\n     */\n\n  }, {\n    key: 'setChatStickerSet',\n    value: function setChatStickerSet(chatId, stickerSetName) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.sticker_set_name = stickerSetName;\n      return this._request('setChatStickerSet', { form: form });\n    }\n\n    /**\n     * Use this method to delete a group sticker set from a supergroup.\n     *\n     * Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletechatstickerset\n     */\n\n  }, {\n    key: 'deleteChatStickerSet',\n    value: function deleteChatStickerSet(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('deleteChatStickerSet', { form: form });\n    }\n\n    /**\n     * Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects\n     * @see https://core.telegram.org/bots/api#getforumtopiciconstickers\n     */\n\n  }, {\n    key: 'getForumTopicIconStickers',\n    value: function getForumTopicIconStickers(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('getForumTopicIconStickers', { form: form });\n    }\n\n    /**\n     * Use this method to create a topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n     *\n     * Returns information about the created topic as a [ForumTopic](https://core.telegram.org/bots/api#forumtopic) object.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param  {String} name Topic name, 1-128 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @see https://core.telegram.org/bots/api#createforumtopic\n     */\n\n  }, {\n    key: 'createForumTopic',\n    value: function createForumTopic(chatId, name) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.name = name;\n      return this._request('createForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to edit name and icon of a topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#editforumtopic\n     */\n\n  }, {\n    key: 'editForumTopic',\n    value: function editForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('editForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to close an open topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#closeforumtopic\n     */\n\n  }, {\n    key: 'closeForumTopic',\n    value: function closeForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('closeForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to reopen a closed topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#reopenforumtopic\n     */\n\n  }, {\n    key: 'reopenForumTopic',\n    value: function reopenForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('reopenForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to delete a forum topic along with all its messages in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deleteforumtopic\n     */\n\n  }, {\n    key: 'deleteForumTopic',\n    value: function deleteForumTopic(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('deleteForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to clear the list of pinned messages in a forum topic.\n     * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unpinallforumtopicmessages\n     */\n\n  }, {\n    key: 'unpinAllForumTopicMessages',\n    value: function unpinAllForumTopicMessages(chatId, messageThreadId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_thread_id = messageThreadId;\n      return this._request('unpinAllForumTopicMessages', { form: form });\n    }\n\n    /**\n    * Use this method to edit the name of the 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically unhidden if it was hidden.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {String} name New topic name, 1-128 characters\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#editgeneralforumtopic\n    */\n\n  }, {\n    key: 'editGeneralForumTopic',\n    value: function editGeneralForumTopic(chatId, name) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.name = name;\n      return this._request('editGeneralForumTopic', { form: form });\n    }\n\n    /**\n    * Use this method to close an open 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically unhidden if it was hidden.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#closegeneralforumtopic\n    */\n\n  }, {\n    key: 'closeGeneralForumTopic',\n    value: function closeGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('closeGeneralForumTopic', { form: form });\n    }\n\n    /**\n    * Use this method to reopen a closed 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically unhidden if it was hidden.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#reopengeneralforumtopic\n    */\n\n  }, {\n    key: 'reopenGeneralForumTopic',\n    value: function reopenGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('reopenGeneralForumTopic', { form: form });\n    }\n\n    /**\n    * Use this method to hide the 'General' topic in a forum supergroup chat.\n    * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n    * The topic will be automatically closed if it was open.\n    *\n    * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n    * @param {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#hidegeneralforumtopic\n    */\n\n  }, {\n    key: 'hideGeneralForumTopic',\n    value: function hideGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('hideGeneralForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to unhide the 'General' topic in a forum supergroup chat.\n     * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unhidegeneralforumtopic\n     */\n\n  }, {\n    key: 'unhideGeneralForumTopic',\n    value: function unhideGeneralForumTopic(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('unhideGeneralForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to clear the list of pinned messages in a General forum topic.\n     * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n     *\n     * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @param {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages\n     */\n\n  }, {\n    key: 'unpinAllGeneralForumTopicMessages',\n    value: function unpinAllGeneralForumTopicMessages(chatId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.chat_id = chatId;\n      return this._request('unhideGeneralForumTopic', { form: form });\n    }\n\n    /**\n     * Use this method to send answers to callback queries sent from\n     * [inline keyboards](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating).\n     *\n     * The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.\n     *\n     * This method has **older, compatible signatures ([1][answerCallbackQuery-v0.27.1])([2][answerCallbackQuery-v0.29.0])**\n     * that are being deprecated.\n     *\n     * @param  {String} callbackQueryId Unique identifier for the query to be answered\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#answercallbackquery\n     */\n\n  }, {\n    key: 'answerCallbackQuery',\n    value: function answerCallbackQuery(callbackQueryId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      /* The older method signature (in/before v0.27.1) was answerCallbackQuery(callbackQueryId, text, showAlert).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) !== 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature answerCallbackQuery(callbackQueryId, text, showAlert) has been deprecated since v0.27.1');\n        form = {\n          callback_query_id: arguments[0],\n          text: arguments[1],\n          show_alert: arguments[2]\n        };\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      }\n      /* The older method signature (in/before v0.29.0) was answerCallbackQuery([options]).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library. */\n      if ((typeof callbackQueryId === 'undefined' ? 'undefined' : _typeof(callbackQueryId)) === 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature answerCallbackQuery([options]) has been deprecated since v0.29.0');\n        form = callbackQueryId;\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      } else {\n        form.callback_query_id = callbackQueryId;\n      }\n      return this._request('answerCallbackQuery', { form: form });\n    }\n\n    /**\n     * Use this method to get the list of boosts added to a chat by a use.\n     * Requires administrator rights in the chat\n     *\n     * @param  {Number|String} chatId  Unique identifier for the group/channel\n     * @param  {Number} user_id Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, returns a [UserChatBoosts](https://core.telegram.org/bots/api#userchatboosts) object\n     * @see https://core.telegram.org/bots/api#getuserchatboosts\n     */\n\n  }, {\n    key: 'getUserChatBoosts',\n    value: function getUserChatBoosts(chatId, pollId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_id = pollId;\n      return this._request('getUserChatBoosts', { form: form });\n    }\n\n    /**\n     * Use this method to get information about the connection of the bot with a business account\n     *\n     * @param  {Number|String} businessConnectionId  Unique identifier for the group/channel\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, returns [BusinessConnection](https://core.telegram.org/bots/api#businessconnection) object\n     * @see https://core.telegram.org/bots/api#getbusinessconnection\n     */\n\n  }, {\n    key: 'getBusinessConnection',\n    value: function getBusinessConnection(businessConnectionId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.business_connection_id = businessConnectionId;\n      return this._request('getBusinessConnection', { form: form });\n    }\n\n    /**\n     * Use this method to change the list of the bot's commands.\n     *\n     * See https://core.telegram.org/bots#commands for more details about bot commands\n     *\n     * @param  {Array} commands  List of bot commands to be set as the list of the [bot's commands](https://core.telegram.org/bots/api#botcommand). At most 100 commands can be specified.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setmycommands\n     */\n\n  }, {\n    key: 'setMyCommands',\n    value: function setMyCommands(commands) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.commands = stringify(commands);\n\n      if (form.scope) {\n        form.scope = stringify(form.scope);\n      }\n\n      return this._request('setMyCommands', { form: form });\n    }\n\n    /**\n     * Use this method to delete the list of the bot's commands for the given scope and user language.\n     *\n     *  After deletion, [higher level commands](https://core.telegram.org/bots/api#determining-list-of-commands) will be shown to affected users.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletemycommands\n     */\n\n  }, {\n    key: 'deleteMyCommands',\n    value: function deleteMyCommands() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('deleteMyCommands', { form: form });\n    }\n\n    /**\n     * Use this method to get the current list of the bot's commands for the given scope and user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Array of [BotCommand](https://core.telegram.org/bots/api#botcommand) on success. If commands aren't set, an empty list is returned.\n     * @see https://core.telegram.org/bots/api#getmycommands\n     */\n\n  }, {\n    key: 'getMyCommands',\n    value: function getMyCommands() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (form.scope) {\n        form.scope = stringify(form.scope);\n      }\n      return this._request('getMyCommands', { form: form });\n    }\n\n    /**\n     * Use this method to change the bot's name.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setmyname\n     */\n\n  }, {\n    key: 'setMyName',\n    value: function setMyName() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setMyName', { form: form });\n    }\n\n    /**\n     * Use this method to get the current bot name for the given user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [BotName](https://core.telegram.org/bots/api#botname) on success\n     * @see https://core.telegram.org/bots/api#getmyname\n     */\n\n  }, {\n    key: 'getMyName',\n    value: function getMyName() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMyName', { form: form });\n    }\n\n    /**\n     * Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty.\n     *\n     * Returns True on success.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setmydescription\n     */\n\n  }, {\n    key: 'setMyDescription',\n    value: function setMyDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setMyDescription', { form: form });\n    }\n\n    /**\n     * Use this method to get the current bot description for the given user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Returns [BotDescription](https://core.telegram.org/bots/api#botdescription) on success.\n     * @see https://core.telegram.org/bots/api#getmydescription\n     */\n\n  }, {\n    key: 'getMyDescription',\n    value: function getMyDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMyDescription', { form: form });\n    }\n\n    /**\n     * Use this method to change the bot's short description, which is shown on the bot's profile page\n     * and is sent together with the link when users share the bot.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Returns True on success.\n     * @see https://core.telegram.org/bots/api#setmyshortdescription\n     */\n\n  }, {\n    key: 'setMyShortDescription',\n    value: function setMyShortDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setMyShortDescription', { form: form });\n    }\n\n    /**\n     * Use this method to get the current bot short description for the given user language.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Returns [BotShortDescription](https://core.telegram.org/bots/api#botshortdescription) on success.\n     * @see https://core.telegram.org/bots/api#getmyshortdescription\n     */\n\n  }, {\n    key: 'getMyShortDescription',\n    value: function getMyShortDescription() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMyShortDescription', { form: form });\n    }\n\n    /**\n     * Use this method to change the bot's menu button in a private chat, or the default menu button.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setchatmenubutton\n     */\n\n  }, {\n    key: 'setChatMenuButton',\n    value: function setChatMenuButton() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setChatMenuButton', { form: form });\n    }\n\n    /**\n     * Use this method to get the current value of the bot's menu button in a private chat, or the default menu button.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [MenuButton](https://core.telegram.org/bots/api#menubutton) on success\n     * @see https://core.telegram.org/bots/api#getchatmenubutton\n     */\n\n  }, {\n    key: 'getChatMenuButton',\n    value: function getChatMenuButton() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getChatMenuButton', { form: form });\n    }\n\n    /**\n     * Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels.\n     *\n     * These rights will be suggested to users, but they are are free to modify the list before adding the bot.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#getchatmenubutton\n     */\n\n  }, {\n    key: 'setMyDefaultAdministratorRights',\n    value: function setMyDefaultAdministratorRights() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('setMyDefaultAdministratorRights', { form: form });\n    }\n\n    /**\n     * Use this method to get the current default administrator rights of the bot.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} [ChatAdministratorRights](https://core.telegram.org/bots/api#chatadministratorrights) on success\n     * @see https://core.telegram.org/bots/api#getmydefaultadministratorrights\n     */\n\n  }, {\n    key: 'getMyDefaultAdministratorRights',\n    value: function getMyDefaultAdministratorRights() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this._request('getMyDefaultAdministratorRights', { form: form });\n    }\n\n    /**\n     * Use this method to edit text or [game](https://core.telegram.org/bots/api#games) messages sent by the bot or via the bot (for inline bots).\n     *\n     * Note: that **you must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {String} text  New text of the message\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagetext\n     */\n\n  }, {\n    key: 'editMessageText',\n    value: function editMessageText(text) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.text = text;\n      return this._request('editMessageText', { form: form });\n    }\n\n    /**\n     * Use this method to edit captions of messages sent by the bot or via the bot (for inline bots).\n     *\n     * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {String} caption  New caption of the message\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagecaption\n     */\n\n  }, {\n    key: 'editMessageCaption',\n    value: function editMessageCaption(caption) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.caption = caption;\n      return this._request('editMessageCaption', { form: form });\n    }\n\n    /**\n     * Use this method to edit animation, audio, document, photo, or video messages.\n     *\n     * If a message is a part of a message album, then it can be edited only to a photo or a video.\n     *\n     * Otherwise, message type can be changed arbitrarily. When inline message is edited, new file can't be uploaded.\n     * Use previously uploaded file via its file_id or specify a URL.\n     *\n     * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {Object} media  A JSON-serialized object for a new media content of the message\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagemedia\n     */\n\n  }, {\n    key: 'editMessageMedia',\n    value: function editMessageMedia(media) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var regexAttach = /attach:\\/\\/.+/;\n\n      if (typeof media.media === 'string' && regexAttach.test(media.media)) {\n        var opts = {\n          qs: form\n        };\n\n        opts.formData = {};\n\n        var payload = Object.assign({}, media);\n        delete payload.media;\n\n        try {\n          var attachName = String(0);\n\n          var _formatSendData6 = this._formatSendData(attachName, media.media.replace('attach://', ''), media.fileOptions),\n              _formatSendData7 = _slicedToArray(_formatSendData6, 1),\n              formData = _formatSendData7[0];\n\n          if (formData) {\n            opts.formData[attachName] = formData[attachName];\n            payload.media = 'attach://' + attachName;\n          } else {\n            throw new errors.FatalError('Failed to process the replacement action for your ' + media.type);\n          }\n        } catch (ex) {\n          return Promise.reject(ex);\n        }\n\n        opts.qs.media = stringify(payload);\n\n        return this._request('editMessageMedia', opts);\n      }\n\n      form.media = stringify(media);\n\n      return this._request('editMessageMedia', { form: form });\n    }\n\n    /**\n     * Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots).\n     *\n     * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n     *\n     * @param  {Object} replyMarkup  A JSON-serialized object for an inline keyboard.\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#editmessagetext\n     */\n\n  }, {\n    key: 'editMessageReplyMarkup',\n    value: function editMessageReplyMarkup(replyMarkup) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.reply_markup = replyMarkup;\n      return this._request('editMessageReplyMarkup', { form: form });\n    }\n\n    /**\n     * Use this method to stop a poll which was sent by the bot.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the group/channel\n     * @param  {Number} pollId Identifier of the original message with the poll\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the stopped [Poll](https://core.telegram.org/bots/api#poll) is returned\n     * @see https://core.telegram.org/bots/api#stoppoll\n     */\n\n  }, {\n    key: 'stopPoll',\n    value: function stopPoll(chatId, pollId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_id = pollId;\n      return this._request('stopPoll', { form: form });\n    }\n\n    /**\n     * Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS,\n     * or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers.\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String|stream.Stream|Buffer} sticker A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded. Stickers are WebP format files.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n     * @see https://core.telegram.org/bots/api#sendsticker\n     */\n\n  }, {\n    key: 'sendSticker',\n    value: function sendSticker(chatId, sticker) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('sticker', sticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.sticker = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendSticker', opts);\n    }\n\n    /**\n     * Use this method to get a sticker set.\n     *\n     * @param  {String} name Name of the sticker set\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, a [StickerSet](https://core.telegram.org/bots/api#stickerset) object is returned\n     * @see https://core.telegram.org/bots/api#getstickerset\n     */\n\n  }, {\n    key: 'getStickerSet',\n    value: function getStickerSet(name) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.name = name;\n      return this._request('getStickerSet', { form: form });\n    }\n\n    /**\n     * Use this method to get information about custom emoji stickers by their identifiers.\n     *\n     * @param  {Array} custom_emoji_ids List of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects.\n     * @see https://core.telegram.org/bots/api#getcustomemojistickers\n     */\n\n  }, {\n    key: 'getCustomEmojiStickers',\n    value: function getCustomEmojiStickers(customEmojiIds) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.custom_emoji_ids = stringify(customEmojiIds);\n      return this._request('getCustomEmojiStickers', { form: form });\n    }\n\n    /**\n     * Use this method to upload a file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple\n     * times).\n     *\n     * @param  {Number} userId User identifier of sticker file owner\n     * @param  {String|stream.Stream|Buffer} sticker A file path or a Stream with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. Can also be a `file_id` previously uploaded.\n     * @param {String} stickerFormat Allow values:  `static`, `animated` or `video`\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n     * @see https://core.telegram.org/bots/api#uploadstickerfile\n     */\n\n  }, {\n    key: 'uploadStickerFile',\n    value: function uploadStickerFile(userId, sticker) {\n      var stickerFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'static';\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var fileOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.sticker_format = stickerFormat;\n\n      try {\n        var sendData = this._formatSendData('sticker', sticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.sticker = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('uploadStickerFile', opts);\n    }\n\n    /**\n     * Use this method to create new sticker set owned by a user.\n     *\n     * The bot will be able to edit the created sticker set.\n     *\n     * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n     *\n     * @param  {Number} userId User identifier of created sticker set owner\n     * @param  {String} name Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g.,   *\"animals\"*). Can contain only english letters, digits and underscores.\n     *  Must begin with a letter, can't contain consecutive underscores and must end in `\"_by_<bot_username>\"`. `<bot_username>` is case insensitive. 1-64 characters.\n     * @param  {String} title Sticker set title, 1-64 characters\n     * @param  {String|stream.Stream|Buffer} pngSticker Png image with the sticker, must be up to 512 kilobytes in size,\n     *  dimensions must not exceed 512px, and either width or height must be exactly 512px.\n     * @param  {String} emojis One or more emoji corresponding to the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#createnewstickerset\n     */\n\n  }, {\n    key: 'createNewStickerSet',\n    value: function createNewStickerSet(userId, name, title, pngSticker, emojis) {\n      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n      var fileOptions = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.name = name;\n      opts.qs.title = title;\n      opts.qs.emojis = emojis;\n      opts.qs.mask_position = stringify(options.mask_position);\n      try {\n        var sendData = this._formatSendData('png_sticker', pngSticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.png_sticker = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('createNewStickerSet', opts);\n    }\n\n    /**\n     * Use this method to add a new sticker to a set created by the bot.\n     *\n     * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n     *\n     * Animated stickers can be added to animated sticker sets and only to them\n     *\n     * Note:\n     * - Emoji sticker sets can have up to 200 sticker\n     * - Static or Animated sticker sets can have up to 120 stickers\n     *\n     * @param  {Number} userId User identifier of sticker set owner\n     * @param  {String} name Sticker set name\n     * @param  {String|stream.Stream|Buffer} sticker Png image with the sticker (must be up to 512 kilobytes in size,\n     * dimensions must not exceed 512px, and either width or height must be exactly 512px, [TGS animation](https://core.telegram.org/stickers#animated-sticker-requirements)\n     * with the sticker or [WEBM video](https://core.telegram.org/stickers#video-sticker-requirements) with the sticker.\n     * @param  {String} emojis One or more emoji corresponding to the sticker\n     * @param  {String} stickerType Allow values: `png_sticker`, `tgs_sticker`, or `webm_sticker`.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise}  True on success\n     * @see https://core.telegram.org/bots/api#addstickertoset\n     */\n\n  }, {\n    key: 'addStickerToSet',\n    value: function addStickerToSet(userId, name, sticker, emojis) {\n      var stickerType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'png_sticker';\n      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n      var fileOptions = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.name = name;\n      opts.qs.emojis = emojis;\n      opts.qs.mask_position = stringify(options.mask_position);\n\n      if (typeof stickerType !== 'string' || ['png_sticker', 'tgs_sticker', 'webm_sticker'].indexOf(stickerType) === -1) {\n        return Promise.reject(new Error('stickerType must be a string and the allow types is: png_sticker, tgs_sticker, webm_sticker'));\n      }\n\n      try {\n        var sendData = this._formatSendData(stickerType, sticker, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs[stickerType] = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('addStickerToSet', opts);\n    }\n\n    /**\n     * Use this method to move a sticker in a set created by the bot to a specific position.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Number} position New sticker position in the set, zero-based\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickerpositioninset\n     */\n\n  }, {\n    key: 'setStickerPositionInSet',\n    value: function setStickerPositionInSet(sticker, position) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.sticker = sticker;\n      form.position = position;\n      return this._request('setStickerPositionInSet', { form: form });\n    }\n\n    /**\n     * Use this method to delete a sticker from a set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletestickerfromset\n     * @todo Add tests for this method!\n     */\n\n  }, {\n    key: 'deleteStickerFromSet',\n    value: function deleteStickerFromSet(sticker) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.sticker = sticker;\n      return this._request('deleteStickerFromSet', { form: form });\n    }\n\n    /**\n     * Use this method to replace an existing sticker in a sticker set with a new one\n     *\n     * @param  {Number} user_id User identifier of the sticker set owner\n     * @param  {String} name Sticker set name\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#replacestickerinset\n     * @todo Add tests for this method!\n     */\n\n  }, {\n    key: 'replaceStickerInSet',\n    value: function replaceStickerInSet(userId, name, oldSticker) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.user_id = userId;\n      form.name = name;\n      form.old_sticker = oldSticker;\n      return this._request('deleteStickerFromSet', { form: form });\n    }\n\n    /**\n     * Use this method to change the list of emoji assigned to a regular or custom emoji sticker.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param { Array } emojiList A JSON-serialized list of 1-20 emoji associated with the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickeremojilist\n     */\n\n  }, {\n    key: 'setStickerEmojiList',\n    value: function setStickerEmojiList(sticker, emojiList) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.sticker = sticker;\n      form.emoji_list = stringify(emojiList);\n      return this._request('setStickerEmojiList', { form: form });\n    }\n\n    /**\n     * Use this method to change the list of emoji assigned to a `regular` or `custom emoji` sticker.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickerkeywords\n     */\n\n  }, {\n    key: 'setStickerKeywords',\n    value: function setStickerKeywords(sticker) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.sticker = sticker;\n      if (form.keywords) {\n        form.keywords = stringify(form.keywords);\n      }\n      return this._request('setStickerKeywords', { form: form });\n    }\n\n    /**\n     * Use this method to change the [mask position](https://core.telegram.org/bots/api#maskposition) of a mask sticker.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} sticker File identifier of the sticker\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickermaskposition\n     */\n\n  }, {\n    key: 'setStickerMaskPosition',\n    value: function setStickerMaskPosition(sticker) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.sticker = sticker;\n      if (form.mask_position) {\n        form.mask_position = stringify(form.mask_position);\n      }\n      return this._request('setStickerMaskPosition', { form: form });\n    }\n\n    /**\n     * Use this method to set the title of a created sticker set.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} name Sticker set name\n     * @param  {String} title Sticker set title, 1-64 characters\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickersettitle\n     */\n\n  }, {\n    key: 'setStickerSetTitle',\n    value: function setStickerSetTitle(name, title) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.name = name;\n      form.title = title;\n      return this._request('setStickerSetTitle', { form: form });\n    }\n\n    /**\n     * Use this method to add a thumb to a set created by the bot.\n     *\n     * Animated thumbnails can be set for animated sticker sets only. Video thumbnails can be set only for video sticker sets only\n     *\n     * @param  {Number} userId User identifier of sticker set owner\n     * @param  {String} name Sticker set name\n     * @param  {String|stream.Stream|Buffer} thumbnail A .WEBP or .PNG image with the thumbnail,\n     * must be up to 128 kilobytes in size and have width and height exactly 100px,\n     * a TGS animation with the thumbnail up to 32 kilobytes in size or a WEBM video with the thumbnail up to 32 kilobytes in size.\n     *\n     * Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram\n     * to get a file from the Internet, or upload a new one. Animated sticker set thumbnails can't be uploaded via HTTP URL.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOptions] Optional file related meta-data\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setstickersetthumbnail\n     */\n\n  }, {\n    key: 'setStickerSetThumbnail',\n    value: function setStickerSetThumbnail(userId, name, thumbnail) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var fileOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.user_id = userId;\n      opts.qs.name = name;\n      opts.qs.mask_position = stringify(options.mask_position);\n      try {\n        var sendData = this._formatSendData('thumbnail', thumbnail, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.thumbnail = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('setStickerSetThumbnail', opts);\n    }\n\n    /**\n     * Use this method to set the thumbnail of a custom emoji sticker set.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} name Sticker set name\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#setcustomemojistickersetthumbnail\n     */\n\n  }, {\n    key: 'setCustomEmojiStickerSetThumbnail',\n    value: function setCustomEmojiStickerSetThumbnail(name) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.name = name;\n      return this._request('setCustomEmojiStickerSetThumbnail', { form: form });\n    }\n\n    /**\n     * Use this method to delete a sticker set that was created by the bot.\n     *\n     * The sticker must belong to a sticker set created by the bot.\n     *\n     * @param  {String} name Sticker set name\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} True on success\n     * @see https://core.telegram.org/bots/api#deletestickerset\n     */\n\n  }, {\n    key: 'deleteStickerSet',\n    value: function deleteStickerSet(name) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.name = name;\n      return this._request('deleteStickerSet', { form: form });\n    }\n\n    /**\n     * Send answers to an inline query.\n     *\n     * Note: No more than 50 results per query are allowed.\n     *\n     * @param  {String} inlineQueryId Unique identifier of the query\n     * @param  {InlineQueryResult[]} results An array of results for the inline query\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, True is returned\n     * @see https://core.telegram.org/bots/api#answerinlinequery\n     */\n\n  }, {\n    key: 'answerInlineQuery',\n    value: function answerInlineQuery(inlineQueryId, results) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.inline_query_id = inlineQueryId;\n      form.results = stringify(results);\n      return this._request('answerInlineQuery', { form: form });\n    }\n\n    /**\n     * Use this method to set the result of an interaction with a [Web App](https://core.telegram.org/bots/webapps)\n     * and send a corresponding message on behalf of the user to the chat from which the query originated.\n     *\n     * @param  {String} webAppQueryId Unique identifier for the query to be answered\n     * @param  {InlineQueryResult} result object that represents one result of an inline query\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, a [SentWebAppMessage](https://core.telegram.org/bots/api#sentwebappmessage) object is returned\n     * @see https://core.telegram.org/bots/api#answerwebappquery\n     */\n\n  }, {\n    key: 'answerWebAppQuery',\n    value: function answerWebAppQuery(webAppQueryId, result) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.web_app_query_id = webAppQueryId;\n      form.result = stringify(result);\n      return this._request('answerWebAppQuery', { form: form });\n    }\n\n    /**\n     * Use this method to send an invoice.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} title Product name, 1-32 characters\n     * @param  {String} description Product description, 1-255 characters\n     * @param  {String} payload Bot defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.\n     * @param  {String} providerToken Payments provider token, obtained via `@BotFather`\n     * @param  {String} currency Three-letter ISO 4217 currency code\n     * @param  {Array} prices Breakdown of prices\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n     * @see https://core.telegram.org/bots/api#sendinvoice\n     */\n\n  }, {\n    key: 'sendInvoice',\n    value: function sendInvoice(chatId, title, description, payload, providerToken, currency, prices) {\n      var form = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};\n\n      form.chat_id = chatId;\n      form.title = title;\n      form.description = description;\n      form.payload = payload;\n      form.provider_token = providerToken;\n      form.currency = currency;\n      form.prices = stringify(prices);\n      form.provider_data = stringify(form.provider_data);\n      if (form.suggested_tip_amounts) {\n        form.suggested_tip_amounts = stringify(form.suggested_tip_amounts);\n      }\n      return this._request('sendInvoice', { form: form });\n    }\n\n    /**\n    * Use this method to create a link for an invoice.\n    *\n    * @param {String} title Product name, 1-32 characters\n    * @param {String} description Product description, 1-255 characters\n    * @param {String} payload Bot defined invoice payload\n    * @param {String} providerToken Payment provider token\n    * @param {String} currency Three-letter ISO 4217 currency code\n    * @param {Array} prices Breakdown of prices\n    * @param {Object} [options] Additional Telegram query options\n    * @returns {Promise} The created invoice link as String on success.\n    * @see https://core.telegram.org/bots/api#createinvoicelink\n    */\n\n  }, {\n    key: 'createInvoiceLink',\n    value: function createInvoiceLink(title, description, payload, providerToken, currency, prices) {\n      var form = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n\n      form.title = title;\n      form.description = description;\n      form.payload = payload;\n      form.provider_token = providerToken;\n      form.currency = currency;\n      form.prices = stringify(prices);\n      return this._request('createInvoiceLink', { form: form });\n    }\n\n    /**\n    * Use this method to reply to shipping queries.\n    *\n    * If you sent an invoice requesting a shipping address and the parameter is_flexible was specified,\n    * the Bot API will send an [Update](https://core.telegram.org/bots/api#update) with a shipping_query field to the bot\n    *\n    * @param  {String} shippingQueryId  Unique identifier for the query to be answered\n    * @param  {Boolean} ok Specify if delivery of the product is possible\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} On success, True is returned\n    * @see https://core.telegram.org/bots/api#answershippingquery\n    */\n\n  }, {\n    key: 'answerShippingQuery',\n    value: function answerShippingQuery(shippingQueryId, ok) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.shipping_query_id = shippingQueryId;\n      form.ok = ok;\n      form.shipping_options = stringify(form.shipping_options);\n      return this._request('answerShippingQuery', { form: form });\n    }\n\n    /**\n     * Use this method to respond to such pre-checkout queries\n     *\n     * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of\n     * an [Update](https://core.telegram.org/bots/api#update) with the field *pre_checkout_query*.\n     *\n     * **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n     *\n     * @param  {String} preCheckoutQueryId  Unique identifier for the query to be answered\n     * @param  {Boolean} ok Specify if every order details are ok\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, True is returned\n     * @see https://core.telegram.org/bots/api#answerprecheckoutquery\n     */\n\n  }, {\n    key: 'answerPreCheckoutQuery',\n    value: function answerPreCheckoutQuery(preCheckoutQueryId, ok) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.pre_checkout_query_id = preCheckoutQueryId;\n      form.ok = ok;\n      return this._request('answerPreCheckoutQuery', { form: form });\n    }\n\n    /**\n     * Use this method to send a game.\n     *\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n     * @param  {String} gameShortName name of the game to be sent. Set up your games via `@BotFather`.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n     * @see https://core.telegram.org/bots/api#sendgame\n     */\n\n  }, {\n    key: 'sendGame',\n    value: function sendGame(chatId, gameShortName) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.game_short_name = gameShortName;\n      return this._request('sendGame', { form: form });\n    }\n\n    /**\n     * Use this method to set the score of the specified user in a game message.\n     *\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Number} score New score value, must be non-negative\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, if the message is not an inline message, the [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n     * @see https://core.telegram.org/bots/api#setgamescore\n     */\n\n  }, {\n    key: 'setGameScore',\n    value: function setGameScore(userId, score) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.user_id = userId;\n      form.score = score;\n      return this._request('setGameScore', { form: form });\n    }\n\n    /**\n     * Use this method to get data for high score tables.\n     *\n     * Will return the score of the specified user and several of their neighbors in a game.\n     *\n     * @param  {Number} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise} On success, returns an Array of [GameHighScore](https://core.telegram.org/bots/api#gamehighscore) objects\n     * @see https://core.telegram.org/bots/api#getgamehighscores\n     */\n\n  }, {\n    key: 'getGameHighScores',\n    value: function getGameHighScores(userId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.user_id = userId;\n      return this._request('getGameHighScores', { form: form });\n    }\n\n    /**\n    * Use this method to delete a message, including service messages, with the following limitations:\n    * - A message can only be deleted if it was sent less than 48 hours ago.\n    * - A dice message can only be deleted if it was sent more than 24 hours ago.\n    * - Bots can delete outgoing messages in groups and supergroups.\n    * - Bots can delete incoming messages in groups, supergroups and channels.\n    * - Bots granted `can_post_messages` permissions can delete outgoing messages in channels.\n    * - If the bot is an administrator of a group, it can delete any message there.\n    * - If the bot has `can_delete_messages` permission in a supergroup, it can delete any message there.\n    *\n    * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n    * @param  {Number} messageId  Unique identifier of the target message\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success\n    * @see https://core.telegram.org/bots/api#deletemessage\n    */\n\n  }, {\n    key: 'deleteMessage',\n    value: function deleteMessage(chatId, messageId) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_id = messageId;\n      return this._request('deleteMessage', { form: form });\n    }\n\n    /**\n     * Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n     * @param  {Array<Number|String>} messageIds  Identifiers of 1-100 messages to delete. See deleteMessage for limitations on which messages can be deleted\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise<Boolean>} True on success\n     * @see https://core.telegram.org/bots/api#deletemessages\n     */\n\n  }, {\n    key: 'deleteMessages',\n    value: function deleteMessages(chatId, messageIds) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.message_ids = stringify(messageIds);\n      return this._request('deleteMessages', { form: form });\n    }\n  }]);\n\n  return TelegramBot;\n}(EventEmitter);\n\nmodule.exports = TelegramBot;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/lib/telegram.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/lib/telegramPolling.js":
/*!*******************************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/lib/telegramPolling.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/node-telegram-bot-api/lib/errors.js\");\nvar debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/index.js\")('node-telegram-bot-api');\nvar deprecate = (__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/node-telegram-bot-api/lib/utils.js\").deprecate);\nvar ANOTHER_WEB_HOOK_USED = 409;\n\nvar TelegramBotPolling = function () {\n  /**\n   * Handles polling against the Telegram servers.\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  function TelegramBotPolling(bot) {\n    _classCallCheck(this, TelegramBotPolling);\n\n    this.bot = bot;\n    this.options = typeof bot.options.polling === 'boolean' ? {} : bot.options.polling;\n    this.options.interval = typeof this.options.interval === 'number' ? this.options.interval : 300;\n    this.options.params = _typeof(this.options.params) === 'object' ? this.options.params : {};\n    this.options.params.offset = typeof this.options.params.offset === 'number' ? this.options.params.offset : 0;\n    this.options.params.timeout = typeof this.options.params.timeout === 'number' ? this.options.params.timeout : 10;\n    if (typeof this.options.timeout === 'number') {\n      deprecate('`options.polling.timeout` is deprecated. Use `options.polling.params` instead.');\n      this.options.params.timeout = this.options.timeout;\n    }\n    this._lastUpdate = 0;\n    this._lastRequest = null;\n    this._abort = false;\n    this._pollingTimeout = null;\n  }\n\n  /**\n   * Start polling\n   * @param  {Object} [options]\n   * @param  {Object} [options.restart]\n   * @return {Promise}\n   */\n\n\n  _createClass(TelegramBotPolling, [{\n    key: 'start',\n    value: function start() {\n      var _this = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this._lastRequest) {\n        if (!options.restart) {\n          return Promise.resolve();\n        }\n        return this.stop({\n          cancel: true,\n          reason: 'Polling restart'\n        }).then(function () {\n          return _this._polling();\n        });\n      }\n      return this._polling();\n    }\n\n    /**\n     * Stop polling\n     * @param  {Object} [options] Options\n     * @param  {Boolean} [options.cancel] Cancel current request\n     * @param  {String} [options.reason] Reason for stopping polling\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this._lastRequest) {\n        return Promise.resolve();\n      }\n      var lastRequest = this._lastRequest;\n      this._lastRequest = null;\n      clearTimeout(this._pollingTimeout);\n      if (options.cancel) {\n        var reason = options.reason || 'Polling stop';\n        lastRequest.cancel(reason);\n        return Promise.resolve();\n      }\n      this._abort = true;\n      return lastRequest.finally(function () {\n        _this2._abort = false;\n      });\n    }\n\n    /**\n     * Return `true` if is polling. Otherwise, `false`.\n     */\n\n  }, {\n    key: 'isPolling',\n    value: function isPolling() {\n      return !!this._lastRequest;\n    }\n\n    /**\n     * Handle error thrown during polling.\n     * @private\n     * @param  {Error} error\n     */\n\n  }, {\n    key: '_error',\n    value: function _error(error) {\n      if (!this.bot.listeners('polling_error').length) {\n        return console.error('error: [polling_error] %j', error); // eslint-disable-line no-console\n      }\n      return this.bot.emit('polling_error', error);\n    }\n\n    /**\n     * Invokes polling (with recursion!)\n     * @return {Promise} promise of the current request\n     * @private\n     */\n\n  }, {\n    key: '_polling',\n    value: function _polling() {\n      var _this3 = this;\n\n      this._lastRequest = this._getUpdates().then(function (updates) {\n        _this3._lastUpdate = Date.now();\n        debug('polling data %j', updates);\n        updates.forEach(function (update) {\n          _this3.options.params.offset = update.update_id + 1;\n          debug('updated offset: %s', _this3.options.params.offset);\n          try {\n            _this3.bot.processUpdate(update);\n          } catch (err) {\n            err._processing = true;\n            throw err;\n          }\n        });\n        return null;\n      }).catch(function (err) {\n        debug('polling error: %s', err.message);\n        if (!err._processing) {\n          return _this3._error(err);\n        }\n        delete err._processing;\n        /*\n         * An error occured while processing the items,\n         * i.e. in `this.bot.processUpdate()` above.\n         * We need to mark the already-processed items\n         * to avoid fetching them again once the application\n         * is restarted, or moves to next polling interval\n         * (in cases where unhandled rejections do not terminate\n         * the process).\n         * See https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067\n         */\n        if (!_this3.bot.options.badRejection) {\n          return _this3._error(err);\n        }\n        var opts = {\n          offset: _this3.options.params.offset,\n          limit: 1,\n          timeout: 0\n        };\n        return _this3.bot.getUpdates(opts).then(function () {\n          return _this3._error(err);\n        }).catch(function (requestErr) {\n          /*\n           * We have been unable to handle this error.\n           * We have to log this to stderr to ensure devops\n           * understands that they may receive already-processed items\n           * on app restart.\n           * We simply can not rescue this situation, emit \"error\"\n           * event, with the hope that the application exits.\n           */\n          /* eslint-disable no-console */\n          var bugUrl = 'https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067';\n          console.error('error: Internal handling of The Offset Infinite Loop failed');\n          console.error('error: Due to error \\'' + requestErr + '\\'');\n          console.error('error: You may receive already-processed updates on app restart');\n          console.error('error: Please see ' + bugUrl + ' for more information');\n          /* eslint-enable no-console */\n          return _this3.bot.emit('error', new errors.FatalError(err));\n        });\n      }).finally(function () {\n        if (_this3._abort) {\n          debug('Polling is aborted!');\n        } else {\n          debug('setTimeout for %s miliseconds', _this3.options.interval);\n          _this3._pollingTimeout = setTimeout(function () {\n            return _this3._polling();\n          }, _this3.options.interval);\n        }\n      });\n      return this._lastRequest;\n    }\n\n    /**\n     * Unset current webhook. Used when we detect that a webhook has been set\n     * and we are trying to poll. Polling and WebHook are mutually exclusive.\n     * @see https://core.telegram.org/bots/api#getting-updates\n     * @private\n     */\n\n  }, {\n    key: '_unsetWebHook',\n    value: function _unsetWebHook() {\n      debug('unsetting webhook');\n      return this.bot._request('setWebHook');\n    }\n\n    /**\n     * Retrieve updates\n     */\n\n  }, {\n    key: '_getUpdates',\n    value: function _getUpdates() {\n      var _this4 = this;\n\n      debug('polling with options: %j', this.options.params);\n      return this.bot.getUpdates(this.options.params).catch(function (err) {\n        if (err.response && err.response.statusCode === ANOTHER_WEB_HOOK_USED) {\n          return _this4._unsetWebHook().then(function () {\n            return _this4.bot.getUpdates(_this4.options.params);\n          });\n        }\n        throw err;\n      });\n    }\n  }]);\n\n  return TelegramBotPolling;\n}();\n\nmodule.exports = TelegramBotPolling;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/lib/telegramPolling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/lib/telegramWebHook.js":
/*!*******************************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/lib/telegramWebHook.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/node-telegram-bot-api/lib/errors.js\");\nvar debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/index.js\")('node-telegram-bot-api');\nvar https = __webpack_require__(/*! https */ \"https\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar bl = __webpack_require__(/*! bl */ \"(rsc)/./node_modules/bl/bl.js\");\n\nvar TelegramBotWebHook = function () {\n  /**\n   * Sets up a webhook to receive updates\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  function TelegramBotWebHook(bot) {\n    _classCallCheck(this, TelegramBotWebHook);\n\n    this.bot = bot;\n    this.options = typeof bot.options.webHook === 'boolean' ? {} : bot.options.webHook;\n    this.options.host = this.options.host || '0.0.0.0';\n    this.options.port = this.options.port || 8443;\n    this.options.https = this.options.https || {};\n    this.options.healthEndpoint = this.options.healthEndpoint || '/healthz';\n    this._healthRegex = new RegExp(this.options.healthEndpoint);\n    this._webServer = null;\n    this._open = false;\n    this._requestListener = this._requestListener.bind(this);\n    this._parseBody = this._parseBody.bind(this);\n\n    if (this.options.key && this.options.cert) {\n      debug('HTTPS WebHook enabled (by key/cert)');\n      this.options.https.key = fs.readFileSync(this.options.key);\n      this.options.https.cert = fs.readFileSync(this.options.cert);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (this.options.pfx) {\n      debug('HTTPS WebHook enabled (by pfx)');\n      this.options.https.pfx = fs.readFileSync(this.options.pfx);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (Object.keys(this.options.https).length) {\n      debug('HTTPS WebHook enabled by (https)');\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else {\n      debug('HTTP WebHook enabled');\n      this._webServer = http.createServer(this._requestListener);\n    }\n  }\n\n  /**\n   * Open WebHook by listening on the port\n   * @return {Promise}\n   */\n\n\n  _createClass(TelegramBotWebHook, [{\n    key: 'open',\n    value: function open() {\n      var _this = this;\n\n      if (this.isOpen()) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        _this._webServer.listen(_this.options.port, _this.options.host, function () {\n          debug('WebHook listening on port %s', _this.options.port);\n          _this._open = true;\n          return resolve();\n        });\n\n        _this._webServer.once('error', function (err) {\n          reject(err);\n        });\n      });\n    }\n\n    /**\n     * Close the webHook\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      var _this2 = this;\n\n      if (!this.isOpen()) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        _this2._webServer.close(function (error) {\n          if (error) return reject(error);\n          _this2._open = false;\n          return resolve();\n        });\n      });\n    }\n\n    /**\n     * Return `true` if server is listening. Otherwise, `false`.\n     */\n\n  }, {\n    key: 'isOpen',\n    value: function isOpen() {\n      // NOTE: Since `http.Server.listening` was added in v5.7.0\n      // and we still need to support Node v4,\n      // we are going to fallback to 'this._open'.\n      // The following LOC would suffice for newer versions of Node.js\n      // return this._webServer.listening;\n      return this._open;\n    }\n\n    /**\n     * Handle error thrown during processing of webhook request.\n     * @private\n     * @param  {Error} error\n     */\n\n  }, {\n    key: '_error',\n    value: function _error(error) {\n      if (!this.bot.listeners('webhook_error').length) {\n        return console.error('error: [webhook_error] %j', error); // eslint-disable-line no-console\n      }\n      return this.bot.emit('webhook_error', error);\n    }\n\n    /**\n     * Handle request body by passing it to 'callback'\n     * @private\n     */\n\n  }, {\n    key: '_parseBody',\n    value: function _parseBody(error, body) {\n      if (error) {\n        return this._error(new errors.FatalError(error));\n      }\n\n      var data = void 0;\n      try {\n        data = JSON.parse(body.toString());\n      } catch (parseError) {\n        return this._error(new errors.ParseError(parseError.message));\n      }\n\n      return this.bot.processUpdate(data);\n    }\n\n    /**\n     * Listener for 'request' event on server\n     * @private\n     * @see https://nodejs.org/docs/latest/api/http.html#http_http_createserver_requestlistener\n     * @see https://nodejs.org/docs/latest/api/https.html#https_https_createserver_options_requestlistener\n     */\n\n  }, {\n    key: '_requestListener',\n    value: function _requestListener(req, res) {\n      debug('WebHook request URL: %s', req.url);\n      debug('WebHook request headers: %j', req.headers);\n\n      if (req.url.indexOf(this.bot.token) !== -1) {\n        if (req.method !== 'POST') {\n          debug('WebHook request isn\\'t a POST');\n          res.statusCode = 418; // I'm a teabot!\n          res.end();\n        } else {\n          req.pipe(bl(this._parseBody)).on('finish', function () {\n            return res.end('OK');\n          });\n        }\n      } else if (this._healthRegex.test(req.url)) {\n        debug('WebHook health check passed');\n        res.statusCode = 200;\n        res.end('OK');\n      } else {\n        debug('WebHook request unauthorized');\n        res.statusCode = 401;\n        res.end();\n      }\n    }\n  }]);\n\n  return TelegramBotWebHook;\n}();\n\nmodule.exports = TelegramBotWebHook;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/lib/telegramWebHook.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/lib/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/lib/utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar util = __webpack_require__(/*! util */ \"util\");\n// Native deprecation warning\nexports.deprecate = function (msg) {\n  return util.deprecate(function () {}, msg, 'node-telegram-bot-api')();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS10ZWxlZ3JhbS1ib3QtYXBpL2xpYi91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixXQUFXLG1CQUFPLENBQUMsa0JBQU07QUFDekI7QUFDQSxpQkFBaUI7QUFDakIsc0NBQXNDO0FBQ3RDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGRhcnNoXFxPbmVEcml2ZVxcRGVza3RvcFxcQ29kZVxcTUVSTiBXZWIgRGV2XFxHcmFwaGlcXG5vZGVfbW9kdWxlc1xcbm9kZS10ZWxlZ3JhbS1ib3QtYXBpXFxsaWJcXHV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG4vLyBOYXRpdmUgZGVwcmVjYXRpb24gd2FybmluZ1xuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbiAobXNnKSB7XG4gIHJldHVybiB1dGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7fSwgbXNnLCAnbm9kZS10ZWxlZ3JhbS1ib3QtYXBpJykoKTtcbn07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/browser.js":
/*!******************************************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/node_modules/debug/src/browser.js ***!
  \******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\n/**\n * Colors.\n */\n\nexports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n// eslint-disable-next-line complexity\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n    return true;\n  } // Internet Explorer and Edge do not support colors.\n\n\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  } // Is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\n\n  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773\n  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?\n  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);\n\n  if (!this.useColors) {\n    return;\n  }\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit'); // The final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function (match) {\n    if (match === '%%') {\n      return;\n    }\n\n    index++;\n\n    if (match === '%c') {\n      // We only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n  args.splice(lastC, 0, c);\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\n\nfunction log() {\n  var _console;\n\n  // This hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return (typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  try {\n    if (namespaces) {\n      exports.storage.setItem('debug', namespaces);\n    } else {\n      exports.storage.removeItem('debug');\n    }\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  var r;\n\n  try {\n    r = exports.storage.getItem('debug');\n  } catch (error) {} // Swallow\n  // XXX (@Qix-) should we be logging these?\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\n\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\n\nfunction localstorage() {\n  try {\n    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n    // The Browser also has localStorage in the global context.\n    return localStorage;\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/common.js\")(exports);\nvar formatters = module.exports.formatters;\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n  try {\n    return JSON.stringify(v);\n  } catch (error) {\n    return '[UnexpectedJSONParseError]: ' + error.message;\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/common.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/node_modules/debug/src/common.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\nfunction setup(env) {\n  createDebug.debug = createDebug;\n  createDebug.default = createDebug;\n  createDebug.coerce = coerce;\n  createDebug.disable = disable;\n  createDebug.enable = enable;\n  createDebug.enabled = enabled;\n  createDebug.humanize = __webpack_require__(/*! ms */ \"(rsc)/./node_modules/ms/index.js\");\n  Object.keys(env).forEach(function (key) {\n    createDebug[key] = env[key];\n  });\n  /**\n  * Active `debug` instances.\n  */\n\n  createDebug.instances = [];\n  /**\n  * The currently active debug mode names, and names to skip.\n  */\n\n  createDebug.names = [];\n  createDebug.skips = [];\n  /**\n  * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n  *\n  * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n  */\n\n  createDebug.formatters = {};\n  /**\n  * Selects a color for a debug namespace\n  * @param {String} namespace The namespace string for the for the debug instance to be colored\n  * @return {Number|String} An ANSI color code for the given namespace\n  * @api private\n  */\n\n  function selectColor(namespace) {\n    var hash = 0;\n\n    for (var i = 0; i < namespace.length; i++) {\n      hash = (hash << 5) - hash + namespace.charCodeAt(i);\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n  }\n\n  createDebug.selectColor = selectColor;\n  /**\n  * Create a debugger with the given `namespace`.\n  *\n  * @param {String} namespace\n  * @return {Function}\n  * @api public\n  */\n\n  function createDebug(namespace) {\n    var prevTime;\n\n    function debug() {\n      // Disabled?\n      if (!debug.enabled) {\n        return;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var self = debug; // Set `diff` timestamp\n\n      var curr = Number(new Date());\n      var ms = curr - (prevTime || curr);\n      self.diff = ms;\n      self.prev = prevTime;\n      self.curr = curr;\n      prevTime = curr;\n      args[0] = createDebug.coerce(args[0]);\n\n      if (typeof args[0] !== 'string') {\n        // Anything else let's inspect with %O\n        args.unshift('%O');\n      } // Apply any `formatters` transformations\n\n\n      var index = 0;\n      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n        // If we encounter an escaped % then don't increase the array index\n        if (match === '%%') {\n          return match;\n        }\n\n        index++;\n        var formatter = createDebug.formatters[format];\n\n        if (typeof formatter === 'function') {\n          var val = args[index];\n          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\n\n          args.splice(index, 1);\n          index--;\n        }\n\n        return match;\n      }); // Apply env-specific formatting (colors, etc.)\n\n      createDebug.formatArgs.call(self, args);\n      var logFn = self.log || createDebug.log;\n      logFn.apply(self, args);\n    }\n\n    debug.namespace = namespace;\n    debug.enabled = createDebug.enabled(namespace);\n    debug.useColors = createDebug.useColors();\n    debug.color = selectColor(namespace);\n    debug.destroy = destroy;\n    debug.extend = extend; // Debug.formatArgs = formatArgs;\n    // debug.rawLog = rawLog;\n    // env-specific initialization logic for debug instances\n\n    if (typeof createDebug.init === 'function') {\n      createDebug.init(debug);\n    }\n\n    createDebug.instances.push(debug);\n    return debug;\n  }\n\n  function destroy() {\n    var index = createDebug.instances.indexOf(this);\n\n    if (index !== -1) {\n      createDebug.instances.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  function extend(namespace, delimiter) {\n    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n  }\n  /**\n  * Enables a debug mode by namespaces. This can include modes\n  * separated by a colon and wildcards.\n  *\n  * @param {String} namespaces\n  * @api public\n  */\n\n\n  function enable(namespaces) {\n    createDebug.save(namespaces);\n    createDebug.names = [];\n    createDebug.skips = [];\n    var i;\n    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n    var len = split.length;\n\n    for (i = 0; i < len; i++) {\n      if (!split[i]) {\n        // ignore empty strings\n        continue;\n      }\n\n      namespaces = split[i].replace(/\\*/g, '.*?');\n\n      if (namespaces[0] === '-') {\n        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n      } else {\n        createDebug.names.push(new RegExp('^' + namespaces + '$'));\n      }\n    }\n\n    for (i = 0; i < createDebug.instances.length; i++) {\n      var instance = createDebug.instances[i];\n      instance.enabled = createDebug.enabled(instance.namespace);\n    }\n  }\n  /**\n  * Disable debug output.\n  *\n  * @api public\n  */\n\n\n  function disable() {\n    createDebug.enable('');\n  }\n  /**\n  * Returns true if the given mode name is enabled, false otherwise.\n  *\n  * @param {String} name\n  * @return {Boolean}\n  * @api public\n  */\n\n\n  function enabled(name) {\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    var i;\n    var len;\n\n    for (i = 0, len = createDebug.skips.length; i < len; i++) {\n      if (createDebug.skips[i].test(name)) {\n        return false;\n      }\n    }\n\n    for (i = 0, len = createDebug.names.length; i < len; i++) {\n      if (createDebug.names[i].test(name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n  * Coerce `val`.\n  *\n  * @param {Mixed} val\n  * @return {Mixed}\n  * @api private\n  */\n\n\n  function coerce(val) {\n    if (val instanceof Error) {\n      return val.stack || val.message;\n    }\n\n    return val;\n  }\n\n  createDebug.enable(createDebug.load());\n  return createDebug;\n}\n\nmodule.exports = setup;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/node_modules/debug/src/index.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\nif (typeof process === 'undefined' || process.type === 'renderer' || false === true || process.__nwjs) {\n  module.exports = __webpack_require__(/*! ./browser.js */ \"(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/browser.js\");\n} else {\n  module.exports = __webpack_require__(/*! ./node.js */ \"(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/node.js\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS10ZWxlZ3JhbS1ib3QtYXBpL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsS0FBZTtBQUNwRixFQUFFLHdJQUF3QztBQUMxQyxFQUFFO0FBQ0YsRUFBRSxrSUFBcUM7QUFDdkMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZGFyc2hcXE9uZURyaXZlXFxEZXNrdG9wXFxDb2RlXFxNRVJOIFdlYiBEZXZcXEdyYXBoaVxcbm9kZV9tb2R1bGVzXFxub2RlLXRlbGVncmFtLWJvdC1hcGlcXG5vZGVfbW9kdWxlc1xcZGVidWdcXHNyY1xcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRGV0ZWN0IEVsZWN0cm9uIHJlbmRlcmVyIC8gbndqcyBwcm9jZXNzLCB3aGljaCBpcyBub2RlLCBidXQgd2Ugc2hvdWxkXG4gKiB0cmVhdCBhcyBhIGJyb3dzZXIuXG4gKi9cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInIHx8IHByb2Nlc3MuYnJvd3NlciA9PT0gdHJ1ZSB8fCBwcm9jZXNzLl9fbndqcykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYnJvd3Nlci5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL25vZGUuanMnKTtcbn1cblxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/node.js":
/*!***************************************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/node_modules/debug/src/node.js ***!
  \***************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/**\n * Module dependencies.\n */\nvar tty = __webpack_require__(/*! tty */ \"tty\");\n\nvar util = __webpack_require__(/*! util */ \"util\");\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n  // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n  // eslint-disable-next-line import/no-extraneous-dependencies\n  var supportsColor = __webpack_require__(/*! supports-color */ \"(rsc)/./node_modules/supports-color/index.js\");\n\n  if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n    exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];\n  }\n} catch (error) {} // Swallow - we only care if `supports-color` is available; it doesn't have to be.\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\n\nexports.inspectOpts = Object.keys(process.env).filter(function (key) {\n  return /^debug_/i.test(key);\n}).reduce(function (obj, key) {\n  // Camel-case\n  var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {\n    return k.toUpperCase();\n  }); // Coerce string value into JS value\n\n  var val = process.env[key];\n\n  if (/^(yes|on|true|enabled)$/i.test(val)) {\n    val = true;\n  } else if (/^(no|off|false|disabled)$/i.test(val)) {\n    val = false;\n  } else if (val === 'null') {\n    val = null;\n  } else {\n    val = Number(val);\n  }\n\n  obj[prop] = val;\n  return obj;\n}, {});\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n  return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);\n}\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  var name = this.namespace,\n      useColors = this.useColors;\n\n  if (useColors) {\n    var c = this.color;\n    var colorCode = \"\\x1B[3\" + (c < 8 ? c : '8;5;' + c);\n    var prefix = \"  \".concat(colorCode, \";1m\").concat(name, \" \\x1B[0m\");\n    args[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n    args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + \"\\x1B[0m\");\n  } else {\n    args[0] = getDate() + name + ' ' + args[0];\n  }\n}\n\nfunction getDate() {\n  if (exports.inspectOpts.hideDate) {\n    return '';\n  }\n\n  return new Date().toISOString() + ' ';\n}\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\n\nfunction log() {\n  return process.stderr.write(util.format.apply(util, arguments) + '\\n');\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  if (namespaces) {\n    process.env.DEBUG = namespaces;\n  } else {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete process.env.DEBUG;\n  }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  return process.env.DEBUG;\n}\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\n\nfunction init(debug) {\n  debug.inspectOpts = {};\n  var keys = Object.keys(exports.inspectOpts);\n\n  for (var i = 0; i < keys.length; i++) {\n    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n  }\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/common.js\")(exports);\nvar formatters = module.exports.formatters;\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts)\n    .split('\\n')\n    .map(function (str) { return str.trim(); })\n    .join(' ');\n};\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\n\nformatters.O = function (v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS10ZWxlZ3JhbS1ib3QtYXBpL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvbm9kZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsZ0JBQUs7O0FBRXZCLFdBQVcsbUJBQU8sQ0FBQyxrQkFBTTtBQUN6QjtBQUNBO0FBQ0E7OztBQUdBLFlBQVk7QUFDWixXQUFXO0FBQ1gsa0JBQWtCO0FBQ2xCLFlBQVk7QUFDWixZQUFZO0FBQ1osaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQSxjQUFjOztBQUVkO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLG9FQUFnQjs7QUFFOUM7QUFDQSxJQUFJLGNBQWM7QUFDbEI7QUFDQSxFQUFFLGlCQUFpQiw0REFBNEQ7O0FBRS9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLG1CQUFtQjtBQUNuQjtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxHQUFHLEdBQUc7O0FBRU47O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDLElBQUk7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQ0FBK0MsRUFBRTtBQUNqRCwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLDZGQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLG9CQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxkYXJzaFxcT25lRHJpdmVcXERlc2t0b3BcXENvZGVcXE1FUk4gV2ViIERldlxcR3JhcGhpXFxub2RlX21vZHVsZXNcXG5vZGUtdGVsZWdyYW0tYm90LWFwaVxcbm9kZV9tb2R1bGVzXFxkZWJ1Z1xcc3JjXFxub2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cbnZhciB0dHkgPSByZXF1aXJlKCd0dHknKTtcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG4vKipcbiAqIFRoaXMgaXMgdGhlIE5vZGUuanMgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICovXG5cblxuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFs2LCAyLCAzLCA0LCA1LCAxXTtcblxudHJ5IHtcbiAgLy8gT3B0aW9uYWwgZGVwZW5kZW5jeSAoYXMgaW4sIGRvZXNuJ3QgbmVlZCB0byBiZSBpbnN0YWxsZWQsIE5PVCBsaWtlIG9wdGlvbmFsRGVwZW5kZW5jaWVzIGluIHBhY2thZ2UuanNvbilcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuICB2YXIgc3VwcG9ydHNDb2xvciA9IHJlcXVpcmUoJ3N1cHBvcnRzLWNvbG9yJyk7XG5cbiAgaWYgKHN1cHBvcnRzQ29sb3IgJiYgKHN1cHBvcnRzQ29sb3Iuc3RkZXJyIHx8IHN1cHBvcnRzQ29sb3IpLmxldmVsID49IDIpIHtcbiAgICBleHBvcnRzLmNvbG9ycyA9IFsyMCwgMjEsIDI2LCAyNywgMzIsIDMzLCAzOCwgMzksIDQwLCA0MSwgNDIsIDQzLCA0NCwgNDUsIDU2LCA1NywgNjIsIDYzLCA2OCwgNjksIDc0LCA3NSwgNzYsIDc3LCA3OCwgNzksIDgwLCA4MSwgOTIsIDkzLCA5OCwgOTksIDExMiwgMTEzLCAxMjgsIDEyOSwgMTM0LCAxMzUsIDE0OCwgMTQ5LCAxNjAsIDE2MSwgMTYyLCAxNjMsIDE2NCwgMTY1LCAxNjYsIDE2NywgMTY4LCAxNjksIDE3MCwgMTcxLCAxNzIsIDE3MywgMTc4LCAxNzksIDE4NCwgMTg1LCAxOTYsIDE5NywgMTk4LCAxOTksIDIwMCwgMjAxLCAyMDIsIDIwMywgMjA0LCAyMDUsIDIwNiwgMjA3LCAyMDgsIDIwOSwgMjE0LCAyMTUsIDIyMCwgMjIxXTtcbiAgfVxufSBjYXRjaCAoZXJyb3IpIHt9IC8vIFN3YWxsb3cgLSB3ZSBvbmx5IGNhcmUgaWYgYHN1cHBvcnRzLWNvbG9yYCBpcyBhdmFpbGFibGU7IGl0IGRvZXNuJ3QgaGF2ZSB0byBiZS5cblxuLyoqXG4gKiBCdWlsZCB1cCB0aGUgZGVmYXVsdCBgaW5zcGVjdE9wdHNgIG9iamVjdCBmcm9tIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKlxuICogICAkIERFQlVHX0NPTE9SUz1ubyBERUJVR19ERVBUSD0xMCBERUJVR19TSE9XX0hJRERFTj1lbmFibGVkIG5vZGUgc2NyaXB0LmpzXG4gKi9cblxuXG5leHBvcnRzLmluc3BlY3RPcHRzID0gT2JqZWN0LmtleXMocHJvY2Vzcy5lbnYpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAvXmRlYnVnXy9pLnRlc3Qoa2V5KTtcbn0pLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcbiAgLy8gQ2FtZWwtY2FzZVxuICB2YXIgcHJvcCA9IGtleS5zdWJzdHJpbmcoNikudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9fKFthLXpdKS9nLCBmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBrLnRvVXBwZXJDYXNlKCk7XG4gIH0pOyAvLyBDb2VyY2Ugc3RyaW5nIHZhbHVlIGludG8gSlMgdmFsdWVcblxuICB2YXIgdmFsID0gcHJvY2Vzcy5lbnZba2V5XTtcblxuICBpZiAoL14oeWVzfG9ufHRydWV8ZW5hYmxlZCkkL2kudGVzdCh2YWwpKSB7XG4gICAgdmFsID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICgvXihub3xvZmZ8ZmFsc2V8ZGlzYWJsZWQpJC9pLnRlc3QodmFsKSkge1xuICAgIHZhbCA9IGZhbHNlO1xuICB9IGVsc2UgaWYgKHZhbCA9PT0gJ251bGwnKSB7XG4gICAgdmFsID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB2YWwgPSBOdW1iZXIodmFsKTtcbiAgfVxuXG4gIG9ialtwcm9wXSA9IHZhbDtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KTtcbi8qKlxuICogSXMgc3Rkb3V0IGEgVFRZPyBDb2xvcmVkIG91dHB1dCBpcyBlbmFibGVkIHdoZW4gYHRydWVgLlxuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgcmV0dXJuICdjb2xvcnMnIGluIGV4cG9ydHMuaW5zcGVjdE9wdHMgPyBCb29sZWFuKGV4cG9ydHMuaW5zcGVjdE9wdHMuY29sb3JzKSA6IHR0eS5pc2F0dHkocHJvY2Vzcy5zdGRlcnIuZmQpO1xufVxuLyoqXG4gKiBBZGRzIEFOU0kgY29sb3IgZXNjYXBlIGNvZGVzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgbmFtZSA9IHRoaXMubmFtZXNwYWNlLFxuICAgICAgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgaWYgKHVzZUNvbG9ycykge1xuICAgIHZhciBjID0gdGhpcy5jb2xvcjtcbiAgICB2YXIgY29sb3JDb2RlID0gXCJcXHgxQlszXCIgKyAoYyA8IDggPyBjIDogJzg7NTsnICsgYyk7XG4gICAgdmFyIHByZWZpeCA9IFwiICBcIi5jb25jYXQoY29sb3JDb2RlLCBcIjsxbVwiKS5jb25jYXQobmFtZSwgXCIgXFx4MUJbMG1cIik7XG4gICAgYXJnc1swXSA9IHByZWZpeCArIGFyZ3NbMF0uc3BsaXQoJ1xcbicpLmpvaW4oJ1xcbicgKyBwcmVmaXgpO1xuICAgIGFyZ3MucHVzaChjb2xvckNvZGUgKyAnbSsnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKSArIFwiXFx4MUJbMG1cIik7XG4gIH0gZWxzZSB7XG4gICAgYXJnc1swXSA9IGdldERhdGUoKSArIG5hbWUgKyAnICcgKyBhcmdzWzBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERhdGUoKSB7XG4gIGlmIChleHBvcnRzLmluc3BlY3RPcHRzLmhpZGVEYXRlKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSArICcgJztcbn1cbi8qKlxuICogSW52b2tlcyBgdXRpbC5mb3JtYXQoKWAgd2l0aCB0aGUgc3BlY2lmaWVkIGFyZ3VtZW50cyBhbmQgd3JpdGVzIHRvIHN0ZGVyci5cbiAqL1xuXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgcmV0dXJuIHByb2Nlc3Muc3RkZXJyLndyaXRlKHV0aWwuZm9ybWF0LmFwcGx5KHV0aWwsIGFyZ3VtZW50cykgKyAnXFxuJyk7XG59XG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICBpZiAobmFtZXNwYWNlcykge1xuICAgIHByb2Nlc3MuZW52LkRFQlVHID0gbmFtZXNwYWNlcztcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB5b3Ugc2V0IGEgcHJvY2Vzcy5lbnYgZmllbGQgdG8gbnVsbCBvciB1bmRlZmluZWQsIGl0IGdldHMgY2FzdCB0byB0aGVcbiAgICAvLyBzdHJpbmcgJ251bGwnIG9yICd1bmRlZmluZWQnLiBKdXN0IGRlbGV0ZSBpbnN0ZWFkLlxuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxufVxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5ERUJVRztcbn1cbi8qKlxuICogSW5pdCBsb2dpYyBmb3IgYGRlYnVnYCBpbnN0YW5jZXMuXG4gKlxuICogQ3JlYXRlIGEgbmV3IGBpbnNwZWN0T3B0c2Agb2JqZWN0IGluIGNhc2UgYHVzZUNvbG9yc2AgaXMgc2V0XG4gKiBkaWZmZXJlbnRseSBmb3IgYSBwYXJ0aWN1bGFyIGBkZWJ1Z2AgaW5zdGFuY2UuXG4gKi9cblxuXG5mdW5jdGlvbiBpbml0KGRlYnVnKSB7XG4gIGRlYnVnLmluc3BlY3RPcHRzID0ge307XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXhwb3J0cy5pbnNwZWN0T3B0cyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVidWcuaW5zcGVjdE9wdHNba2V5c1tpXV0gPSBleHBvcnRzLmluc3BlY3RPcHRzW2tleXNbaV1dO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jb21tb24nKShleHBvcnRzKTtcbnZhciBmb3JtYXR0ZXJzID0gbW9kdWxlLmV4cG9ydHMuZm9ybWF0dGVycztcbi8qKlxuICogTWFwICVvIHRvIGB1dGlsLmluc3BlY3QoKWAsIGFsbCBvbiBhIHNpbmdsZSBsaW5lLlxuICovXG5cbmZvcm1hdHRlcnMubyA9IGZ1bmN0aW9uICh2KSB7XG4gIHRoaXMuaW5zcGVjdE9wdHMuY29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG4gIHJldHVybiB1dGlsLmluc3BlY3QodiwgdGhpcy5pbnNwZWN0T3B0cylcbiAgICAuc3BsaXQoJ1xcbicpXG4gICAgLm1hcChmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHIudHJpbSgpOyB9KVxuICAgIC5qb2luKCcgJyk7XG59O1xuLyoqXG4gKiBNYXAgJU8gdG8gYHV0aWwuaW5zcGVjdCgpYCwgYWxsb3dpbmcgbXVsdGlwbGUgbGluZXMgaWYgbmVlZGVkLlxuICovXG5cblxuZm9ybWF0dGVycy5PID0gZnVuY3Rpb24gKHYpIHtcbiAgdGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcbiAgcmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKTtcbn07XG5cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/node_modules/eventemitter3/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/node_modules/eventemitter3/index.js ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif (true) {\n  module.exports = EventEmitter;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/node_modules/eventemitter3/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/src/errors.js":
/*!**********************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/src/errors.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.BaseError = class BaseError extends Error {\n  /**\n   * @class BaseError\n   * @constructor\n   * @private\n   * @param  {String} code Error code\n   * @param  {String} message Error message\n   */\n  constructor(code, message) {\n    super(`${code}: ${message}`);\n    this.code = code;\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      message: this.message,\n    };\n  }\n};\n\n\nexports.FatalError = class FatalError extends exports.BaseError {\n  /**\n   * Fatal Error. Error code is `\"EFATAL\"`.\n   * @class FatalError\n   * @constructor\n   * @param  {String|Error} data Error object or message\n   */\n  constructor(data) {\n    const error = (typeof data === 'string') ? null : data;\n    const message = error ? error.message : data;\n    super('EFATAL', message);\n    if (error) this.stack = error.stack;\n  }\n};\n\n\nexports.ParseError = class ParseError extends exports.BaseError {\n  /**\n   * Error during parsing. Error code is `\"EPARSE\"`.\n   * @class ParseError\n   * @constructor\n   * @param  {String} message Error message\n   * @param  {http.IncomingMessage} response Server response\n   */\n  constructor(message, response) {\n    super('EPARSE', message);\n    this.response = response;\n  }\n};\n\n\nexports.TelegramError = class TelegramError extends exports.BaseError {\n  /**\n   * Error returned from Telegram. Error code is `\"ETELEGRAM\"`.\n   * @class TelegramError\n   * @constructor\n   * @param  {String} message Error message\n   * @param  {http.IncomingMessage} response Server response\n   */\n  constructor(message, response) {\n    super('ETELEGRAM', message);\n    this.response = response;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS10ZWxlZ3JhbS1ib3QtYXBpL3NyYy9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0EsYUFBYSxLQUFLLElBQUksUUFBUTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsY0FBYztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGRhcnNoXFxPbmVEcml2ZVxcRGVza3RvcFxcQ29kZVxcTUVSTiBXZWIgRGV2XFxHcmFwaGlcXG5vZGVfbW9kdWxlc1xcbm9kZS10ZWxlZ3JhbS1ib3QtYXBpXFxzcmNcXGVycm9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLkJhc2VFcnJvciA9IGNsYXNzIEJhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgLyoqXG4gICAqIEBjbGFzcyBCYXNlRXJyb3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSAge1N0cmluZ30gY29kZSBFcnJvciBjb2RlXG4gICAqIEBwYXJhbSAge1N0cmluZ30gbWVzc2FnZSBFcnJvciBtZXNzYWdlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb2RlLCBtZXNzYWdlKSB7XG4gICAgc3VwZXIoYCR7Y29kZX06ICR7bWVzc2FnZX1gKTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICB9XG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgIH07XG4gIH1cbn07XG5cblxuZXhwb3J0cy5GYXRhbEVycm9yID0gY2xhc3MgRmF0YWxFcnJvciBleHRlbmRzIGV4cG9ydHMuQmFzZUVycm9yIHtcbiAgLyoqXG4gICAqIEZhdGFsIEVycm9yLiBFcnJvciBjb2RlIGlzIGBcIkVGQVRBTFwiYC5cbiAgICogQGNsYXNzIEZhdGFsRXJyb3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSAge1N0cmluZ3xFcnJvcn0gZGF0YSBFcnJvciBvYmplY3Qgb3IgbWVzc2FnZVxuICAgKi9cbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIGNvbnN0IGVycm9yID0gKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgPyBudWxsIDogZGF0YTtcbiAgICBjb25zdCBtZXNzYWdlID0gZXJyb3IgPyBlcnJvci5tZXNzYWdlIDogZGF0YTtcbiAgICBzdXBlcignRUZBVEFMJywgbWVzc2FnZSk7XG4gICAgaWYgKGVycm9yKSB0aGlzLnN0YWNrID0gZXJyb3Iuc3RhY2s7XG4gIH1cbn07XG5cblxuZXhwb3J0cy5QYXJzZUVycm9yID0gY2xhc3MgUGFyc2VFcnJvciBleHRlbmRzIGV4cG9ydHMuQmFzZUVycm9yIHtcbiAgLyoqXG4gICAqIEVycm9yIGR1cmluZyBwYXJzaW5nLiBFcnJvciBjb2RlIGlzIGBcIkVQQVJTRVwiYC5cbiAgICogQGNsYXNzIFBhcnNlRXJyb3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSAge1N0cmluZ30gbWVzc2FnZSBFcnJvciBtZXNzYWdlXG4gICAqIEBwYXJhbSAge2h0dHAuSW5jb21pbmdNZXNzYWdlfSByZXNwb25zZSBTZXJ2ZXIgcmVzcG9uc2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHJlc3BvbnNlKSB7XG4gICAgc3VwZXIoJ0VQQVJTRScsIG1lc3NhZ2UpO1xuICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgfVxufTtcblxuXG5leHBvcnRzLlRlbGVncmFtRXJyb3IgPSBjbGFzcyBUZWxlZ3JhbUVycm9yIGV4dGVuZHMgZXhwb3J0cy5CYXNlRXJyb3Ige1xuICAvKipcbiAgICogRXJyb3IgcmV0dXJuZWQgZnJvbSBUZWxlZ3JhbS4gRXJyb3IgY29kZSBpcyBgXCJFVEVMRUdSQU1cImAuXG4gICAqIEBjbGFzcyBUZWxlZ3JhbUVycm9yXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IG1lc3NhZ2UgRXJyb3IgbWVzc2FnZVxuICAgKiBAcGFyYW0gIHtodHRwLkluY29taW5nTWVzc2FnZX0gcmVzcG9uc2UgU2VydmVyIHJlc3BvbnNlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCByZXNwb25zZSkge1xuICAgIHN1cGVyKCdFVEVMRUdSQU0nLCBtZXNzYWdlKTtcbiAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/src/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/src/telegram.js":
/*!************************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/src/telegram.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// shims\n(__webpack_require__(/*! array.prototype.findindex */ \"(rsc)/./node_modules/array.prototype.findindex/index.js\").shim)(); // for Node.js v0.x\n\nconst errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/node-telegram-bot-api/src/errors.js\");\nconst TelegramBotWebHook = __webpack_require__(/*! ./telegramWebHook */ \"(rsc)/./node_modules/node-telegram-bot-api/src/telegramWebHook.js\");\nconst TelegramBotPolling = __webpack_require__(/*! ./telegramPolling */ \"(rsc)/./node_modules/node-telegram-bot-api/src/telegramPolling.js\");\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/index.js\")('node-telegram-bot-api');\nconst EventEmitter = __webpack_require__(/*! eventemitter3 */ \"(rsc)/./node_modules/node-telegram-bot-api/node_modules/eventemitter3/index.js\");\nconst fileType = __webpack_require__(/*! file-type */ \"(rsc)/./node_modules/file-type/index.js\");\nconst request = __webpack_require__(/*! @cypress/request-promise */ \"(rsc)/./node_modules/@cypress/request-promise/lib/rp.js\");\nconst streamedRequest = __webpack_require__(/*! @cypress/request */ \"(rsc)/./node_modules/@cypress/request/index.js\");\nconst qs = __webpack_require__(/*! querystring */ \"querystring\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst mime = __webpack_require__(/*! mime */ \"(rsc)/./node_modules/mime/mime.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst URL = __webpack_require__(/*! url */ \"url\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst pump = __webpack_require__(/*! pump */ \"(rsc)/./node_modules/pump/index.js\");\nconst deprecate = (__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/node-telegram-bot-api/src/utils.js\").deprecate);\n\nconst _messageTypes = [\n  'text',\n  'animation',\n  'audio',\n  'channel_chat_created',\n  'contact',\n  'delete_chat_photo',\n  'dice',\n  'document',\n  'game',\n  'group_chat_created',\n  'invoice',\n  'left_chat_member',\n  'location',\n  'migrate_from_chat_id',\n  'migrate_to_chat_id',\n  'new_chat_members',\n  'new_chat_photo',\n  'new_chat_title',\n  'passport_data',\n  'photo',\n  'pinned_message',\n  'poll',\n  'sticker',\n  'successful_payment',\n  'supergroup_chat_created',\n  'video',\n  'video_note',\n  'voice',\n  'video_chat_started',\n  'video_chat_ended',\n  'video_chat_participants_invited',\n  'video_chat_scheduled',\n  'message_auto_delete_timer_changed',\n  'chat_invite_link',\n  'chat_member_updated',\n  'web_app_data',\n  'message_reaction'\n];\n\nconst _deprecatedMessageTypes = [\n  'new_chat_participant', 'left_chat_participant'\n];\n\n/**\n * JSON-serialize data. If the provided data is already a String,\n * return it as is.\n * @private\n * @param  {*} data\n * @return {String}\n */\nfunction stringify(data) {\n  if (typeof data === 'string') {\n    return data;\n  }\n  return JSON.stringify(data);\n}\n\n\nclass TelegramBot extends EventEmitter {\n  /**\n   * The different errors the library uses.\n   * @type {Object}\n   */\n  static get errors() {\n    return errors;\n  }\n\n  /**\n   * The types of message updates the library handles.\n   * @type {String[]}\n   */\n  static get messageTypes() {\n    return _messageTypes;\n  }\n\n  /**\n   * Add listener for the specified [event](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events).\n   * This is the usual `emitter.on()` method.\n   * @param  {String} event\n   * @param  {Function} listener\n   * @see {@link https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events|Available events}\n   * @see https://nodejs.org/api/events.html#events_emitter_on_eventname_listener\n   */\n  on(event, listener) {\n    if (_deprecatedMessageTypes.indexOf(event) !== -1) {\n      const url = 'https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#events';\n      deprecate(`Events ${_deprecatedMessageTypes.join(',')} are deprecated. See the updated list of events: ${url}`);\n    }\n    super.on(event, listener);\n  }\n\n  /**\n   * Both request method to obtain messages are implemented. To use standard polling, set `polling: true`\n   * on `options`. Notice that [webHook](https://core.telegram.org/bots/api#setwebhook) will need a SSL certificate.\n   * Emits `message` when a message arrives.\n   *\n   * @class TelegramBot\n   * @constructor\n   * @param {String} token Bot Token\n   * @param {Object} [options]\n   * @param {Boolean|Object} [options.polling=false] Set true to enable polling or set options.\n   *  If a WebHook has been set, it will be deleted automatically.\n   * @param {String|Number} [options.polling.timeout=10] *Deprecated. Use `options.polling.params` instead*.\n   *  Timeout in seconds for long polling.\n   * @param {Boolean} [options.testEnvironment=false] Set true to  work with test enviroment.\n   * When working with the test environment, you may use HTTP links without TLS to test your Web App.\n   * @param {String|Number} [options.polling.interval=300] Interval between requests in miliseconds\n   * @param {Boolean} [options.polling.autoStart=true] Start polling immediately\n   * @param {Object} [options.polling.params] Parameters to be used in polling API requests.\n   *  See https://core.telegram.org/bots/api#getupdates for more information.\n   * @param  {Number} [options.polling.params.timeout=10] Timeout in seconds for long polling.\n   * @param {Boolean|Object} [options.webHook=false] Set true to enable WebHook or set options\n   * @param {String} [options.webHook.host=\"0.0.0.0\"] Host to bind to\n   * @param {Number} [options.webHook.port=8443] Port to bind to\n   * @param {String} [options.webHook.key] Path to file with PEM private key for webHook server.\n   *  The file is read **synchronously**!\n   * @param {String} [options.webHook.cert] Path to file with PEM certificate (public) for webHook server.\n   *  The file is read **synchronously**!\n   * @param {String} [options.webHook.pfx] Path to file with PFX private key and certificate chain for webHook server.\n   *  The file is read **synchronously**!\n   * @param {Boolean} [options.webHook.autoOpen=true] Open webHook immediately\n   * @param {Object} [options.webHook.https] Options to be passed to `https.createServer()`.\n   *  Note that `options.webHook.key`, `options.webHook.cert` and `options.webHook.pfx`, if provided, will be\n   *  used to override `key`, `cert` and `pfx` in this object, respectively.\n   *  See https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener for more information.\n   * @param {String} [options.webHook.healthEndpoint=\"/healthz\"] An endpoint for health checks that always responds with 200 OK\n   * @param {Boolean} [options.onlyFirstMatch=false] Set to true to stop after first match. Otherwise, all regexps are executed\n   * @param {Object} [options.request] Options which will be added for all requests to telegram api.\n   *  See https://github.com/request/request#requestoptions-callback for more information.\n   * @param {String} [options.baseApiUrl=\"https://api.telegram.org\"] API Base URl; useful for proxying and testing\n   * @param {Boolean} [options.filepath=true] Allow passing file-paths as arguments when sending files,\n   *  such as photos using `TelegramBot#sendPhoto()`. See [usage information][usage-sending-files-performance]\n   *  for more information on this option and its consequences.\n   * @param {Boolean} [options.badRejection=false] Set to `true`\n   *  **if and only if** the Node.js version you're using terminates the\n   *  process on unhandled rejections. This option is only for\n   *  *forward-compatibility purposes*.\n   * @see https://core.telegram.org/bots/api\n   */\n  constructor(token, options = {}) {\n    super();\n    this.token = token;\n    this.options = options;\n    this.options.polling = (typeof options.polling === 'undefined') ? false : options.polling;\n    this.options.webHook = (typeof options.webHook === 'undefined') ? false : options.webHook;\n    this.options.baseApiUrl = options.baseApiUrl || 'https://api.telegram.org';\n    this.options.filepath = (typeof options.filepath === 'undefined') ? true : options.filepath;\n    this.options.badRejection = (typeof options.badRejection === 'undefined') ? false : options.badRejection;\n    this._textRegexpCallbacks = [];\n    this._replyListenerId = 0;\n    this._replyListeners = [];\n    this._polling = null;\n    this._webHook = null;\n\n    if (options.polling) {\n      const autoStart = options.polling.autoStart;\n      if (typeof autoStart === 'undefined' || autoStart === true) {\n        this.startPolling();\n      }\n    }\n\n    if (options.webHook) {\n      const autoOpen = options.webHook.autoOpen;\n      if (typeof autoOpen === 'undefined' || autoOpen === true) {\n        this.openWebHook();\n      }\n    }\n  }\n\n  /**\n   * Generates url with bot token and provided path/method you want to be got/executed by bot\n   * @param  {String} path\n   * @return {String} url\n   * @private\n   * @see https://core.telegram.org/bots/api#making-requests\n   */\n  _buildURL(_path) {\n    return `${this.options.baseApiUrl}/bot${this.token}${this.options.testEnvironment ? '/test' : ''}/${_path}`;\n  }\n\n  /**\n   * Fix 'reply_markup' parameter by making it JSON-serialized, as\n   * required by the Telegram Bot API\n   * @param {Object} obj Object; either 'form' or 'qs'\n   * @private\n   * @see https://core.telegram.org/bots/api#sendmessage\n   */\n  _fixReplyMarkup(obj) {\n    const replyMarkup = obj.reply_markup;\n    if (replyMarkup && typeof replyMarkup !== 'string') {\n      obj.reply_markup = stringify(replyMarkup);\n    }\n  }\n\n  /**\n   * Fix 'entities' or 'caption_entities' or 'explanation_entities' parameter by making it JSON-serialized, as\n   * required by the Telegram Bot API\n   * @param {Object} obj Object;\n   * @private\n   * @see https://core.telegram.org/bots/api#sendmessage\n   * @see https://core.telegram.org/bots/api#copymessage\n   * @see https://core.telegram.org/bots/api#sendpoll\n   */\n  _fixEntitiesField(obj) {\n    const entities = obj.entities;\n    const captionEntities = obj.caption_entities;\n    const explanationEntities = obj.explanation_entities;\n    if (entities && typeof entities !== 'string') {\n      obj.entities = stringify(entities);\n    }\n\n    if (captionEntities && typeof captionEntities !== 'string') {\n      obj.caption_entities = stringify(captionEntities);\n    }\n\n    if (explanationEntities && typeof explanationEntities !== 'string') {\n      obj.explanation_entities = stringify(explanationEntities);\n    }\n  }\n\n  _fixAddFileThumbnail(options, opts) {\n    if (options.thumb) {\n      if (opts.formData === null) {\n        opts.formData = {};\n      }\n\n      const attachName = 'photo';\n      const [formData] = this._formatSendData(attachName, options.thumb.replace('attach://', ''));\n\n      if (formData) {\n        opts.formData[attachName] = formData[attachName];\n        opts.qs.thumbnail = `attach://${attachName}`;\n      }\n    }\n  }\n\n  /**\n   * Fix 'reply_parameters' parameter by making it JSON-serialized, as\n   * required by the Telegram Bot API\n   * @param {Object} obj Object; either 'form' or 'qs'\n   * @private\n   * @see https://core.telegram.org/bots/api#sendmessage\n   */\n  _fixReplyParameters(obj) {\n    if (obj.hasOwnProperty('reply_parameters') && typeof obj.reply_parameters !== 'string') {\n      obj.reply_parameters = stringify(obj.reply_parameters);\n    }\n  }\n\n  /**\n   * Make request against the API\n   * @param  {String} _path API endpoint\n   * @param  {Object} [options]\n   * @private\n   * @return {Promise}\n   */\n  _request(_path, options = {}) {\n    if (!this.token) {\n      return Promise.reject(new errors.FatalError('Telegram Bot Token not provided!'));\n    }\n\n    if (this.options.request) {\n      Object.assign(options, this.options.request);\n    }\n\n    if (options.form) {\n      this._fixReplyMarkup(options.form);\n      this._fixEntitiesField(options.form);\n      this._fixReplyParameters(options.form);\n    }\n    if (options.qs) {\n      this._fixReplyMarkup(options.qs);\n      this._fixReplyParameters(options.qs);\n    }\n\n    options.method = 'POST';\n    options.url = this._buildURL(_path);\n    options.simple = false;\n    options.resolveWithFullResponse = true;\n    options.forever = true;\n    debug('HTTP request: %j', options);\n    return request(options)\n      .then(resp => {\n        let data;\n        try {\n          data = resp.body = JSON.parse(resp.body);\n        } catch (err) {\n          throw new errors.ParseError(`Error parsing response: ${resp.body}`, resp);\n        }\n\n        if (data.ok) {\n          return data.result;\n        }\n\n        throw new errors.TelegramError(`${data.error_code} ${data.description}`, resp);\n      }).catch(error => {\n        // TODO: why can't we do `error instanceof errors.BaseError`?\n        if (error.response) throw error;\n        throw new errors.FatalError(error);\n      });\n  }\n\n  /**\n   * Format data to be uploaded; handles file paths, streams and buffers\n   * @param  {String} type\n   * @param  {String|stream.Stream|Buffer} data\n   * @param  {Object} fileOptions File options\n   * @param  {String} [fileOptions.filename] File name\n   * @param  {String} [fileOptions.contentType] Content type (i.e. MIME)\n   * @return {Array} formatted\n   * @return {Object} formatted[0] formData\n   * @return {String} formatted[1] fileId\n   * @throws Error if Buffer file type is not supported.\n   * @see https://npmjs.com/package/file-type\n   * @private\n   */\n  _formatSendData(type, data, fileOptions = {}) {\n    const deprecationMessage =\n      'See https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files' +\n      ' for more information on how sending files has been improved and' +\n      ' on how to disable this deprecation message altogether.';\n    let filedata = data;\n    let filename = fileOptions.filename;\n    let contentType = fileOptions.contentType;\n\n    if (data instanceof stream.Stream) {\n      if (!filename && data.path) {\n        // Will be 'null' if could not be parsed.\n        // For example, 'data.path' === '/?id=123' from 'request(\"https://example.com/?id=123\")'\n        const url = URL.parse(path.basename(data.path.toString()));\n        if (url.pathname) {\n          filename = qs.unescape(url.pathname);\n        }\n      }\n    } else if (Buffer.isBuffer(data)) {\n      if (!filename && !process.env.NTBA_FIX_350) {\n        deprecate(`Buffers will have their filenames default to \"filename\" instead of \"data\". ${deprecationMessage}`);\n        filename = 'data';\n      }\n      if (!contentType) {\n        const filetype = fileType(data);\n        if (filetype) {\n          contentType = filetype.mime;\n          const ext = filetype.ext;\n          if (ext && !process.env.NTBA_FIX_350) {\n            filename = `${filename}.${ext}`;\n          }\n        } else if (!process.env.NTBA_FIX_350) {\n          deprecate(`An error will no longer be thrown if file-type of buffer could not be detected. ${deprecationMessage}`);\n          throw new errors.FatalError('Unsupported Buffer file-type');\n        }\n      }\n    } else if (data) {\n      if (this.options.filepath && fs.existsSync(data)) {\n        filedata = fs.createReadStream(data);\n        if (!filename) {\n          filename = path.basename(data);\n        }\n      } else {\n        return [null, data];\n      }\n    } else {\n      return [null, data];\n    }\n\n    filename = filename || 'filename';\n    contentType = contentType || mime.lookup(filename);\n    if (process.env.NTBA_FIX_350) {\n      contentType = contentType || 'application/octet-stream';\n    } else {\n      deprecate(`In the future, content-type of files you send will default to \"application/octet-stream\". ${deprecationMessage}`);\n    }\n\n    // TODO: Add missing file extension.\n\n    return [{\n      [type]: {\n        value: filedata,\n        options: {\n          filename,\n          contentType,\n        },\n      },\n    }, null];\n  }\n\n  /**\n   * Start polling.\n   * Rejects returned promise if a WebHook is being used by this instance.\n   * @param  {Object} [options]\n   * @param  {Boolean} [options.restart=true] Consecutive calls to this method causes polling to be restarted\n   * @return {Promise}\n   */\n  startPolling(options = {}) {\n    if (this.hasOpenWebHook()) {\n      return Promise.reject(new errors.FatalError('Polling and WebHook are mutually exclusive'));\n    }\n    options.restart = typeof options.restart === 'undefined' ? true : options.restart;\n    if (!this._polling) {\n      this._polling = new TelegramBotPolling(this);\n    }\n    return this._polling.start(options);\n  }\n\n  /**\n   * Alias of `TelegramBot#startPolling()`. This is **deprecated**.\n   * @param  {Object} [options]\n   * @return {Promise}\n   * @deprecated\n   */\n  initPolling() {\n    deprecate('TelegramBot#initPolling() is deprecated. Use TelegramBot#startPolling() instead.');\n    return this.startPolling();\n  }\n\n  /**\n   * Stops polling after the last polling request resolves.\n   * Multiple invocations do nothing if polling is already stopped.\n   * Returning the promise of the last polling request is **deprecated**.\n   * @param  {Object} [options] Options\n   * @param  {Boolean} [options.cancel] Cancel current request\n   * @param  {String} [options.reason] Reason for stopping polling\n   * @return {Promise}\n   */\n  stopPolling(options) {\n    if (!this._polling) {\n      return Promise.resolve();\n    }\n    return this._polling.stop(options);\n  }\n\n  /**\n   * Get link for file.\n   * Use this method to get link for file for subsequent use.\n   * Attention: link will be valid for 1 hour.\n   *\n   * This method is a sugar extension of the (getFile)[#getfilefileid] method,\n   * which returns just path to file on remote server (you will have to manually build full uri after that).\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Promise which will have  *fileURI* in resolve callback\n   * @see https://core.telegram.org/bots/api#getfile\n   */\n  getFileLink(fileId, form = {}) {\n    return this.getFile(fileId, form)\n      .then(resp => `${this.options.baseApiUrl}/file/bot${this.token}/${resp.file_path}`);\n  }\n\n  /**\n   * Return a readable stream for file.\n   *\n   * `fileStream.path` is the specified file ID i.e. `fileId`.\n   * `fileStream` emits event `info` passing a single argument i.e.\n   * `info` with the interface `{ uri }` where `uri` is the URI of the\n   * file on Telegram servers.\n   *\n   * This method is a sugar extension of the [getFileLink](#TelegramBot+getFileLink) method,\n   * which returns the full URI to the file on remote server.\n   *\n   * @param  {String} fileId File identifier to get info about\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {stream.Readable} fileStream\n   */\n  getFileStream(fileId, form = {}) {\n    const fileStream = new stream.PassThrough();\n    fileStream.path = fileId;\n    this.getFileLink(fileId, form)\n      .then((fileURI) => {\n        fileStream.emit('info', {\n          uri: fileURI,\n        });\n        pump(streamedRequest(Object.assign({ uri: fileURI }, this.options.request)), fileStream);\n      })\n      .catch((error) => {\n        fileStream.emit('error', error);\n      });\n    return fileStream;\n  }\n\n  /**\n   * Downloads file in the specified folder.\n   *\n   * This method is a sugar extension of the [getFileStream](#TelegramBot+getFileStream) method,\n   * which returns a readable file stream.\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @param  {String} downloadDir Absolute path to the folder in which file will be saved\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Promise, which will have *filePath* of downloaded file in resolve callback\n   */\n  downloadFile(fileId, downloadDir, form = {}) {\n    let resolve;\n    let reject;\n    const promise = new Promise((a, b) => {\n      resolve = a;\n      reject = b;\n    });\n    const fileStream = this.getFileStream(fileId, form);\n    fileStream.on('info', (info) => {\n      const fileName = info.uri.slice(info.uri.lastIndexOf('/') + 1);\n      // TODO: Ensure fileName doesn't contains slashes\n      const filePath = path.join(downloadDir, fileName);\n      pump(fileStream, fs.createWriteStream(filePath), (error) => {\n        if (error) { return reject(error); }\n        return resolve(filePath);\n      });\n    });\n    fileStream.on('error', (err) => {\n      reject(err);\n    });\n    return promise;\n  }\n\n  /**\n   * Register a RegExp to test against an incomming text message.\n   * @param  {RegExp}   regexpRexecuted with `exec`.\n   * @param  {Function} callback     Callback will be called with 2 parameters,\n   * the `msg` and the result of executing `regexp.exec` on message text.\n   */\n  onText(regexp, callback) {\n    this._textRegexpCallbacks.push({ regexp, callback });\n  }\n\n  /**\n   * Remove a listener registered with `onText()`.\n   * @param  {RegExp} regexp RegExp used previously in `onText()`\n   * @return {Object} deletedListener The removed reply listener if\n   *   found. This object has `regexp` and `callback`\n   *   properties. If not found, returns `null`.\n   */\n  removeTextListener(regexp) {\n    const index = this._textRegexpCallbacks.findIndex((textListener) => {\n      return String(textListener.regexp) === String(regexp);\n    });\n    if (index === -1) {\n      return null;\n    }\n    return this._textRegexpCallbacks.splice(index, 1)[0];\n  }\n\n  /**\n   * Remove all listeners registered with `onText()`.\n   */\n  clearTextListeners() {\n    this._textRegexpCallbacks = [];\n  }\n\n  /**\n   * Register a reply to wait for a message response.\n   *\n   * @param  {Number|String} chatId The chat id where the message cames from.\n   * @param  {Number|String} messageId The message id to be replied.\n   * @param  {Function} callback Callback will be called with the reply\n   *  message.\n   * @return {Number} id The ID of the inserted reply listener.\n   */\n  onReplyToMessage(chatId, messageId, callback) {\n    const id = ++this._replyListenerId;\n    this._replyListeners.push({\n      id,\n      chatId,\n      messageId,\n      callback\n    });\n    return id;\n  }\n\n  /**\n   * Removes a reply that has been prev. registered for a message response.\n   * @param   {Number} replyListenerId The ID of the reply listener.\n   * @return  {Object} deletedListener The removed reply listener if\n   *   found. This object has `id`, `chatId`, `messageId` and `callback`\n   *   properties. If not found, returns `null`.\n   */\n  removeReplyListener(replyListenerId) {\n    const index = this._replyListeners.findIndex((replyListener) => {\n      return replyListener.id === replyListenerId;\n    });\n    if (index === -1) {\n      return null;\n    }\n    return this._replyListeners.splice(index, 1)[0];\n  }\n\n  /**\n   * Removes all replies that have been prev. registered for a message response.\n   *\n   * @return  {Array} deletedListeners An array of removed listeners.\n   */\n  clearReplyListeners() {\n    this._replyListeners = [];\n  }\n\n  /**\n   * Return true if polling. Otherwise, false.\n   *\n   * @return {Boolean}\n   */\n  isPolling() {\n    return this._polling ? this._polling.isPolling() : false;\n  }\n\n  /**\n   * Open webhook.\n   * Multiple invocations do nothing if webhook is already open.\n   * Rejects returned promise if Polling is being used by this instance.\n   *\n   * @return {Promise}\n   */\n  openWebHook() {\n    if (this.isPolling()) {\n      return Promise.reject(new errors.FatalError('WebHook and Polling are mutually exclusive'));\n    }\n    if (!this._webHook) {\n      this._webHook = new TelegramBotWebHook(this);\n    }\n    return this._webHook.open();\n  }\n\n  /**\n   * Close webhook after closing all current connections.\n   * Multiple invocations do nothing if webhook is already closed.\n   *\n   * @return {Promise} Promise\n   */\n  closeWebHook() {\n    if (!this._webHook) {\n      return Promise.resolve();\n    }\n    return this._webHook.close();\n  }\n\n  /**\n   * Return true if using webhook and it is open i.e. accepts connections.\n   * Otherwise, false.\n   *\n   * @return {Boolean}\n   */\n  hasOpenWebHook() {\n    return this._webHook ? this._webHook.isOpen() : false;\n  }\n\n\n  /**\n   * Process an update; emitting the proper events and executing regexp\n   * callbacks. This method is useful should you be using a different\n   * way to fetch updates, other than those provided by TelegramBot.\n   *\n   * @param  {Object} update\n   * @see https://core.telegram.org/bots/api#update\n   */\n  processUpdate(update) {\n    debug('Process Update %j', update);\n    const message = update.message;\n    const editedMessage = update.edited_message;\n    const channelPost = update.channel_post;\n    const editedChannelPost = update.edited_channel_post;\n    const businessConnection = update.business_connection;\n    const businesssMessage = update.business_message;\n    const editedBusinessMessage = update.edited_business_message;\n    const deletedBusinessMessage = update.deleted_business_messages;\n    const messageReaction = update.message_reaction;\n    const messageReactionCount = update.message_reaction_count;\n    const inlineQuery = update.inline_query;\n    const chosenInlineResult = update.chosen_inline_result;\n    const callbackQuery = update.callback_query;\n    const shippingQuery = update.shipping_query;\n    const preCheckoutQuery = update.pre_checkout_query;\n    const poll = update.poll;\n    const pollAnswer = update.poll_answer;\n    const myChatMember = update.my_chat_member;\n    const chatMember = update.chat_member;\n    const chatJoinRequest = update.chat_join_request;\n    const chatBoost = update.chat_boost;\n    const removedChatBoost = update.removed_chat_boost;\n\n\n    if (message) {\n      debug('Process Update message %j', message);\n      const metadata = {};\n      metadata.type = TelegramBot.messageTypes.find((messageType) => {\n        return message[messageType];\n      });\n      this.emit('message', message, metadata);\n      if (metadata.type) {\n        debug('Emitting %s: %j', metadata.type, message);\n        this.emit(metadata.type, message, metadata);\n      }\n      if (message.text) {\n        debug('Text message');\n        this._textRegexpCallbacks.some(reg => {\n          debug('Matching %s with %s', message.text, reg.regexp);\n\n          if (!(reg.regexp instanceof RegExp)) {\n            reg.regexp = new RegExp(reg.regexp);\n          }\n\n          const result = reg.regexp.exec(message.text);\n          if (!result) {\n            return false;\n          }\n          // reset index so we start at the beginning of the regex each time\n          reg.regexp.lastIndex = 0;\n          debug('Matches %s', reg.regexp);\n          reg.callback(message, result);\n          // returning truthy value exits .some\n          return this.options.onlyFirstMatch;\n        });\n      }\n      if (message.reply_to_message) {\n        // Only callbacks waiting for this message\n        this._replyListeners.forEach(reply => {\n          // Message from the same chat\n          if (reply.chatId === message.chat.id) {\n            // Responding to that message\n            if (reply.messageId === message.reply_to_message.message_id) {\n              // Resolve the promise\n              reply.callback(message);\n            }\n          }\n        });\n      }\n    } else if (editedMessage) {\n      debug('Process Update edited_message %j', editedMessage);\n      this.emit('edited_message', editedMessage);\n      if (editedMessage.text) {\n        this.emit('edited_message_text', editedMessage);\n      }\n      if (editedMessage.caption) {\n        this.emit('edited_message_caption', editedMessage);\n      }\n    } else if (channelPost) {\n      debug('Process Update channel_post %j', channelPost);\n      this.emit('channel_post', channelPost);\n    } else if (editedChannelPost) {\n      debug('Process Update edited_channel_post %j', editedChannelPost);\n      this.emit('edited_channel_post', editedChannelPost);\n      if (editedChannelPost.text) {\n        this.emit('edited_channel_post_text', editedChannelPost);\n      }\n      if (editedChannelPost.caption) {\n        this.emit('edited_channel_post_caption', editedChannelPost);\n      }\n    } else if (businessConnection) {\n      debug('Process Update business_connection %j', businessConnection);\n      this.emit('business_connection', businessConnection);\n    } else if (businesssMessage) {\n      debug('Process Update business_message %j', businesssMessage);\n      this.emit('business_message', businesssMessage);\n    } else if (editedBusinessMessage) {\n      debug('Process Update edited_business_message %j', editedBusinessMessage);\n      this.emit('edited_business_message', editedBusinessMessage);\n    } else if (deletedBusinessMessage) {\n      debug('Process Update deleted_business_messages %j', deletedBusinessMessage);\n      this.emit('deleted_business_messages', deletedBusinessMessage);\n    } else if (messageReaction) {\n      debug('Process Update message_reaction %j', messageReaction);\n      this.emit('message_reaction', messageReaction);\n    } else if (messageReactionCount) {\n      debug('Process Update message_reaction_count %j', messageReactionCount);\n      this.emit('message_reaction_count', messageReactionCount);\n    } else if (inlineQuery) {\n      debug('Process Update inline_query %j', inlineQuery);\n      this.emit('inline_query', inlineQuery);\n    } else if (chosenInlineResult) {\n      debug('Process Update chosen_inline_result %j', chosenInlineResult);\n      this.emit('chosen_inline_result', chosenInlineResult);\n    } else if (callbackQuery) {\n      debug('Process Update callback_query %j', callbackQuery);\n      this.emit('callback_query', callbackQuery);\n    } else if (shippingQuery) {\n      debug('Process Update shipping_query %j', shippingQuery);\n      this.emit('shipping_query', shippingQuery);\n    } else if (preCheckoutQuery) {\n      debug('Process Update pre_checkout_query %j', preCheckoutQuery);\n      this.emit('pre_checkout_query', preCheckoutQuery);\n    } else if (poll) {\n      debug('Process Update poll %j', poll);\n      this.emit('poll', poll);\n    } else if (pollAnswer) {\n      debug('Process Update poll_answer %j', pollAnswer);\n      this.emit('poll_answer', pollAnswer);\n    } else if (chatMember) {\n      debug('Process Update chat_member %j', chatMember);\n      this.emit('chat_member', chatMember);\n    } else if (myChatMember) {\n      debug('Process Update my_chat_member %j', myChatMember);\n      this.emit('my_chat_member', myChatMember);\n    } else if (chatJoinRequest) {\n      debug('Process Update my_chat_member %j', chatJoinRequest);\n      this.emit('chat_join_request', chatJoinRequest);\n    } else if (chatBoost) {\n      debug('Process Update chat_boost %j', chatBoost);\n      this.emit('chat_boost', chatBoost);\n    } else if (removedChatBoost) {\n      debug('Process Update removed_chat_boost %j', removedChatBoost);\n      this.emit('removed_chat_boost', removedChatBoost);\n    }\n  }\n\n  /** Start Telegram Bot API methods */\n\n  /**\n  * Use this method to receive incoming updates using long polling.\n  * This method has an [older, compatible signature][getUpdates-v0.25.0]\n  * that is being deprecated.\n  *\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise}\n  * @see https://core.telegram.org/bots/api#getupdates\n  */\n  getUpdates(form = {}) {\n    /* The older method signature was getUpdates(timeout, limit, offset).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    if (typeof form !== 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature getUpdates(timeout, limit, offset) has been deprecated since v0.25.0');\n      form = {\n        timeout: arguments[0],\n        limit: arguments[1],\n        offset: arguments[2],\n      };\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    }\n\n    return this._request('getUpdates', { form });\n  }\n\n  /**\n   * Specify an url to receive incoming updates via an outgoing webHook.\n   * This method has an [older, compatible signature][setWebHook-v0.25.0]\n   * that is being deprecated.\n   *\n   * @param  {String} url URL where Telegram will make HTTP Post. Leave empty to\n   * delete webHook.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {String|stream.Stream} [options.certificate] PEM certificate key (public).\n   * @param  {String} [options.secret_token] Optional secret token to be sent in a header `X-Telegram-Bot-Api-Secret-Token` in every webhook request.\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#setwebhook\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  setWebHook(url, options = {}, fileOptions = {}) {\n    /* The older method signature was setWebHook(url, cert).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    let cert;\n    // Note: 'options' could be an object, if a stream was provided (in place of 'cert')\n    if (typeof options !== 'object' || options instanceof stream.Stream) {\n      deprecate('The method signature setWebHook(url, cert) has been deprecated since v0.25.0');\n      cert = options;\n      options = {}; // eslint-disable-line no-param-reassign\n    } else {\n      cert = options.certificate;\n    }\n\n    const opts = {\n      qs: options,\n    };\n    opts.qs.url = url;\n\n    if (cert) {\n      try {\n        const sendData = this._formatSendData('certificate', cert, fileOptions);\n        opts.formData = sendData[0];\n        opts.qs.certificate = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n    }\n\n    return this._request('setWebHook', opts);\n  }\n\n  /**\n   * Use this method to remove webhook integration if you decide to\n   * switch back to getUpdates. Returns True on success.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#deletewebhook\n   */\n  deleteWebHook(form = {}) {\n    return this._request('deleteWebhook', { form });\n  }\n\n  /**\n   * Use this method to get current webhook status.\n   * On success, returns a [WebhookInfo](https://core.telegram.org/bots/api#webhookinfo) object.\n   * If the bot is using getUpdates, will return an object with the\n   * url field empty.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#getwebhookinfo\n   */\n  getWebHookInfo(form = {}) {\n    return this._request('getWebhookInfo', { form });\n  }\n\n  /**\n   * A simple method for testing your bot's authentication token. Requires no parameters.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} basic information about the bot in form of a [User](https://core.telegram.org/bots/api#user) object.\n   * @see https://core.telegram.org/bots/api#getme\n   */\n  getMe(form = {}) {\n    return this._request('getMe', { form });\n  }\n\n  /**\n   * This method log out your bot from the cloud Bot API server before launching the bot locally.\n   * You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates.\n   * After a successful call, you will not be able to log in again using the same token for 10 minutes.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#logout\n   */\n  logOut(form = {}) {\n    return this._request('logOut', { form });\n  }\n\n  /**\n   * This method close the bot instance before moving it from one local server to another.\n   * This method will return error 429 in the first 10 minutes after the bot is launched.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#close\n   */\n  close(form = {}) {\n    return this._request('close', { form });\n  }\n\n  /**\n   * Send text message.\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} text Text of the message to be sent\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendmessage\n   */\n  sendMessage(chatId, text, form = {}) {\n    form.chat_id = chatId;\n    form.text = text;\n    return this._request('sendMessage', { form });\n  }\n\n  /**\n   * Forward messages of any kind.\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * or username of the target channel (in the format `@channelusername`)\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent (or channel username in the format `@channelusername`)\n   * @param  {Number|String} messageId  Unique message identifier in the chat specified in fromChatId\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#forwardmessage\n   */\n  forwardMessage(chatId, fromChatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_id = messageId;\n    return this._request('forwardMessage', { form });\n  }\n\n  /**\n   * Use this method to forward multiple messages of any kind.\n   * If some of the specified messages can't be found or forwarded, they are skipped.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * or username of the target channel (in the format `@channelusername`)\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent (or channel username in the format `@channelusername`)\n   * @param  {Array<Number|String>} messageIds Identifiers of 1-100 messages in the chat from_chat_id to forward.\n   * The identifiers must be specified in a strictly increasing order.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} An array of MessageId of the sent messages on success\n   * @see https://core.telegram.org/bots/api#forwardmessages\n   */\n  forwardMessages(chatId, fromChatId, messageIds, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_ids = messageIds;\n    return this._request('forwardMessages', { form });\n  }\n\n  /**\n   * Copy messages of any kind. **Service messages and invoice messages can't be copied.**\n   * The method is analogous to the method forwardMessages, but the copied message doesn't\n   * have a link to the original message.\n   * Returns the MessageId of the sent message on success.\n   * @param  {Number|String} chatId     Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent\n   * @param  {Number|String} messageId  Unique message identifier\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} The [MessageId](https://core.telegram.org/bots/api#messageid) of the sent message on success\n   * @see https://core.telegram.org/bots/api#copymessage\n   */\n  copyMessage(chatId, fromChatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_id = messageId;\n    return this._request('copyMessage', { form });\n  }\n\n  /**\n   * Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped.\n   * Service messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied.\n   * Returns the MessageId of the sent message on success.\n   * @param  {Number|String} chatId Unique identifier for the target chat\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent\n   * @param  {Array} messageIds  Identifiers of 1-100 messages in the chat from_chat_id to copy.\n   * The identifiers must be specified in a strictly increasing order.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} An array of MessageId of the sent messages\n   * @see https://core.telegram.org/bots/api#copymessages\n   */\n  copyMessages(chatId, fromChatId, messageIds, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_ids = stringify(messageIds);\n    return this._request('copyMessages', { form });\n  }\n\n  /**\n   * Send photo\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} photo A file path or a Stream. Can\n   * also be a `file_id` previously uploaded\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendphoto\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendPhoto(chatId, photo, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('photo', photo, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.photo = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendPhoto', opts);\n  }\n\n  /**\n  * Send audio\n  *\n  * **Your audio must be in the .MP3 or .M4A format.**\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {String|stream.Stream|Buffer} audio A file path, Stream or Buffer.\n  * Can also be a `file_id` previously uploaded.\n  * @param  {Object} [options] Additional Telegram query options\n  * @param  {Object} [fileOptions] Optional file related meta-data\n  * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n  * @see https://core.telegram.org/bots/api#sendaudio\n  * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n  */\n  sendAudio(chatId, audio, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n\n    opts.qs.chat_id = chatId;\n\n    try {\n      const sendData = this._formatSendData('audio', audio, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.audio = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n\n    return this._request('sendAudio', opts);\n  }\n\n  /**\n  * Send Document\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {String|stream.Stream|Buffer} doc A file path, Stream or Buffer.\n  * Can also be a `file_id` previously uploaded.\n  * @param  {Object} [options] Additional Telegram query options\n  * @param  {Object} [fileOptions] Optional file related meta-data\n  * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n  * @see https://core.telegram.org/bots/api#sendDocument\n  * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n  */\n  sendDocument(chatId, doc, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('document', doc, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.document = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n\n    return this._request('sendDocument', opts);\n  }\n\n  /**\n   * Use this method to send video files, **Telegram clients support mp4 videos** (other formats may be sent as Document).\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} video A file path or Stream.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendvideo\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendVideo(chatId, video, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('video', video, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.video = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendVideo', opts);\n  }\n\n  /**\n   * Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound).\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} animation A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendanimation\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendAnimation(chatId, animation, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('animation', animation, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.animation = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendAnimation', opts);\n  }\n\n  /**\n   * Send voice\n   *\n   * **Your audio must be in an .OGG file encoded with OPUS**, or in .MP3 format, or in .M4A format (other formats may be sent as Audio or Document)\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} voice A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendvoice\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendVoice(chatId, voice, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('voice', voice, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.voice = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendVoice', opts);\n  }\n\n  /**\n   * Use this method to send video messages\n   * Telegram clients support **rounded square MPEG4 videos** of up to 1 minute long.\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} videoNote A file path or Stream.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @info The length parameter is actually optional. However, the API (at time of writing) requires you to always provide it until it is fixed.\n   * @see https://core.telegram.org/bots/api#sendvideonote\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n  */\n  sendVideoNote(chatId, videoNote, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('video_note', videoNote, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.video_note = sendData[1];\n      this._fixAddFileThumbnail(options, opts);\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendVideoNote', opts);\n  }\n\n  /**\n   * Use this method to send a group of photos or videos as an album.\n   *\n   * **Documents and audio files can be only grouped in an album with messages of the same type**\n   *\n   * If you wish to [specify file options](https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files),\n   * add a `fileOptions` property to the target input in `media`.\n   *\n   * @param  {String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Array} media A JSON-serialized array describing photos and videos to be sent, must include 2–10 items\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, an array of the sent [Messages](https://core.telegram.org/bots/api#message)\n   * is returned.\n   * @see https://core.telegram.org/bots/api#sendmediagroup\n   * @see https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#sending-files\n   */\n  sendMediaGroup(chatId, media, options = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.chat_id = chatId;\n\n    opts.formData = {};\n    const inputMedia = [];\n    let index = 0;\n    for (const input of media) {\n      const payload = Object.assign({}, input);\n      delete payload.media;\n      delete payload.fileOptions;\n      try {\n        const attachName = String(index);\n        const [formData, fileId] = this._formatSendData(attachName, input.media, input.fileOptions);\n        if (formData) {\n          opts.formData[attachName] = formData[attachName];\n          payload.media = `attach://${attachName}`;\n        } else {\n          payload.media = fileId;\n        }\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      inputMedia.push(payload);\n      index++;\n    }\n    opts.qs.media = stringify(inputMedia);\n\n    return this._request('sendMediaGroup', opts);\n  }\n\n\n  /**\n   * Send location.\n   * Use this method to send point on the map.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Float} latitude Latitude of location\n   * @param  {Float} longitude Longitude of location\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendlocation\n   */\n  sendLocation(chatId, latitude, longitude, form = {}) {\n    form.chat_id = chatId;\n    form.latitude = latitude;\n    form.longitude = longitude;\n    return this._request('sendLocation', { form });\n  }\n\n  /**\n   * Use this method to edit live location messages sent by\n   * the bot or via the bot (for inline bots).\n   *\n   *  A location **can be edited until its live_period expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api#stopmessagelivelocation)**\n   *\n   * Note that you must provide one of chat_id, message_id, or\n   * inline_message_id in your request.\n   *\n   * @param  {Float} latitude Latitude of location\n   * @param  {Float} longitude Longitude of location\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n   * @see https://core.telegram.org/bots/api#editmessagelivelocation\n   */\n  editMessageLiveLocation(latitude, longitude, form = {}) {\n    form.latitude = latitude;\n    form.longitude = longitude;\n    return this._request('editMessageLiveLocation', { form });\n  }\n\n  /**\n   * Use this method to stop updating a live location message sent by\n   * the bot or via the bot (for inline bots) before live_period expires.\n   *\n   * Note that you must provide one of chat_id, message_id, or\n   * inline_message_id in your request.\n   *\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned.\n   * @see https://core.telegram.org/bots/api#stopmessagelivelocation\n   */\n  stopMessageLiveLocation(form = {}) {\n    return this._request('stopMessageLiveLocation', { form });\n  }\n\n  /**\n   * Send venue.\n   * Use this method to send information about a venue.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Float} latitude Latitude of location\n   * @param  {Float} longitude Longitude of location\n   * @param  {String} title Name of the venue\n   * @param  {String} address Address of the venue\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned.\n   * @see https://core.telegram.org/bots/api#sendvenue\n   */\n  sendVenue(chatId, latitude, longitude, title, address, form = {}) {\n    form.chat_id = chatId;\n    form.latitude = latitude;\n    form.longitude = longitude;\n    form.title = title;\n    form.address = address;\n    return this._request('sendVenue', { form });\n  }\n\n  /**\n   * Send contact.\n   * Use this method to send phone contacts.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} phoneNumber Contact's phone number\n   * @param  {String} firstName Contact's first name\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendcontact\n   */\n  sendContact(chatId, phoneNumber, firstName, form = {}) {\n    form.chat_id = chatId;\n    form.phone_number = phoneNumber;\n    form.first_name = firstName;\n    return this._request('sendContact', { form });\n  }\n\n  /**\n   * Send poll.\n   * Use this method to send a native poll.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the group/channel\n   * @param  {String} question Poll question, 1-300 characters\n   * @param  {Array} pollOptions Poll options, between 2-10 options (only 1-100 characters each)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#sendpoll\n   */\n  sendPoll(chatId, question, pollOptions, form = {}) {\n    form.chat_id = chatId;\n    form.question = question;\n    form.options = stringify(pollOptions);\n    return this._request('sendPoll', { form });\n  }\n\n  /**\n   * Send Dice\n   * Use this method to send an animated emoji that will display a random value.\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  On success, the sent [Message](https://core.telegram.org/bots/api#message) object is returned\n   * @see https://core.telegram.org/bots/api#senddice\n   */\n  sendDice(chatId, options = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('dice');\n      opts.formData = sendData[0];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendDice', opts);\n  }\n\n\n  /**\n   * Send chat action.\n   *\n   * Use this method when you need to tell the user that something is happening on the bot's side.\n   * **The status is set for 5 seconds or less** (when a message arrives from your bot, Telegram clients clear its typing status).\n   *\n   *  Action `typing` for [text messages](https://core.telegram.org/bots/api#sendmessage),\n   * `upload_photo` for [photos](https://core.telegram.org/bots/api#sendphoto), `record_video` or `upload_video` for [videos](https://core.telegram.org/bots/api#sendvideo),\n   * `record_voice` or `upload_voice` for [voice notes](https://core.telegram.org/bots/api#sendvoice), `upload_document` for [general files](https://core.telegram.org/bots/api#senddocument),\n   * `choose_sticker` for [stickers](https://core.telegram.org/bots/api#sendsticker), `find_location` for [location data](https://core.telegram.org/bots/api#sendlocation),\n   * `record_video_note` or `upload_video_note` for [video notes](https://core.telegram.org/bots/api#sendvideonote).\n   *\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} action Type of action to broadcast.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#sendchataction\n   */\n  sendChatAction(chatId, action, form = {}) {\n    form.chat_id = chatId;\n    form.action = action;\n    return this._request('sendChatAction', { form });\n  }\n\n  /**\n   * Use this method to change the chosen reactions on a message.\n   * - Service messages can't be reacted to.\n   * - Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel.\n   * - In albums, bots must react to the first message.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n   * @param  {Number} messageId  Unique identifier of the target message\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise<Boolean>} True on success\n   * @see https://core.telegram.org/bots/api#setmessagereaction\n   */\n  setMessageReaction(chatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = messageId;\n    if (form.reaction) {\n      form.reaction = stringify(form.reaction);\n    }\n    return this._request('setMessageReaction', { form });\n  }\n\n  /**\n   * Use this method to get a list of profile pictures for a user.\n   * Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.\n   * This method has an [older, compatible signature][getUserProfilePhotos-v0.25.0]\n   * that is being deprecated.\n   *\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}  Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object\n   * @see https://core.telegram.org/bots/api#getuserprofilephotos\n   */\n  getUserProfilePhotos(userId, form = {}) {\n    /* The older method signature was getUserProfilePhotos(userId, offset, limit).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    if (typeof form !== 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature getUserProfilePhotos(userId, offset, limit) has been deprecated since v0.25.0');\n      form = {\n        offset: arguments[1],\n        limit: arguments[2],\n      };\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    }\n    form.user_id = userId;\n    return this._request('getUserProfilePhotos', { form });\n  }\n\n  /**\n   * Get file.\n   * Use this method to get basic info about a file and prepare it for downloading.\n   *\n   * Attention: **link will be valid for 1 hour.**\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n   * @see https://core.telegram.org/bots/api#getfile\n   */\n  getFile(fileId, form = {}) {\n    form.file_id = fileId;\n    return this._request('getFile', { form });\n  }\n\n  /**\n    * Use this method to ban a user in a group, a supergroup or a channel.\n    * In the case of supergroups and channels, the user will not be able to\n    * return to the chat on their own using invite links, etc., unless unbanned first..\n    *\n    * The **bot must be an administrator in the group, supergroup or a channel** for this to work.\n    *\n    *\n    * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n    * @param  {Number} userId  Unique identifier of the target user\n    * @param  {Object} [options] Additional Telegram query options\n    * @return {Promise} True on success.\n    * @see https://core.telegram.org/bots/api#banchatmember\n    */\n  banChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('banChatMember', { form });\n  }\n\n  /**\n  * Use this method to unban a previously kicked user in a supergroup.\n  * The user will not return to the group automatically, but will be\n  * able to join via link, etc.\n  *\n  * The **bot must be an administrator** in the supergroup or channel for this to work.\n  *\n  * **By default**, this method guarantees that after the call the user is not a member of the chat, but will be able to join it.\n  * So **if the user is a member of the chat they will also be removed from the chat**. If you don't want this, use the parameter *only_if_banned*\n  *\n  * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Number} userId  Unique identifier of the target user\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#unbanchatmember\n  */\n  unbanChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('unbanChatMember', { form });\n  }\n\n  /**\n  * Use this method to restrict a user in a supergroup.\n  * The bot **must be an administrator in the supergroup** for this to work\n  * and must have the appropriate admin rights. Pass True for all boolean parameters\n  * to lift restrictions from a user. Returns True on success.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Number} userId Unique identifier of the target user\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#restrictchatmember\n  */\n  restrictChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('restrictChatMember', { form });\n  }\n\n  /**\n   * Use this method to promote or demote a user in a supergroup or a channel.\n   * The bot **must be an administrator** in the chat for this to work\n   * and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success.\n   * @see https://core.telegram.org/bots/api#promotechatmember\n   */\n  promoteChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('promoteChatMember', { form });\n  }\n\n  /**\n   * Use this method to set a custom title for an administrator in a supergroup promoted by the bot.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId Unique identifier of the target user\n   * @param  {String} customTitle New custom title for the administrator; 0-16 characters, emoji are not allowed\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatadministratorcustomtitle\n   */\n  setChatAdministratorCustomTitle(chatId, userId, customTitle, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    form.custom_title = customTitle;\n    return this._request('setChatAdministratorCustomTitle', { form });\n  }\n\n\n  /**\n   * Use this method to ban a channel chat in a supergroup or a channel.\n   *\n   * Until the chat is [unbanned](https://core.telegram.org/bots/api#unbanchatsenderchat), the owner of the banned chat won't be able to send messages on behalf of any of their channels.\n   * The bot **must be an administrator in the supergroup or channel** for this to work and must have the appropriate administrator rights\n   *\n   * @param  {Number|String} chatId   Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} senderChatId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success.\n   * @see https://core.telegram.org/bots/api#banchatsenderchat\n   */\n  banChatSenderChat(chatId, senderChatId, form = {}) {\n    form.chat_id = chatId;\n    form.sender_chat_id = senderChatId;\n    return this._request('banChatSenderChat', { form });\n  }\n\n  /**\n  * Use this method to unban a previously banned channel chat in a supergroup or channel.\n  *\n  * The bot **must be an administrator** for this to work and must have the appropriate administrator rights.\n  *\n  * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Number} senderChatId Unique identifier of the target user\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#unbanchatsenderchat\n  */\n  unbanChatSenderChat(chatId, senderChatId, form = {}) {\n    form.chat_id = chatId;\n    form.sender_chat_id = senderChatId;\n    return this._request('unbanChatSenderChat', { form });\n  }\n\n  /**\n   * Use this method to set default chat permissions for all members.\n   *\n   * The bot **must be an administrator in the group or a supergroup** for this to\n   * work and **must have the `can_restrict_members` admin rights.**\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Array} chatPermissions New default chat permissions\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatpermissions\n   */\n  setChatPermissions(chatId, chatPermissions, form = {}) {\n    form.chat_id = chatId;\n    form.permissions = stringify(chatPermissions);\n    return this._request('setChatPermissions', { form });\n  }\n\n  /**\n   * Use this method to generate a new primary invite link for a chat. **Any previously generated primary link is revoked**.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Exported invite link as String on success.\n   * @see https://core.telegram.org/bots/api#exportchatinvitelink\n   */\n  exportChatInviteLink(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('exportChatInviteLink', { form });\n  }\n\n  /**\n   * Use this method to create an additional invite link for a chat.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * The link generated with this method can be revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api#revokechatinvitelink)\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Object} The new invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n   * @see https://core.telegram.org/bots/api#createchatinvitelink\n   */\n  createChatInviteLink(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('createChatInviteLink', { form });\n  }\n\n  /**\n   * Use this method to edit a non-primary invite link created by the bot.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} inviteLink Text with the invite link to edit\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} The edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n   * @see https://core.telegram.org/bots/api#editchatinvitelink\n   */\n  editChatInviteLink(chatId, inviteLink, form = {}) {\n    form.chat_id = chatId;\n    form.invite_link = inviteLink;\n    return this._request('editChatInviteLink', { form });\n  }\n\n  /**\n   * Use this method to revoke an invite link created by the bot.\n   * Note: If the primary link is revoked, a new link is automatically generated\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} inviteLink The invite link to revoke\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} The revoked invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object\n   * @see https://core.telegram.org/bots/api#revokechatinvitelink\n   */\n  revokeChatInviteLink(chatId, inviteLink, form = {}) {\n    form.chat_id = chatId;\n    form.invite_link = inviteLink;\n    return this._request('revokeChatInviteLink', { form });\n  }\n\n  /**\n   * Use this method to approve a chat join request.\n   *\n   * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right.**\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#approvechatjoinrequest\n   */\n  approveChatJoinRequest(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('approveChatJoinRequest', { form });\n  }\n\n  /**\n   * Use this method to decline a chat join request.\n   *\n   * The bot **must be an administrator in the chat** for this to work and **must have the `can_invite_users` administrator right**.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#declinechatjoinrequest\n   */\n  declineChatJoinRequest(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('declineChatJoinRequest', { form });\n  }\n\n  /**\n   * Use this method to set a new profile photo for the chat. **Photos can't be changed for private chats**.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {stream.Stream|Buffer} photo A file path or a Stream.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatphoto\n   */\n  setChatPhoto(chatId, photo, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('photo', photo, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.photo = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('setChatPhoto', opts);\n  }\n\n  /**\n  * Use this method to delete a chat photo. **Photos can't be changed for private chats**.\n  *\n  * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#deletechatphoto\n  */\n  deleteChatPhoto(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('deleteChatPhoto', { form });\n  }\n\n  /**\n   * Use this method to change the title of a chat. **Titles can't be changed for private chats**.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} title New chat title, 1-255 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchattitle\n   */\n  setChatTitle(chatId, title, form = {}) {\n    form.chat_id = chatId;\n    form.title = title;\n    return this._request('setChatTitle', { form });\n  }\n\n  /**\n   * Use this method to change the description of a group, a supergroup or a channel.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate admin rights.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} description New chat title, 0-255 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatdescription\n   */\n  setChatDescription(chatId, description, form = {}) {\n    form.chat_id = chatId;\n    form.description = description;\n    return this._request('setChatDescription', { form });\n  }\n\n  /**\n   * Use this method to pin a message in a supergroup.\n   *\n   * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n   * right in a supergroup or `can_edit_messages` administrator right in a channel.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Number} messageId Identifier of a message to pin\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#pinchatmessage\n   */\n  pinChatMessage(chatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = messageId;\n    return this._request('pinChatMessage', { form });\n  }\n\n  /**\n   * Use this method to remove a message from the list of pinned messages in a chat\n   *\n   * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n   * right in a supergroup or `can_edit_messages` administrator right in a channel.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unpinchatmessage\n   */\n  unpinChatMessage(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unpinChatMessage', { form });\n  }\n\n  /**\n  * Use this method to clear the list of pinned messages in a chat.\n  *\n  * If the chat is not a private chat, the **bot must be an administrator in the chat** for this to work and must have the `can_pin_messages` administrator\n  * right in a supergroup or `can_edit_messages` administrator right in a channel.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#unpinallchatmessages\n  */\n  unpinAllChatMessages(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unpinAllChatMessages', { form });\n  }\n\n  /**\n   * Use this method for your bot to leave a group, supergroup or channel\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#leavechat\n   */\n  leaveChat(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('leaveChat', { form });\n  }\n\n  /**\n   * Use this method to get up to date information about the chat\n   * (current name of the user for one-on-one conversations, current\n   * username of a user, group or channel, etc.).\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`) or channel\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [ChatFullInfo](https://core.telegram.org/bots/api#chatfullinfo) object on success\n   * @see https://core.telegram.org/bots/api#getchat\n   */\n  getChat(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getChat', { form });\n  }\n\n  /**\n   * Use this method to get a list of administrators in a chat\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api#chatmember) objects that contains information about all chat administrators except other bots.\n   * If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned\n   * @see https://core.telegram.org/bots/api#getchatadministrators\n   */\n  getChatAdministrators(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getChatAdministrators', { form });\n  }\n\n  /**\n  * Use this method to get the number of members in a chat.\n  *\n  * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} Int on success\n  * @see https://core.telegram.org/bots/api#getchatmembercount\n  */\n  getChatMemberCount(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getChatMemberCount', { form });\n  }\n\n  /**\n   * Use this method to get information about a member of a chat.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [ChatMember](https://core.telegram.org/bots/api#chatmember) object on success\n   * @see https://core.telegram.org/bots/api#getchatmember\n   */\n  getChatMember(chatId, userId, form = {}) {\n    form.chat_id = chatId;\n    form.user_id = userId;\n    return this._request('getChatMember', { form });\n  }\n\n  /**\n   * Use this method to set a new group sticker set for a supergroup.\n   *\n   * The bot **must be an administrator in the chat** for this to work and must have the appropriate administrator rights.\n   *\n   * **Note:** Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {String} stickerSetName Name of the sticker set to be set as the group sticker set\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatstickerset\n   */\n  setChatStickerSet(chatId, stickerSetName, form = {}) {\n    form.chat_id = chatId;\n    form.sticker_set_name = stickerSetName;\n    return this._request('setChatStickerSet', { form });\n  }\n\n\n  /**\n   * Use this method to delete a group sticker set from a supergroup.\n   *\n   * Use the field `can_set_sticker_set` optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletechatstickerset\n   */\n  deleteChatStickerSet(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('deleteChatStickerSet', { form });\n  }\n\n  /**\n   * Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects\n   * @see https://core.telegram.org/bots/api#getforumtopiciconstickers\n   */\n  getForumTopicIconStickers(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('getForumTopicIconStickers', { form });\n  }\n\n  /**\n   * Use this method to create a topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n   *\n   * Returns information about the created topic as a [ForumTopic](https://core.telegram.org/bots/api#forumtopic) object.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param  {String} name Topic name, 1-128 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @see https://core.telegram.org/bots/api#createforumtopic\n   */\n  createForumTopic(chatId, name, form = {}) {\n    form.chat_id = chatId;\n    form.name = name;\n    return this._request('createForumTopic', { form });\n  }\n\n  /**\n   * Use this method to edit name and icon of a topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#editforumtopic\n   */\n  editForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('editForumTopic', { form });\n  }\n\n  /**\n   * Use this method to close an open topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#closeforumtopic\n   */\n  closeForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('closeForumTopic', { form });\n  }\n\n  /**\n   * Use this method to reopen a closed topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#reopenforumtopic\n   */\n  reopenForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('reopenForumTopic', { form });\n  }\n\n  /**\n   * Use this method to delete a forum topic along with all its messages in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deleteforumtopic\n   */\n  deleteForumTopic(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('deleteForumTopic', { form });\n  }\n\n  /**\n   * Use this method to clear the list of pinned messages in a forum topic.\n   * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Number} messageThreadId Unique identifier for the target message thread of the forum topic\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unpinallforumtopicmessages\n   */\n  unpinAllForumTopicMessages(chatId, messageThreadId, form = {}) {\n    form.chat_id = chatId;\n    form.message_thread_id = messageThreadId;\n    return this._request('unpinAllForumTopicMessages', { form });\n  }\n\n  /**\n  * Use this method to edit the name of the 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically unhidden if it was hidden.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {String} name New topic name, 1-128 characters\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#editgeneralforumtopic\n  */\n  editGeneralForumTopic(chatId, name, form = {}) {\n    form.chat_id = chatId;\n    form.name = name;\n    return this._request('editGeneralForumTopic', { form });\n  }\n\n  /**\n  * Use this method to close an open 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically unhidden if it was hidden.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#closegeneralforumtopic\n  */\n  closeGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('closeGeneralForumTopic', { form });\n  }\n\n  /**\n  * Use this method to reopen a closed 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically unhidden if it was hidden.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#reopengeneralforumtopic\n  */\n  reopenGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('reopenGeneralForumTopic', { form });\n  }\n\n  /**\n  * Use this method to hide the 'General' topic in a forum supergroup chat.\n  * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights.\n  * The topic will be automatically closed if it was open.\n  *\n  * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n  * @param {Object} [options] Additional Telegram query options\n  * @return {Promise} True on success\n  * @see https://core.telegram.org/bots/api#hidegeneralforumtopic\n  */\n  hideGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('hideGeneralForumTopic', { form });\n  }\n\n  /**\n   * Use this method to unhide the 'General' topic in a forum supergroup chat.\n   * The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unhidegeneralforumtopic\n   */\n  unhideGeneralForumTopic(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unhideGeneralForumTopic', { form });\n  }\n\n  /**\n   * Use this method to clear the list of pinned messages in a General forum topic.\n   * The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\n   *\n   * @param {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @param {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages\n   */\n  unpinAllGeneralForumTopicMessages(chatId, form = {}) {\n    form.chat_id = chatId;\n    return this._request('unhideGeneralForumTopic', { form });\n  }\n\n  /**\n   * Use this method to send answers to callback queries sent from\n   * [inline keyboards](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating).\n   *\n   * The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.\n   *\n   * This method has **older, compatible signatures ([1][answerCallbackQuery-v0.27.1])([2][answerCallbackQuery-v0.29.0])**\n   * that are being deprecated.\n   *\n   * @param  {String} callbackQueryId Unique identifier for the query to be answered\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#answercallbackquery\n   */\n  answerCallbackQuery(callbackQueryId, form = {}) {\n    /* The older method signature (in/before v0.27.1) was answerCallbackQuery(callbackQueryId, text, showAlert).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    if (typeof form !== 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature answerCallbackQuery(callbackQueryId, text, showAlert) has been deprecated since v0.27.1');\n      form = {\n        callback_query_id: arguments[0],\n        text: arguments[1],\n        show_alert: arguments[2],\n      };\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    }\n    /* The older method signature (in/before v0.29.0) was answerCallbackQuery([options]).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library. */\n    if (typeof callbackQueryId === 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature answerCallbackQuery([options]) has been deprecated since v0.29.0');\n      form = callbackQueryId;\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    } else {\n      form.callback_query_id = callbackQueryId;\n    }\n    return this._request('answerCallbackQuery', { form });\n  }\n\n  /**\n   * Use this method to get the list of boosts added to a chat by a use.\n   * Requires administrator rights in the chat\n   *\n   * @param  {Number|String} chatId  Unique identifier for the group/channel\n   * @param  {Number} user_id Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, returns a [UserChatBoosts](https://core.telegram.org/bots/api#userchatboosts) object\n   * @see https://core.telegram.org/bots/api#getuserchatboosts\n   */\n  getUserChatBoosts(chatId, pollId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = pollId;\n    return this._request('getUserChatBoosts', { form });\n  }\n\n  /**\n   * Use this method to get information about the connection of the bot with a business account\n   *\n   * @param  {Number|String} businessConnectionId  Unique identifier for the group/channel\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, returns [BusinessConnection](https://core.telegram.org/bots/api#businessconnection) object\n   * @see https://core.telegram.org/bots/api#getbusinessconnection\n   */\n  getBusinessConnection(businessConnectionId, form = {}) {\n    form.business_connection_id = businessConnectionId;\n    return this._request('getBusinessConnection', { form });\n  }\n\n  /**\n   * Use this method to change the list of the bot's commands.\n   *\n   * See https://core.telegram.org/bots#commands for more details about bot commands\n   *\n   * @param  {Array} commands  List of bot commands to be set as the list of the [bot's commands](https://core.telegram.org/bots/api#botcommand). At most 100 commands can be specified.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setmycommands\n   */\n  setMyCommands(commands, form = {}) {\n    form.commands = stringify(commands);\n\n    if (form.scope) {\n      form.scope = stringify(form.scope);\n    }\n\n    return this._request('setMyCommands', { form });\n  }\n\n  /**\n   * Use this method to delete the list of the bot's commands for the given scope and user language.\n   *\n   *  After deletion, [higher level commands](https://core.telegram.org/bots/api#determining-list-of-commands) will be shown to affected users.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletemycommands\n   */\n  deleteMyCommands(form = {}) {\n    return this._request('deleteMyCommands', { form });\n  }\n\n\n  /**\n   * Use this method to get the current list of the bot's commands for the given scope and user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Array of [BotCommand](https://core.telegram.org/bots/api#botcommand) on success. If commands aren't set, an empty list is returned.\n   * @see https://core.telegram.org/bots/api#getmycommands\n   */\n  getMyCommands(form = {}) {\n    if (form.scope) {\n      form.scope = stringify(form.scope);\n    }\n    return this._request('getMyCommands', { form });\n  }\n\n  /**\n   * Use this method to change the bot's name.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setmyname\n   */\n  setMyName(form = {}) {\n    return this._request('setMyName', { form });\n  }\n\n  /**\n   * Use this method to get the current bot name for the given user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [BotName](https://core.telegram.org/bots/api#botname) on success\n   * @see https://core.telegram.org/bots/api#getmyname\n   */\n  getMyName(form = {}) {\n    return this._request('getMyName', { form });\n  }\n\n  /**\n   * Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty.\n   *\n   * Returns True on success.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setmydescription\n   */\n  setMyDescription(form = {}) {\n    return this._request('setMyDescription', { form });\n  }\n\n  /**\n   * Use this method to get the current bot description for the given user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Returns [BotDescription](https://core.telegram.org/bots/api#botdescription) on success.\n   * @see https://core.telegram.org/bots/api#getmydescription\n   */\n  getMyDescription(form = {}) {\n    return this._request('getMyDescription', { form });\n  }\n\n  /**\n   * Use this method to change the bot's short description, which is shown on the bot's profile page\n   * and is sent together with the link when users share the bot.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Returns True on success.\n   * @see https://core.telegram.org/bots/api#setmyshortdescription\n   */\n  setMyShortDescription(form = {}) {\n    return this._request('setMyShortDescription', { form });\n  }\n\n  /**\n   * Use this method to get the current bot short description for the given user language.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Returns [BotShortDescription](https://core.telegram.org/bots/api#botshortdescription) on success.\n   * @see https://core.telegram.org/bots/api#getmyshortdescription\n   */\n  getMyShortDescription(form = {}) {\n    return this._request('getMyShortDescription', { form });\n  }\n\n  /**\n   * Use this method to change the bot's menu button in a private chat, or the default menu button.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setchatmenubutton\n   */\n  setChatMenuButton(form = {}) {\n    return this._request('setChatMenuButton', { form });\n  }\n\n  /**\n   * Use this method to get the current value of the bot's menu button in a private chat, or the default menu button.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [MenuButton](https://core.telegram.org/bots/api#menubutton) on success\n   * @see https://core.telegram.org/bots/api#getchatmenubutton\n   */\n  getChatMenuButton(form = {}) {\n    return this._request('getChatMenuButton', { form });\n  }\n\n  /**\n   * Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels.\n   *\n   * These rights will be suggested to users, but they are are free to modify the list before adding the bot.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#getchatmenubutton\n   */\n  setMyDefaultAdministratorRights(form = {}) {\n    return this._request('setMyDefaultAdministratorRights', { form });\n  }\n\n  /**\n   * Use this method to get the current default administrator rights of the bot.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} [ChatAdministratorRights](https://core.telegram.org/bots/api#chatadministratorrights) on success\n   * @see https://core.telegram.org/bots/api#getmydefaultadministratorrights\n   */\n  getMyDefaultAdministratorRights(form = {}) {\n    return this._request('getMyDefaultAdministratorRights', { form });\n  }\n\n  /**\n   * Use this method to edit text or [game](https://core.telegram.org/bots/api#games) messages sent by the bot or via the bot (for inline bots).\n   *\n   * Note: that **you must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {String} text  New text of the message\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagetext\n   */\n  editMessageText(text, form = {}) {\n    form.text = text;\n    return this._request('editMessageText', { form });\n  }\n\n  /**\n   * Use this method to edit captions of messages sent by the bot or via the bot (for inline bots).\n   *\n   * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {String} caption  New caption of the message\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagecaption\n   */\n  editMessageCaption(caption, form = {}) {\n    form.caption = caption;\n    return this._request('editMessageCaption', { form });\n  }\n\n  /**\n   * Use this method to edit animation, audio, document, photo, or video messages.\n   *\n   * If a message is a part of a message album, then it can be edited only to a photo or a video.\n   *\n   * Otherwise, message type can be changed arbitrarily. When inline message is edited, new file can't be uploaded.\n   * Use previously uploaded file via its file_id or specify a URL.\n   *\n   * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {Object} media  A JSON-serialized object for a new media content of the message\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagemedia\n   */\n  editMessageMedia(media, form = {}) {\n    const regexAttach = /attach:\\/\\/.+/;\n\n    if (typeof media.media === 'string' && regexAttach.test(media.media)) {\n      const opts = {\n        qs: form,\n      };\n\n      opts.formData = {};\n\n      const payload = Object.assign({}, media);\n      delete payload.media;\n\n      try {\n        const attachName = String(0);\n        const [formData] = this._formatSendData(\n          attachName,\n          media.media.replace('attach://', ''),\n          media.fileOptions\n        );\n\n        if (formData) {\n          opts.formData[attachName] = formData[attachName];\n          payload.media = `attach://${attachName}`;\n        } else {\n          throw new errors.FatalError(`Failed to process the replacement action for your ${media.type}`);\n        }\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n\n      opts.qs.media = stringify(payload);\n\n      return this._request('editMessageMedia', opts);\n    }\n\n    form.media = stringify(media);\n\n    return this._request('editMessageMedia', { form });\n  }\n\n  /**\n   * Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots).\n   *\n   * Note: You **must provide one of chat_id, message_id, or inline_message_id** in your request.\n   *\n   * @param  {Object} replyMarkup  A JSON-serialized object for an inline keyboard.\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise} On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#editmessagetext\n   */\n  editMessageReplyMarkup(replyMarkup, form = {}) {\n    form.reply_markup = replyMarkup;\n    return this._request('editMessageReplyMarkup', { form });\n  }\n\n\n  /**\n   * Use this method to stop a poll which was sent by the bot.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the group/channel\n   * @param  {Number} pollId Identifier of the original message with the poll\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the stopped [Poll](https://core.telegram.org/bots/api#poll) is returned\n   * @see https://core.telegram.org/bots/api#stoppoll\n   */\n  stopPoll(chatId, pollId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = pollId;\n    return this._request('stopPoll', { form });\n  }\n\n  /**\n   * Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS,\n   * or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers.\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String|stream.Stream|Buffer} sticker A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded. Stickers are WebP format files.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n   * @see https://core.telegram.org/bots/api#sendsticker\n   */\n  sendSticker(chatId, sticker, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('sticker', sticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.sticker = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendSticker', opts);\n  }\n\n  /**\n   * Use this method to get a sticker set.\n   *\n   * @param  {String} name Name of the sticker set\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, a [StickerSet](https://core.telegram.org/bots/api#stickerset) object is returned\n   * @see https://core.telegram.org/bots/api#getstickerset\n   */\n  getStickerSet(name, form = {}) {\n    form.name = name;\n    return this._request('getStickerSet', { form });\n  }\n\n  /**\n   * Use this method to get information about custom emoji stickers by their identifiers.\n   *\n   * @param  {Array} custom_emoji_ids List of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects.\n   * @see https://core.telegram.org/bots/api#getcustomemojistickers\n   */\n  getCustomEmojiStickers(customEmojiIds, form = {}) {\n    form.custom_emoji_ids = stringify(customEmojiIds);\n    return this._request('getCustomEmojiStickers', { form });\n  }\n\n  /**\n   * Use this method to upload a file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple\n   * times).\n   *\n   * @param  {Number} userId User identifier of sticker file owner\n   * @param  {String|stream.Stream|Buffer} sticker A file path or a Stream with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. Can also be a `file_id` previously uploaded.\n   * @param {String} stickerFormat Allow values:  `static`, `animated` or `video`\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} On success, a [File](https://core.telegram.org/bots/api#file) object is returned\n   * @see https://core.telegram.org/bots/api#uploadstickerfile\n   */\n  uploadStickerFile(userId, sticker, stickerFormat = 'static', options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.user_id = userId;\n    opts.qs.sticker_format = stickerFormat;\n\n    try {\n      const sendData = this._formatSendData('sticker', sticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.sticker = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('uploadStickerFile', opts);\n  }\n\n  /**\n   * Use this method to create new sticker set owned by a user.\n   *\n   * The bot will be able to edit the created sticker set.\n   *\n   * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n   *\n   * @param  {Number} userId User identifier of created sticker set owner\n   * @param  {String} name Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g.,   *\"animals\"*). Can contain only english letters, digits and underscores.\n   *  Must begin with a letter, can't contain consecutive underscores and must end in `\"_by_<bot_username>\"`. `<bot_username>` is case insensitive. 1-64 characters.\n   * @param  {String} title Sticker set title, 1-64 characters\n   * @param  {String|stream.Stream|Buffer} pngSticker Png image with the sticker, must be up to 512 kilobytes in size,\n   *  dimensions must not exceed 512px, and either width or height must be exactly 512px.\n   * @param  {String} emojis One or more emoji corresponding to the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#createnewstickerset\n   */\n  createNewStickerSet(userId, name, title, pngSticker, emojis, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.user_id = userId;\n    opts.qs.name = name;\n    opts.qs.title = title;\n    opts.qs.emojis = emojis;\n    opts.qs.mask_position = stringify(options.mask_position);\n    try {\n      const sendData = this._formatSendData('png_sticker', pngSticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.png_sticker = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('createNewStickerSet', opts);\n  }\n\n  /**\n   * Use this method to add a new sticker to a set created by the bot.\n   *\n   * You must use exactly one of the fields *png_sticker*, *tgs_sticker*, or *webm_sticker*\n   *\n   * Animated stickers can be added to animated sticker sets and only to them\n   *\n   * Note:\n   * - Emoji sticker sets can have up to 200 sticker\n   * - Static or Animated sticker sets can have up to 120 stickers\n   *\n   * @param  {Number} userId User identifier of sticker set owner\n   * @param  {String} name Sticker set name\n   * @param  {String|stream.Stream|Buffer} sticker Png image with the sticker (must be up to 512 kilobytes in size,\n   * dimensions must not exceed 512px, and either width or height must be exactly 512px, [TGS animation](https://core.telegram.org/stickers#animated-sticker-requirements)\n   * with the sticker or [WEBM video](https://core.telegram.org/stickers#video-sticker-requirements) with the sticker.\n   * @param  {String} emojis One or more emoji corresponding to the sticker\n   * @param  {String} stickerType Allow values: `png_sticker`, `tgs_sticker`, or `webm_sticker`.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise}  True on success\n   * @see https://core.telegram.org/bots/api#addstickertoset\n   */\n  addStickerToSet(userId, name, sticker, emojis, stickerType = 'png_sticker', options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.user_id = userId;\n    opts.qs.name = name;\n    opts.qs.emojis = emojis;\n    opts.qs.mask_position = stringify(options.mask_position);\n\n    if (typeof stickerType !== 'string' || ['png_sticker', 'tgs_sticker', 'webm_sticker'].indexOf(stickerType) === -1) {\n      return Promise.reject(new Error('stickerType must be a string and the allow types is: png_sticker, tgs_sticker, webm_sticker'));\n    }\n\n    try {\n      const sendData = this._formatSendData(stickerType, sticker, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs[stickerType] = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('addStickerToSet', opts);\n  }\n\n  /**\n   * Use this method to move a sticker in a set created by the bot to a specific position.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Number} position New sticker position in the set, zero-based\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickerpositioninset\n   */\n  setStickerPositionInSet(sticker, position, form = {}) {\n    form.sticker = sticker;\n    form.position = position;\n    return this._request('setStickerPositionInSet', { form });\n  }\n\n  /**\n   * Use this method to delete a sticker from a set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletestickerfromset\n   * @todo Add tests for this method!\n   */\n  deleteStickerFromSet(sticker, form = {}) {\n    form.sticker = sticker;\n    return this._request('deleteStickerFromSet', { form });\n  }\n\n  /**\n   * Use this method to replace an existing sticker in a sticker set with a new one\n   *\n   * @param  {Number} user_id User identifier of the sticker set owner\n   * @param  {String} name Sticker set name\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#replacestickerinset\n   * @todo Add tests for this method!\n   */\n  replaceStickerInSet(userId, name, oldSticker, form = {}) {\n    form.user_id = userId;\n    form.name = name;\n    form.old_sticker = oldSticker;\n    return this._request('deleteStickerFromSet', { form });\n  }\n\n\n  /**\n   * Use this method to change the list of emoji assigned to a regular or custom emoji sticker.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param { Array } emojiList A JSON-serialized list of 1-20 emoji associated with the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickeremojilist\n   */\n  setStickerEmojiList(sticker, emojiList, form = {}) {\n    form.sticker = sticker;\n    form.emoji_list = stringify(emojiList);\n    return this._request('setStickerEmojiList', { form });\n  }\n\n  /**\n   * Use this method to change the list of emoji assigned to a `regular` or `custom emoji` sticker.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickerkeywords\n   */\n  setStickerKeywords(sticker, form = {}) {\n    form.sticker = sticker;\n    if (form.keywords) {\n      form.keywords = stringify(form.keywords);\n    }\n    return this._request('setStickerKeywords', { form });\n  }\n\n  /**\n   * Use this method to change the [mask position](https://core.telegram.org/bots/api#maskposition) of a mask sticker.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} sticker File identifier of the sticker\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickermaskposition\n   */\n  setStickerMaskPosition(sticker, form = {}) {\n    form.sticker = sticker;\n    if (form.mask_position) {\n      form.mask_position = stringify(form.mask_position);\n    }\n    return this._request('setStickerMaskPosition', { form });\n  }\n\n  /**\n   * Use this method to set the title of a created sticker set.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} name Sticker set name\n   * @param  {String} title Sticker set title, 1-64 characters\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickersettitle\n   */\n  setStickerSetTitle(name, title, form = {}) {\n    form.name = name;\n    form.title = title;\n    return this._request('setStickerSetTitle', { form });\n  }\n\n  /**\n   * Use this method to add a thumb to a set created by the bot.\n   *\n   * Animated thumbnails can be set for animated sticker sets only. Video thumbnails can be set only for video sticker sets only\n   *\n   * @param  {Number} userId User identifier of sticker set owner\n   * @param  {String} name Sticker set name\n   * @param  {String|stream.Stream|Buffer} thumbnail A .WEBP or .PNG image with the thumbnail,\n   * must be up to 128 kilobytes in size and have width and height exactly 100px,\n   * a TGS animation with the thumbnail up to 32 kilobytes in size or a WEBM video with the thumbnail up to 32 kilobytes in size.\n   *\n   * Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram\n   * to get a file from the Internet, or upload a new one. Animated sticker set thumbnails can't be uploaded via HTTP URL.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOptions] Optional file related meta-data\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setstickersetthumbnail\n   */\n  setStickerSetThumbnail(userId, name, thumbnail, options = {}, fileOptions = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.user_id = userId;\n    opts.qs.name = name;\n    opts.qs.mask_position = stringify(options.mask_position);\n    try {\n      const sendData = this._formatSendData('thumbnail', thumbnail, fileOptions);\n      opts.formData = sendData[0];\n      opts.qs.thumbnail = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('setStickerSetThumbnail', opts);\n  }\n\n\n  /**\n   * Use this method to set the thumbnail of a custom emoji sticker set.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} name Sticker set name\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#setcustomemojistickersetthumbnail\n   */\n  setCustomEmojiStickerSetThumbnail(name, form = {}) {\n    form.name = name;\n    return this._request('setCustomEmojiStickerSetThumbnail', { form });\n  }\n\n  /**\n   * Use this method to delete a sticker set that was created by the bot.\n   *\n   * The sticker must belong to a sticker set created by the bot.\n   *\n   * @param  {String} name Sticker set name\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} True on success\n   * @see https://core.telegram.org/bots/api#deletestickerset\n   */\n  deleteStickerSet(name, form = {}) {\n    form.name = name;\n    return this._request('deleteStickerSet', { form });\n  }\n\n  /**\n   * Send answers to an inline query.\n   *\n   * Note: No more than 50 results per query are allowed.\n   *\n   * @param  {String} inlineQueryId Unique identifier of the query\n   * @param  {InlineQueryResult[]} results An array of results for the inline query\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, True is returned\n   * @see https://core.telegram.org/bots/api#answerinlinequery\n   */\n  answerInlineQuery(inlineQueryId, results, form = {}) {\n    form.inline_query_id = inlineQueryId;\n    form.results = stringify(results);\n    return this._request('answerInlineQuery', { form });\n  }\n\n  /**\n   * Use this method to set the result of an interaction with a [Web App](https://core.telegram.org/bots/webapps)\n   * and send a corresponding message on behalf of the user to the chat from which the query originated.\n   *\n   * @param  {String} webAppQueryId Unique identifier for the query to be answered\n   * @param  {InlineQueryResult} result object that represents one result of an inline query\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, a [SentWebAppMessage](https://core.telegram.org/bots/api#sentwebappmessage) object is returned\n   * @see https://core.telegram.org/bots/api#answerwebappquery\n   */\n  answerWebAppQuery(webAppQueryId, result, form = {}) {\n    form.web_app_query_id = webAppQueryId;\n    form.result = stringify(result);\n    return this._request('answerWebAppQuery', { form });\n  }\n\n  /**\n   * Use this method to send an invoice.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} title Product name, 1-32 characters\n   * @param  {String} description Product description, 1-255 characters\n   * @param  {String} payload Bot defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.\n   * @param  {String} providerToken Payments provider token, obtained via `@BotFather`\n   * @param  {String} currency Three-letter ISO 4217 currency code\n   * @param  {Array} prices Breakdown of prices\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n   * @see https://core.telegram.org/bots/api#sendinvoice\n   */\n  sendInvoice(chatId, title, description, payload, providerToken, currency, prices, form = {}) {\n    form.chat_id = chatId;\n    form.title = title;\n    form.description = description;\n    form.payload = payload;\n    form.provider_token = providerToken;\n    form.currency = currency;\n    form.prices = stringify(prices);\n    form.provider_data = stringify(form.provider_data);\n    if (form.suggested_tip_amounts) {\n      form.suggested_tip_amounts = stringify(form.suggested_tip_amounts);\n    }\n    return this._request('sendInvoice', { form });\n  }\n\n  /**\n  * Use this method to create a link for an invoice.\n  *\n  * @param {String} title Product name, 1-32 characters\n  * @param {String} description Product description, 1-255 characters\n  * @param {String} payload Bot defined invoice payload\n  * @param {String} providerToken Payment provider token\n  * @param {String} currency Three-letter ISO 4217 currency code\n  * @param {Array} prices Breakdown of prices\n  * @param {Object} [options] Additional Telegram query options\n  * @returns {Promise} The created invoice link as String on success.\n  * @see https://core.telegram.org/bots/api#createinvoicelink\n  */\n  createInvoiceLink(title, description, payload, providerToken, currency, prices, form = {}) {\n    form.title = title;\n    form.description = description;\n    form.payload = payload;\n    form.provider_token = providerToken;\n    form.currency = currency;\n    form.prices = stringify(prices);\n    return this._request('createInvoiceLink', { form });\n  }\n\n  /**\n  * Use this method to reply to shipping queries.\n  *\n  * If you sent an invoice requesting a shipping address and the parameter is_flexible was specified,\n  * the Bot API will send an [Update](https://core.telegram.org/bots/api#update) with a shipping_query field to the bot\n  *\n  * @param  {String} shippingQueryId  Unique identifier for the query to be answered\n  * @param  {Boolean} ok Specify if delivery of the product is possible\n  * @param  {Object} [options] Additional Telegram query options\n  * @return {Promise} On success, True is returned\n  * @see https://core.telegram.org/bots/api#answershippingquery\n  */\n  answerShippingQuery(shippingQueryId, ok, form = {}) {\n    form.shipping_query_id = shippingQueryId;\n    form.ok = ok;\n    form.shipping_options = stringify(form.shipping_options);\n    return this._request('answerShippingQuery', { form });\n  }\n\n  /**\n   * Use this method to respond to such pre-checkout queries\n   *\n   * Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of\n   * an [Update](https://core.telegram.org/bots/api#update) with the field *pre_checkout_query*.\n   *\n   * **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.\n   *\n   * @param  {String} preCheckoutQueryId  Unique identifier for the query to be answered\n   * @param  {Boolean} ok Specify if every order details are ok\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, True is returned\n   * @see https://core.telegram.org/bots/api#answerprecheckoutquery\n   */\n  answerPreCheckoutQuery(preCheckoutQueryId, ok, form = {}) {\n    form.pre_checkout_query_id = preCheckoutQueryId;\n    form.ok = ok;\n    return this._request('answerPreCheckoutQuery', { form });\n  }\n\n  /**\n   * Use this method to send a game.\n   *\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)\n   * @param  {String} gameShortName name of the game to be sent. Set up your games via `@BotFather`.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned\n   * @see https://core.telegram.org/bots/api#sendgame\n   */\n  sendGame(chatId, gameShortName, form = {}) {\n    form.chat_id = chatId;\n    form.game_short_name = gameShortName;\n    return this._request('sendGame', { form });\n  }\n\n  /**\n   * Use this method to set the score of the specified user in a game message.\n   *\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Number} score New score value, must be non-negative\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, if the message is not an inline message, the [Message](https://core.telegram.org/bots/api#message) is returned, otherwise True is returned\n   * @see https://core.telegram.org/bots/api#setgamescore\n   */\n  setGameScore(userId, score, form = {}) {\n    form.user_id = userId;\n    form.score = score;\n    return this._request('setGameScore', { form });\n  }\n\n  /**\n   * Use this method to get data for high score tables.\n   *\n   * Will return the score of the specified user and several of their neighbors in a game.\n   *\n   * @param  {Number} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise} On success, returns an Array of [GameHighScore](https://core.telegram.org/bots/api#gamehighscore) objects\n   * @see https://core.telegram.org/bots/api#getgamehighscores\n   */\n  getGameHighScores(userId, form = {}) {\n    form.user_id = userId;\n    return this._request('getGameHighScores', { form });\n  }\n\n\n  /**\n * Use this method to delete a message, including service messages, with the following limitations:\n * - A message can only be deleted if it was sent less than 48 hours ago.\n * - A dice message can only be deleted if it was sent more than 24 hours ago.\n * - Bots can delete outgoing messages in groups and supergroups.\n * - Bots can delete incoming messages in groups, supergroups and channels.\n * - Bots granted `can_post_messages` permissions can delete outgoing messages in channels.\n * - If the bot is an administrator of a group, it can delete any message there.\n * - If the bot has `can_delete_messages` permission in a supergroup, it can delete any message there.\n *\n * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n * @param  {Number} messageId  Unique identifier of the target message\n * @param  {Object} [options] Additional Telegram query options\n * @return {Promise} True on success\n * @see https://core.telegram.org/bots/api#deletemessage\n */\n  deleteMessage(chatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.message_id = messageId;\n    return this._request('deleteMessage', { form });\n  }\n\n  /**\n   * Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n   * @param  {Array<Number|String>} messageIds  Identifiers of 1-100 messages to delete. See deleteMessage for limitations on which messages can be deleted\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise<Boolean>} True on success\n   * @see https://core.telegram.org/bots/api#deletemessages\n   */\n  deleteMessages(chatId, messageIds, form = {}) {\n    form.chat_id = chatId;\n    form.message_ids = stringify(messageIds);\n    return this._request('deleteMessages', { form });\n  }\n\n}\n\nmodule.exports = TelegramBot;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/src/telegram.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/src/telegramPolling.js":
/*!*******************************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/src/telegramPolling.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/node-telegram-bot-api/src/errors.js\");\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/index.js\")('node-telegram-bot-api');\nconst deprecate = (__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/node-telegram-bot-api/src/utils.js\").deprecate);\nconst ANOTHER_WEB_HOOK_USED = 409;\n\n\nclass TelegramBotPolling {\n  /**\n   * Handles polling against the Telegram servers.\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  constructor(bot) {\n    this.bot = bot;\n    this.options = (typeof bot.options.polling === 'boolean') ? {} : bot.options.polling;\n    this.options.interval = (typeof this.options.interval === 'number') ? this.options.interval : 300;\n    this.options.params = (typeof this.options.params === 'object') ? this.options.params : {};\n    this.options.params.offset = (typeof this.options.params.offset === 'number') ? this.options.params.offset : 0;\n    this.options.params.timeout = (typeof this.options.params.timeout === 'number') ? this.options.params.timeout : 10;\n    if (typeof this.options.timeout === 'number') {\n      deprecate('`options.polling.timeout` is deprecated. Use `options.polling.params` instead.');\n      this.options.params.timeout = this.options.timeout;\n    }\n    this._lastUpdate = 0;\n    this._lastRequest = null;\n    this._abort = false;\n    this._pollingTimeout = null;\n  }\n\n  /**\n   * Start polling\n   * @param  {Object} [options]\n   * @param  {Object} [options.restart]\n   * @return {Promise}\n   */\n  start(options = {}) {\n    if (this._lastRequest) {\n      if (!options.restart) {\n        return Promise.resolve();\n      }\n      return this.stop({\n        cancel: true,\n        reason: 'Polling restart',\n      }).then(() => {\n        return this._polling();\n      });\n    }\n    return this._polling();\n  }\n\n  /**\n   * Stop polling\n   * @param  {Object} [options] Options\n   * @param  {Boolean} [options.cancel] Cancel current request\n   * @param  {String} [options.reason] Reason for stopping polling\n   * @return {Promise}\n   */\n  stop(options = {}) {\n    if (!this._lastRequest) {\n      return Promise.resolve();\n    }\n    const lastRequest = this._lastRequest;\n    this._lastRequest = null;\n    clearTimeout(this._pollingTimeout);\n    if (options.cancel) {\n      const reason = options.reason || 'Polling stop';\n      lastRequest.cancel(reason);\n      return Promise.resolve();\n    }\n    this._abort = true;\n    return lastRequest.finally(() => {\n      this._abort = false;\n    });\n  }\n\n  /**\n   * Return `true` if is polling. Otherwise, `false`.\n   */\n  isPolling() {\n    return !!this._lastRequest;\n  }\n\n  /**\n   * Handle error thrown during polling.\n   * @private\n   * @param  {Error} error\n   */\n  _error(error) {\n    if (!this.bot.listeners('polling_error').length) {\n      return console.error('error: [polling_error] %j', error); // eslint-disable-line no-console\n    }\n    return this.bot.emit('polling_error', error);\n  }\n\n  /**\n   * Invokes polling (with recursion!)\n   * @return {Promise} promise of the current request\n   * @private\n   */\n  _polling() {\n    this._lastRequest = this\n      ._getUpdates()\n      .then(updates => {\n        this._lastUpdate = Date.now();\n        debug('polling data %j', updates);\n        updates.forEach(update => {\n          this.options.params.offset = update.update_id + 1;\n          debug('updated offset: %s', this.options.params.offset);\n          try {\n            this.bot.processUpdate(update);\n          } catch (err) {\n            err._processing = true;\n            throw err;\n          }\n        });\n        return null;\n      })\n      .catch(err => {\n        debug('polling error: %s', err.message);\n        if (!err._processing) {\n          return this._error(err);\n        }\n        delete err._processing;\n        /*\n         * An error occured while processing the items,\n         * i.e. in `this.bot.processUpdate()` above.\n         * We need to mark the already-processed items\n         * to avoid fetching them again once the application\n         * is restarted, or moves to next polling interval\n         * (in cases where unhandled rejections do not terminate\n         * the process).\n         * See https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067\n         */\n        if (!this.bot.options.badRejection) {\n          return this._error(err);\n        }\n        const opts = {\n          offset: this.options.params.offset,\n          limit: 1,\n          timeout: 0,\n        };\n        return this.bot.getUpdates(opts).then(() => {\n          return this._error(err);\n        }).catch(requestErr => {\n          /*\n           * We have been unable to handle this error.\n           * We have to log this to stderr to ensure devops\n           * understands that they may receive already-processed items\n           * on app restart.\n           * We simply can not rescue this situation, emit \"error\"\n           * event, with the hope that the application exits.\n           */\n          /* eslint-disable no-console */\n          const bugUrl = 'https://github.com/yagop/node-telegram-bot-api/issues/36#issuecomment-268532067';\n          console.error('error: Internal handling of The Offset Infinite Loop failed');\n          console.error(`error: Due to error '${requestErr}'`);\n          console.error('error: You may receive already-processed updates on app restart');\n          console.error(`error: Please see ${bugUrl} for more information`);\n          /* eslint-enable no-console */\n          return this.bot.emit('error', new errors.FatalError(err));\n        });\n      })\n      .finally(() => {\n        if (this._abort) {\n          debug('Polling is aborted!');\n        } else {\n          debug('setTimeout for %s miliseconds', this.options.interval);\n          this._pollingTimeout = setTimeout(() => this._polling(), this.options.interval);\n        }\n      });\n    return this._lastRequest;\n  }\n\n  /**\n   * Unset current webhook. Used when we detect that a webhook has been set\n   * and we are trying to poll. Polling and WebHook are mutually exclusive.\n   * @see https://core.telegram.org/bots/api#getting-updates\n   * @private\n   */\n  _unsetWebHook() {\n    debug('unsetting webhook');\n    return this.bot._request('setWebHook');\n  }\n\n  /**\n   * Retrieve updates\n   */\n  _getUpdates() {\n    debug('polling with options: %j', this.options.params);\n    return this.bot.getUpdates(this.options.params)\n      .catch(err => {\n        if (err.response && err.response.statusCode === ANOTHER_WEB_HOOK_USED) {\n          return this._unsetWebHook().then(() => {\n            return this.bot.getUpdates(this.options.params);\n          });\n        }\n        throw err;\n      });\n  }\n}\n\nmodule.exports = TelegramBotPolling;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/src/telegramPolling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/src/telegramWebHook.js":
/*!*******************************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/src/telegramWebHook.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/node-telegram-bot-api/src/errors.js\");\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/node-telegram-bot-api/node_modules/debug/src/index.js\")('node-telegram-bot-api');\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst bl = __webpack_require__(/*! bl */ \"(rsc)/./node_modules/bl/bl.js\");\n\nclass TelegramBotWebHook {\n  /**\n   * Sets up a webhook to receive updates\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  constructor(bot) {\n    this.bot = bot;\n    this.options = (typeof bot.options.webHook === 'boolean') ? {} : bot.options.webHook;\n    this.options.host = this.options.host || '0.0.0.0';\n    this.options.port = this.options.port || 8443;\n    this.options.https = this.options.https || {};\n    this.options.healthEndpoint = this.options.healthEndpoint || '/healthz';\n    this._healthRegex = new RegExp(this.options.healthEndpoint);\n    this._webServer = null;\n    this._open = false;\n    this._requestListener = this._requestListener.bind(this);\n    this._parseBody = this._parseBody.bind(this);\n\n    if (this.options.key && this.options.cert) {\n      debug('HTTPS WebHook enabled (by key/cert)');\n      this.options.https.key = fs.readFileSync(this.options.key);\n      this.options.https.cert = fs.readFileSync(this.options.cert);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (this.options.pfx) {\n      debug('HTTPS WebHook enabled (by pfx)');\n      this.options.https.pfx = fs.readFileSync(this.options.pfx);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (Object.keys(this.options.https).length) {\n      debug('HTTPS WebHook enabled by (https)');\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else {\n      debug('HTTP WebHook enabled');\n      this._webServer = http.createServer(this._requestListener);\n    }\n  }\n\n  /**\n   * Open WebHook by listening on the port\n   * @return {Promise}\n   */\n  open() {\n    if (this.isOpen()) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      this._webServer.listen(this.options.port, this.options.host, () => {\n        debug('WebHook listening on port %s', this.options.port);\n        this._open = true;\n        return resolve();\n      });\n\n      this._webServer.once('error', (err) => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Close the webHook\n   * @return {Promise}\n   */\n  close() {\n    if (!this.isOpen()) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      this._webServer.close(error => {\n        if (error) return reject(error);\n        this._open = false;\n        return resolve();\n      });\n    });\n  }\n\n  /**\n   * Return `true` if server is listening. Otherwise, `false`.\n   */\n  isOpen() {\n    // NOTE: Since `http.Server.listening` was added in v5.7.0\n    // and we still need to support Node v4,\n    // we are going to fallback to 'this._open'.\n    // The following LOC would suffice for newer versions of Node.js\n    // return this._webServer.listening;\n    return this._open;\n  }\n\n  /**\n   * Handle error thrown during processing of webhook request.\n   * @private\n   * @param  {Error} error\n   */\n  _error(error) {\n    if (!this.bot.listeners('webhook_error').length) {\n      return console.error('error: [webhook_error] %j', error); // eslint-disable-line no-console\n    }\n    return this.bot.emit('webhook_error', error);\n  }\n\n  /**\n   * Handle request body by passing it to 'callback'\n   * @private\n   */\n  _parseBody(error, body) {\n    if (error) {\n      return this._error(new errors.FatalError(error));\n    }\n\n    let data;\n    try {\n      data = JSON.parse(body.toString());\n    } catch (parseError) {\n      return this._error(new errors.ParseError(parseError.message));\n    }\n\n    return this.bot.processUpdate(data);\n  }\n\n  /**\n   * Listener for 'request' event on server\n   * @private\n   * @see https://nodejs.org/docs/latest/api/http.html#http_http_createserver_requestlistener\n   * @see https://nodejs.org/docs/latest/api/https.html#https_https_createserver_options_requestlistener\n   */\n  _requestListener(req, res) {\n    debug('WebHook request URL: %s', req.url);\n    debug('WebHook request headers: %j', req.headers);\n\n    if (req.url.indexOf(this.bot.token) !== -1) {\n      if (req.method !== 'POST') {\n        debug('WebHook request isn\\'t a POST');\n        res.statusCode = 418; // I'm a teabot!\n        res.end();\n      } else {\n        req\n          .pipe(bl(this._parseBody))\n          .on('finish', () => res.end('OK'));\n      }\n    } else if (this._healthRegex.test(req.url)) {\n      debug('WebHook health check passed');\n      res.statusCode = 200;\n      res.end('OK');\n    } else {\n      debug('WebHook request unauthorized');\n      res.statusCode = 401;\n      res.end();\n    }\n  }\n}\n\nmodule.exports = TelegramBotWebHook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/src/telegramWebHook.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-telegram-bot-api/src/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/node-telegram-bot-api/src/utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const util = __webpack_require__(/*! util */ \"util\");\n// Native deprecation warning\nexports.deprecate = (msg) => util.deprecate(() => { }, msg, 'node-telegram-bot-api')();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS10ZWxlZ3JhbS1ib3QtYXBpL3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsa0JBQU07QUFDM0I7QUFDQSxpQkFBaUIsb0NBQW9DIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGRhcnNoXFxPbmVEcml2ZVxcRGVza3RvcFxcQ29kZVxcTUVSTiBXZWIgRGV2XFxHcmFwaGlcXG5vZGVfbW9kdWxlc1xcbm9kZS10ZWxlZ3JhbS1ib3QtYXBpXFxzcmNcXHV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG4vLyBOYXRpdmUgZGVwcmVjYXRpb24gd2FybmluZ1xuZXhwb3J0cy5kZXByZWNhdGUgPSAobXNnKSA9PiB1dGlsLmRlcHJlY2F0ZSgoKSA9PiB7IH0sIG1zZywgJ25vZGUtdGVsZWdyYW0tYm90LWFwaScpKCk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-telegram-bot-api/src/utils.js\n");

/***/ })

};
;