"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tough-cookie";
exports.ids = ["vendor-chunks/tough-cookie"];
exports.modules = {

/***/ "(rsc)/./node_modules/tough-cookie/dist/cookie/canonicalDomain.js":
/*!******************************************************************!*\
  !*** ./node_modules/tough-cookie/dist/cookie/canonicalDomain.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.canonicalDomain = canonicalDomain;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/constants.js\");\n/**\n * Normalizes a domain to lowercase and punycode-encoded.\n * Runtime-agnostic equivalent to node's `domainToASCII`.\n * @see https://nodejs.org/docs/latest-v22.x/api/url.html#urldomaintoasciidomain\n */\nfunction domainToASCII(domain) {\n    return new URL(`http://${domain}`).hostname;\n}\n/**\n * Transforms a domain name into a canonical domain name. The canonical domain name is a domain name\n * that has been trimmed, lowercased, stripped of leading dot, and optionally punycode-encoded\n * ({@link https://www.rfc-editor.org/rfc/rfc6265.html#section-5.1.2 | Section 5.1.2 of RFC 6265}). For\n * the most part, this function is idempotent (calling the function with the output from a previous call\n * returns the same output).\n *\n * @remarks\n * A canonicalized host name is the string generated by the following\n * algorithm:\n *\n * 1.  Convert the host name to a sequence of individual domain name\n *     labels.\n *\n * 2.  Convert each label that is not a Non-Reserved LDH (NR-LDH) label,\n *     to an A-label (see Section 2.3.2.1 of [RFC5890] for the former\n *     and latter), or to a \"punycode label\" (a label resulting from the\n *     \"ToASCII\" conversion in Section 4 of [RFC3490]), as appropriate\n *     (see Section 6.3 of this specification).\n *\n * 3.  Concatenate the resulting labels, separated by a %x2E (\".\")\n *     character.\n *\n * @example\n * ```\n * canonicalDomain('.EXAMPLE.com') === 'example.com'\n * ```\n *\n * @param domainName - the domain name to generate the canonical domain from\n * @public\n */\nfunction canonicalDomain(domainName) {\n    if (domainName == null) {\n        return undefined;\n    }\n    let str = domainName.trim().replace(/^\\./, ''); // S4.1.2.3 & S5.2.3: ignore leading .\n    if (constants_1.IP_V6_REGEX_OBJECT.test(str)) {\n        if (!str.startsWith('[')) {\n            str = '[' + str;\n        }\n        if (!str.endsWith(']')) {\n            str = str + ']';\n        }\n        return domainToASCII(str).slice(1, -1); // remove [ and ]\n    }\n    // convert to IDN if any non-ASCII characters\n    // eslint-disable-next-line no-control-regex\n    if (/[^\\u0001-\\u007f]/.test(str)) {\n        return domainToASCII(str);\n    }\n    // ASCII-only domain - not canonicalized with new URL() because it may be a malformed URL\n    return str.toLowerCase();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3QvY29va2llL2Nhbm9uaWNhbERvbWFpbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIsb0JBQW9CLG1CQUFPLENBQUMsK0VBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLE9BQU87QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLDRGQUE0RjtBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZGFyc2hcXE9uZURyaXZlXFxEZXNrdG9wXFxDb2RlXFxNRVJOIFdlYiBEZXZcXEdyYXBoaVxcbm9kZV9tb2R1bGVzXFx0b3VnaC1jb29raWVcXGRpc3RcXGNvb2tpZVxcY2Fub25pY2FsRG9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jYW5vbmljYWxEb21haW4gPSBjYW5vbmljYWxEb21haW47XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbi8qKlxuICogTm9ybWFsaXplcyBhIGRvbWFpbiB0byBsb3dlcmNhc2UgYW5kIHB1bnljb2RlLWVuY29kZWQuXG4gKiBSdW50aW1lLWFnbm9zdGljIGVxdWl2YWxlbnQgdG8gbm9kZSdzIGBkb21haW5Ub0FTQ0lJYC5cbiAqIEBzZWUgaHR0cHM6Ly9ub2RlanMub3JnL2RvY3MvbGF0ZXN0LXYyMi54L2FwaS91cmwuaHRtbCN1cmxkb21haW50b2FzY2lpZG9tYWluXG4gKi9cbmZ1bmN0aW9uIGRvbWFpblRvQVNDSUkoZG9tYWluKSB7XG4gICAgcmV0dXJuIG5ldyBVUkwoYGh0dHA6Ly8ke2RvbWFpbn1gKS5ob3N0bmFtZTtcbn1cbi8qKlxuICogVHJhbnNmb3JtcyBhIGRvbWFpbiBuYW1lIGludG8gYSBjYW5vbmljYWwgZG9tYWluIG5hbWUuIFRoZSBjYW5vbmljYWwgZG9tYWluIG5hbWUgaXMgYSBkb21haW4gbmFtZVxuICogdGhhdCBoYXMgYmVlbiB0cmltbWVkLCBsb3dlcmNhc2VkLCBzdHJpcHBlZCBvZiBsZWFkaW5nIGRvdCwgYW5kIG9wdGlvbmFsbHkgcHVueWNvZGUtZW5jb2RlZFxuICogKHtAbGluayBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjNjI2NS5odG1sI3NlY3Rpb24tNS4xLjIgfCBTZWN0aW9uIDUuMS4yIG9mIFJGQyA2MjY1fSkuIEZvclxuICogdGhlIG1vc3QgcGFydCwgdGhpcyBmdW5jdGlvbiBpcyBpZGVtcG90ZW50IChjYWxsaW5nIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBvdXRwdXQgZnJvbSBhIHByZXZpb3VzIGNhbGxcbiAqIHJldHVybnMgdGhlIHNhbWUgb3V0cHV0KS5cbiAqXG4gKiBAcmVtYXJrc1xuICogQSBjYW5vbmljYWxpemVkIGhvc3QgbmFtZSBpcyB0aGUgc3RyaW5nIGdlbmVyYXRlZCBieSB0aGUgZm9sbG93aW5nXG4gKiBhbGdvcml0aG06XG4gKlxuICogMS4gIENvbnZlcnQgdGhlIGhvc3QgbmFtZSB0byBhIHNlcXVlbmNlIG9mIGluZGl2aWR1YWwgZG9tYWluIG5hbWVcbiAqICAgICBsYWJlbHMuXG4gKlxuICogMi4gIENvbnZlcnQgZWFjaCBsYWJlbCB0aGF0IGlzIG5vdCBhIE5vbi1SZXNlcnZlZCBMREggKE5SLUxESCkgbGFiZWwsXG4gKiAgICAgdG8gYW4gQS1sYWJlbCAoc2VlIFNlY3Rpb24gMi4zLjIuMSBvZiBbUkZDNTg5MF0gZm9yIHRoZSBmb3JtZXJcbiAqICAgICBhbmQgbGF0dGVyKSwgb3IgdG8gYSBcInB1bnljb2RlIGxhYmVsXCIgKGEgbGFiZWwgcmVzdWx0aW5nIGZyb20gdGhlXG4gKiAgICAgXCJUb0FTQ0lJXCIgY29udmVyc2lvbiBpbiBTZWN0aW9uIDQgb2YgW1JGQzM0OTBdKSwgYXMgYXBwcm9wcmlhdGVcbiAqICAgICAoc2VlIFNlY3Rpb24gNi4zIG9mIHRoaXMgc3BlY2lmaWNhdGlvbikuXG4gKlxuICogMy4gIENvbmNhdGVuYXRlIHRoZSByZXN1bHRpbmcgbGFiZWxzLCBzZXBhcmF0ZWQgYnkgYSAleDJFIChcIi5cIilcbiAqICAgICBjaGFyYWN0ZXIuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogY2Fub25pY2FsRG9tYWluKCcuRVhBTVBMRS5jb20nKSA9PT0gJ2V4YW1wbGUuY29tJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIGRvbWFpbk5hbWUgLSB0aGUgZG9tYWluIG5hbWUgdG8gZ2VuZXJhdGUgdGhlIGNhbm9uaWNhbCBkb21haW4gZnJvbVxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBjYW5vbmljYWxEb21haW4oZG9tYWluTmFtZSkge1xuICAgIGlmIChkb21haW5OYW1lID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgbGV0IHN0ciA9IGRvbWFpbk5hbWUudHJpbSgpLnJlcGxhY2UoL15cXC4vLCAnJyk7IC8vIFM0LjEuMi4zICYgUzUuMi4zOiBpZ25vcmUgbGVhZGluZyAuXG4gICAgaWYgKGNvbnN0YW50c18xLklQX1Y2X1JFR0VYX09CSkVDVC50ZXN0KHN0cikpIHtcbiAgICAgICAgaWYgKCFzdHIuc3RhcnRzV2l0aCgnWycpKSB7XG4gICAgICAgICAgICBzdHIgPSAnWycgKyBzdHI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdHIuZW5kc1dpdGgoJ10nKSkge1xuICAgICAgICAgICAgc3RyID0gc3RyICsgJ10nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb21haW5Ub0FTQ0lJKHN0cikuc2xpY2UoMSwgLTEpOyAvLyByZW1vdmUgWyBhbmQgXVxuICAgIH1cbiAgICAvLyBjb252ZXJ0IHRvIElETiBpZiBhbnkgbm9uLUFTQ0lJIGNoYXJhY3RlcnNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuICAgIGlmICgvW15cXHUwMDAxLVxcdTAwN2ZdLy50ZXN0KHN0cikpIHtcbiAgICAgICAgcmV0dXJuIGRvbWFpblRvQVNDSUkoc3RyKTtcbiAgICB9XG4gICAgLy8gQVNDSUktb25seSBkb21haW4gLSBub3QgY2Fub25pY2FsaXplZCB3aXRoIG5ldyBVUkwoKSBiZWNhdXNlIGl0IG1heSBiZSBhIG1hbGZvcm1lZCBVUkxcbiAgICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/cookie/canonicalDomain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/cookie/constants.js":
/*!************************************************************!*\
  !*** ./node_modules/tough-cookie/dist/cookie/constants.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IP_V6_REGEX_OBJECT = exports.PrefixSecurityEnum = void 0;\n/**\n * Cookie prefixes are a way to indicate that a given cookie was set with a set of attributes simply by inspecting the\n * first few characters of the cookie's name. These are defined in {@link https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-13#section-4.1.3 | RFC6265bis - Section 4.1.3}.\n *\n * The following values can be used to configure how a {@link CookieJar} enforces attribute restrictions for Cookie prefixes:\n *\n * - `silent` - Enable cookie prefix checking but silently ignores the cookie if conditions are not met. This is the default configuration for a {@link CookieJar}.\n *\n * - `strict` - Enables cookie prefix checking and will raise an error if conditions are not met.\n *\n * - `unsafe-disabled` - Disables cookie prefix checking.\n * @public\n */\nexports.PrefixSecurityEnum = Object.freeze({\n    SILENT: 'silent',\n    STRICT: 'strict',\n    DISABLED: 'unsafe-disabled',\n});\nconst IP_V6_REGEX = `\n\\\\[?(?:\n(?:[a-fA-F\\\\d]{1,4}:){7}(?:[a-fA-F\\\\d]{1,4}|:)|\n(?:[a-fA-F\\\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|:[a-fA-F\\\\d]{1,4}|:)|\n(?:[a-fA-F\\\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,2}|:)|\n(?:[a-fA-F\\\\d]{1,4}:){4}(?:(?::[a-fA-F\\\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,3}|:)|\n(?:[a-fA-F\\\\d]{1,4}:){3}(?:(?::[a-fA-F\\\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,4}|:)|\n(?:[a-fA-F\\\\d]{1,4}:){2}(?:(?::[a-fA-F\\\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,5}|:)|\n(?:[a-fA-F\\\\d]{1,4}:){1}(?:(?::[a-fA-F\\\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,6}|:)|\n(?::(?:(?::[a-fA-F\\\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,7}|:))\n)(?:%[0-9a-zA-Z]{1,})?\\\\]?\n`\n    .replace(/\\s*\\/\\/.*$/gm, '')\n    .replace(/\\n/g, '')\n    .trim();\nexports.IP_V6_REGEX_OBJECT = new RegExp(`^${IP_V6_REGEX}$`);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3QvY29va2llL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRywwQkFBMEI7QUFDdkQ7QUFDQTtBQUNBLG9FQUFvRSx3SEFBd0g7QUFDNUw7QUFDQSx3REFBd0QsaUJBQWlCO0FBQ3pFO0FBQ0Esa0pBQWtKLGdCQUFnQjtBQUNsSztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxlQUFlLElBQUksR0FBRyxFQUFFLGVBQWUsSUFBSTtBQUMzQyxlQUFlLElBQUksR0FBRyxFQUFFLCtGQUErRixFQUFFLGNBQWMsSUFBSTtBQUMzSSxlQUFlLElBQUksR0FBRyxFQUFFLGdHQUFnRyxFQUFFLGlCQUFpQixJQUFJLEVBQUUsSUFBSTtBQUNySixlQUFlLElBQUksR0FBRyxFQUFFLG1CQUFtQixJQUFJLEVBQUUsSUFBSSw2RkFBNkYsRUFBRSxpQkFBaUIsSUFBSSxFQUFFLElBQUk7QUFDL0ssZUFBZSxJQUFJLEdBQUcsRUFBRSxtQkFBbUIsSUFBSSxFQUFFLElBQUksNkZBQTZGLEVBQUUsaUJBQWlCLElBQUksRUFBRSxJQUFJO0FBQy9LLGVBQWUsSUFBSSxHQUFHLEVBQUUsbUJBQW1CLElBQUksRUFBRSxJQUFJLDZGQUE2RixFQUFFLGlCQUFpQixJQUFJLEVBQUUsSUFBSTtBQUMvSyxlQUFlLElBQUksR0FBRyxFQUFFLG1CQUFtQixJQUFJLEVBQUUsSUFBSSw2RkFBNkYsRUFBRSxpQkFBaUIsSUFBSSxFQUFFLElBQUk7QUFDL0ssdUJBQXVCLElBQUksRUFBRSxJQUFJLDZGQUE2RixFQUFFLGlCQUFpQixJQUFJLEVBQUUsSUFBSTtBQUMzSixpQkFBaUIsR0FBRztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixrQkFBa0IsWUFBWSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxkYXJzaFxcT25lRHJpdmVcXERlc2t0b3BcXENvZGVcXE1FUk4gV2ViIERldlxcR3JhcGhpXFxub2RlX21vZHVsZXNcXHRvdWdoLWNvb2tpZVxcZGlzdFxcY29va2llXFxjb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklQX1Y2X1JFR0VYX09CSkVDVCA9IGV4cG9ydHMuUHJlZml4U2VjdXJpdHlFbnVtID0gdm9pZCAwO1xuLyoqXG4gKiBDb29raWUgcHJlZml4ZXMgYXJlIGEgd2F5IHRvIGluZGljYXRlIHRoYXQgYSBnaXZlbiBjb29raWUgd2FzIHNldCB3aXRoIGEgc2V0IG9mIGF0dHJpYnV0ZXMgc2ltcGx5IGJ5IGluc3BlY3RpbmcgdGhlXG4gKiBmaXJzdCBmZXcgY2hhcmFjdGVycyBvZiB0aGUgY29va2llJ3MgbmFtZS4gVGhlc2UgYXJlIGRlZmluZWQgaW4ge0BsaW5rIGh0dHBzOi8vZGF0YXRyYWNrZXIuaWV0Zi5vcmcvZG9jL2h0bWwvZHJhZnQtaWV0Zi1odHRwYmlzLXJmYzYyNjViaXMtMTMjc2VjdGlvbi00LjEuMyB8IFJGQzYyNjViaXMgLSBTZWN0aW9uIDQuMS4zfS5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIHZhbHVlcyBjYW4gYmUgdXNlZCB0byBjb25maWd1cmUgaG93IGEge0BsaW5rIENvb2tpZUphcn0gZW5mb3JjZXMgYXR0cmlidXRlIHJlc3RyaWN0aW9ucyBmb3IgQ29va2llIHByZWZpeGVzOlxuICpcbiAqIC0gYHNpbGVudGAgLSBFbmFibGUgY29va2llIHByZWZpeCBjaGVja2luZyBidXQgc2lsZW50bHkgaWdub3JlcyB0aGUgY29va2llIGlmIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQuIFRoaXMgaXMgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBmb3IgYSB7QGxpbmsgQ29va2llSmFyfS5cbiAqXG4gKiAtIGBzdHJpY3RgIC0gRW5hYmxlcyBjb29raWUgcHJlZml4IGNoZWNraW5nIGFuZCB3aWxsIHJhaXNlIGFuIGVycm9yIGlmIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQuXG4gKlxuICogLSBgdW5zYWZlLWRpc2FibGVkYCAtIERpc2FibGVzIGNvb2tpZSBwcmVmaXggY2hlY2tpbmcuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMuUHJlZml4U2VjdXJpdHlFbnVtID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgU0lMRU5UOiAnc2lsZW50JyxcbiAgICBTVFJJQ1Q6ICdzdHJpY3QnLFxuICAgIERJU0FCTEVEOiAndW5zYWZlLWRpc2FibGVkJyxcbn0pO1xuY29uc3QgSVBfVjZfUkVHRVggPSBgXG5cXFxcWz8oPzpcbig/OlthLWZBLUZcXFxcZF17MSw0fTopezd9KD86W2EtZkEtRlxcXFxkXXsxLDR9fDopfFxuKD86W2EtZkEtRlxcXFxkXXsxLDR9Oil7Nn0oPzooPzoyNVswLTVdfDJbMC00XVxcXFxkfDFcXFxcZFxcXFxkfFsxLTldXFxcXGR8XFxcXGQpKD86XFxcXC4oPzoyNVswLTVdfDJbMC00XVxcXFxkfDFcXFxcZFxcXFxkfFsxLTldXFxcXGR8XFxcXGQpKXszfXw6W2EtZkEtRlxcXFxkXXsxLDR9fDopfFxuKD86W2EtZkEtRlxcXFxkXXsxLDR9Oil7NX0oPzo6KD86MjVbMC01XXwyWzAtNF1cXFxcZHwxXFxcXGRcXFxcZHxbMS05XVxcXFxkfFxcXFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXFxcZHwxXFxcXGRcXFxcZHxbMS05XVxcXFxkfFxcXFxkKSl7M318KD86OlthLWZBLUZcXFxcZF17MSw0fSl7MSwyfXw6KXxcbig/OlthLWZBLUZcXFxcZF17MSw0fTopezR9KD86KD86OlthLWZBLUZcXFxcZF17MSw0fSl7MCwxfTooPzoyNVswLTVdfDJbMC00XVxcXFxkfDFcXFxcZFxcXFxkfFsxLTldXFxcXGR8XFxcXGQpKD86XFxcXC4oPzoyNVswLTVdfDJbMC00XVxcXFxkfDFcXFxcZFxcXFxkfFsxLTldXFxcXGR8XFxcXGQpKXszfXwoPzo6W2EtZkEtRlxcXFxkXXsxLDR9KXsxLDN9fDopfFxuKD86W2EtZkEtRlxcXFxkXXsxLDR9Oil7M30oPzooPzo6W2EtZkEtRlxcXFxkXXsxLDR9KXswLDJ9Oig/OjI1WzAtNV18MlswLTRdXFxcXGR8MVxcXFxkXFxcXGR8WzEtOV1cXFxcZHxcXFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxcXGR8MVxcXFxkXFxcXGR8WzEtOV1cXFxcZHxcXFxcZCkpezN9fCg/OjpbYS1mQS1GXFxcXGRdezEsNH0pezEsNH18Oil8XG4oPzpbYS1mQS1GXFxcXGRdezEsNH06KXsyfSg/Oig/OjpbYS1mQS1GXFxcXGRdezEsNH0pezAsM306KD86MjVbMC01XXwyWzAtNF1cXFxcZHwxXFxcXGRcXFxcZHxbMS05XVxcXFxkfFxcXFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXFxcZHwxXFxcXGRcXFxcZHxbMS05XVxcXFxkfFxcXFxkKSl7M318KD86OlthLWZBLUZcXFxcZF17MSw0fSl7MSw1fXw6KXxcbig/OlthLWZBLUZcXFxcZF17MSw0fTopezF9KD86KD86OlthLWZBLUZcXFxcZF17MSw0fSl7MCw0fTooPzoyNVswLTVdfDJbMC00XVxcXFxkfDFcXFxcZFxcXFxkfFsxLTldXFxcXGR8XFxcXGQpKD86XFxcXC4oPzoyNVswLTVdfDJbMC00XVxcXFxkfDFcXFxcZFxcXFxkfFsxLTldXFxcXGR8XFxcXGQpKXszfXwoPzo6W2EtZkEtRlxcXFxkXXsxLDR9KXsxLDZ9fDopfFxuKD86Oig/Oig/OjpbYS1mQS1GXFxcXGRdezEsNH0pezAsNX06KD86MjVbMC01XXwyWzAtNF1cXFxcZHwxXFxcXGRcXFxcZHxbMS05XVxcXFxkfFxcXFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXFxcZHwxXFxcXGRcXFxcZHxbMS05XVxcXFxkfFxcXFxkKSl7M318KD86OlthLWZBLUZcXFxcZF17MSw0fSl7MSw3fXw6KSlcbikoPzolWzAtOWEtekEtWl17MSx9KT9cXFxcXT9cbmBcbiAgICAucmVwbGFjZSgvXFxzKlxcL1xcLy4qJC9nbSwgJycpXG4gICAgLnJlcGxhY2UoL1xcbi9nLCAnJylcbiAgICAudHJpbSgpO1xuZXhwb3J0cy5JUF9WNl9SRUdFWF9PQkpFQ1QgPSBuZXcgUmVnRXhwKGBeJHtJUF9WNl9SRUdFWH0kYCk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/cookie/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/cookie/cookie.js":
/*!*********************************************************!*\
  !*** ./node_modules/tough-cookie/dist/cookie/cookie.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Cookie = void 0;\n/*!\n * Copyright (c) 2015-2020, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\nconst getPublicSuffix_1 = __webpack_require__(/*! ../getPublicSuffix */ \"(rsc)/./node_modules/tough-cookie/dist/getPublicSuffix.js\");\nconst validators = __importStar(__webpack_require__(/*! ../validators */ \"(rsc)/./node_modules/tough-cookie/dist/validators.js\"));\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/tough-cookie/dist/utils.js\");\nconst formatDate_1 = __webpack_require__(/*! ./formatDate */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/formatDate.js\");\nconst parseDate_1 = __webpack_require__(/*! ./parseDate */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/parseDate.js\");\nconst canonicalDomain_1 = __webpack_require__(/*! ./canonicalDomain */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/canonicalDomain.js\");\n// From RFC6265 S4.1.1\n// note that it excludes \\x3B \";\"\nconst COOKIE_OCTETS = /^[\\x21\\x23-\\x2B\\x2D-\\x3A\\x3C-\\x5B\\x5D-\\x7E]+$/;\n// RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or \";\"'\n// Note ';' is \\x3B\nconst PATH_VALUE = /[\\x20-\\x3A\\x3C-\\x7E]+/;\n// eslint-disable-next-line no-control-regex\nconst CONTROL_CHARS = /[\\x00-\\x1F]/;\n// From Chromium // '\\r', '\\n' and '\\0' should be treated as a terminator in\n// the \"relaxed\" mode, see:\n// https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60\nconst TERMINATORS = ['\\n', '\\r', '\\0'];\nfunction trimTerminator(str) {\n    if (validators.isEmptyString(str))\n        return str;\n    for (let t = 0; t < TERMINATORS.length; t++) {\n        const terminator = TERMINATORS[t];\n        const terminatorIdx = terminator ? str.indexOf(terminator) : -1;\n        if (terminatorIdx !== -1) {\n            str = str.slice(0, terminatorIdx);\n        }\n    }\n    return str;\n}\nfunction parseCookiePair(cookiePair, looseMode) {\n    cookiePair = trimTerminator(cookiePair);\n    let firstEq = cookiePair.indexOf('=');\n    if (looseMode) {\n        if (firstEq === 0) {\n            // '=' is immediately at start\n            cookiePair = cookiePair.substring(1);\n            firstEq = cookiePair.indexOf('='); // might still need to split on '='\n        }\n    }\n    else {\n        // non-loose mode\n        if (firstEq <= 0) {\n            // no '=' or is at start\n            return undefined; // needs to have non-empty \"cookie-name\"\n        }\n    }\n    let cookieName, cookieValue;\n    if (firstEq <= 0) {\n        cookieName = '';\n        cookieValue = cookiePair.trim();\n    }\n    else {\n        cookieName = cookiePair.slice(0, firstEq).trim();\n        cookieValue = cookiePair.slice(firstEq + 1).trim();\n    }\n    if (CONTROL_CHARS.test(cookieName) || CONTROL_CHARS.test(cookieValue)) {\n        return undefined;\n    }\n    const c = new Cookie();\n    c.key = cookieName;\n    c.value = cookieValue;\n    return c;\n}\nfunction parse(str, options) {\n    if (validators.isEmptyString(str) || !validators.isString(str)) {\n        return undefined;\n    }\n    str = str.trim();\n    // We use a regex to parse the \"name-value-pair\" part of S5.2\n    const firstSemi = str.indexOf(';'); // S5.2 step 1\n    const cookiePair = firstSemi === -1 ? str : str.slice(0, firstSemi);\n    const c = parseCookiePair(cookiePair, options?.loose ?? false);\n    if (!c) {\n        return undefined;\n    }\n    if (firstSemi === -1) {\n        return c;\n    }\n    // S5.2.3 \"unparsed-attributes consist of the remainder of the set-cookie-string\n    // (including the %x3B (\";\") in question).\" plus later on in the same section\n    // \"discard the first \";\" and trim\".\n    const unparsed = str.slice(firstSemi + 1).trim();\n    // \"If the unparsed-attributes string is empty, skip the rest of these\n    // steps.\"\n    if (unparsed.length === 0) {\n        return c;\n    }\n    /*\n     * S5.2 says that when looping over the items \"[p]rocess the attribute-name\n     * and attribute-value according to the requirements in the following\n     * subsections\" for every item.  Plus, for many of the individual attributes\n     * in S5.3 it says to use the \"attribute-value of the last attribute in the\n     * cookie-attribute-list\".  Therefore, in this implementation, we overwrite\n     * the previous value.\n     */\n    const cookie_avs = unparsed.split(';');\n    while (cookie_avs.length) {\n        const av = (cookie_avs.shift() ?? '').trim();\n        if (av.length === 0) {\n            // happens if \";;\" appears\n            continue;\n        }\n        const av_sep = av.indexOf('=');\n        let av_key, av_value;\n        if (av_sep === -1) {\n            av_key = av;\n            av_value = null;\n        }\n        else {\n            av_key = av.slice(0, av_sep);\n            av_value = av.slice(av_sep + 1);\n        }\n        av_key = av_key.trim().toLowerCase();\n        if (av_value) {\n            av_value = av_value.trim();\n        }\n        switch (av_key) {\n            case 'expires': // S5.2.1\n                if (av_value) {\n                    const exp = (0, parseDate_1.parseDate)(av_value);\n                    // \"If the attribute-value failed to parse as a cookie date, ignore the\n                    // cookie-av.\"\n                    if (exp) {\n                        // over and underflow not realistically a concern: V8's getTime() seems to\n                        // store something larger than a 32-bit time_t (even with 32-bit node)\n                        c.expires = exp;\n                    }\n                }\n                break;\n            case 'max-age': // S5.2.2\n                if (av_value) {\n                    // \"If the first character of the attribute-value is not a DIGIT or a \"-\"\n                    // character ...[or]... If the remainder of attribute-value contains a\n                    // non-DIGIT character, ignore the cookie-av.\"\n                    if (/^-?[0-9]+$/.test(av_value)) {\n                        const delta = parseInt(av_value, 10);\n                        // \"If delta-seconds is less than or equal to zero (0), let expiry-time\n                        // be the earliest representable date and time.\"\n                        c.setMaxAge(delta);\n                    }\n                }\n                break;\n            case 'domain': // S5.2.3\n                // \"If the attribute-value is empty, the behavior is undefined.  However,\n                // the user agent SHOULD ignore the cookie-av entirely.\"\n                if (av_value) {\n                    // S5.2.3 \"Let cookie-domain be the attribute-value without the leading %x2E\n                    // (\".\") character.\"\n                    const domain = av_value.trim().replace(/^\\./, '');\n                    if (domain) {\n                        // \"Convert the cookie-domain to lower case.\"\n                        c.domain = domain.toLowerCase();\n                    }\n                }\n                break;\n            case 'path': // S5.2.4\n                /*\n                 * \"If the attribute-value is empty or if the first character of the\n                 * attribute-value is not %x2F (\"/\"):\n                 *   Let cookie-path be the default-path.\n                 * Otherwise:\n                 *   Let cookie-path be the attribute-value.\"\n                 *\n                 * We'll represent the default-path as null since it depends on the\n                 * context of the parsing.\n                 */\n                c.path = av_value && av_value[0] === '/' ? av_value : null;\n                break;\n            case 'secure': // S5.2.5\n                /*\n                 * \"If the attribute-name case-insensitively matches the string \"Secure\",\n                 * the user agent MUST append an attribute to the cookie-attribute-list\n                 * with an attribute-name of Secure and an empty attribute-value.\"\n                 */\n                c.secure = true;\n                break;\n            case 'httponly': // S5.2.6 -- effectively the same as 'secure'\n                c.httpOnly = true;\n                break;\n            case 'samesite': // RFC6265bis-02 S5.3.7\n                switch (av_value ? av_value.toLowerCase() : '') {\n                    case 'strict':\n                        c.sameSite = 'strict';\n                        break;\n                    case 'lax':\n                        c.sameSite = 'lax';\n                        break;\n                    case 'none':\n                        c.sameSite = 'none';\n                        break;\n                    default:\n                        c.sameSite = undefined;\n                        break;\n                }\n                break;\n            default:\n                c.extensions = c.extensions || [];\n                c.extensions.push(av);\n                break;\n        }\n    }\n    return c;\n}\nfunction fromJSON(str) {\n    if (!str || validators.isEmptyString(str)) {\n        return undefined;\n    }\n    let obj;\n    if (typeof str === 'string') {\n        try {\n            obj = JSON.parse(str);\n        }\n        catch {\n            return undefined;\n        }\n    }\n    else {\n        // assume it's an Object\n        obj = str;\n    }\n    const c = new Cookie();\n    Cookie.serializableProperties.forEach((prop) => {\n        if (obj && typeof obj === 'object' && (0, utils_1.inOperator)(prop, obj)) {\n            const val = obj[prop];\n            if (val === undefined) {\n                return;\n            }\n            if ((0, utils_1.inOperator)(prop, cookieDefaults) && val === cookieDefaults[prop]) {\n                return;\n            }\n            switch (prop) {\n                case 'key':\n                case 'value':\n                case 'sameSite':\n                    if (typeof val === 'string') {\n                        c[prop] = val;\n                    }\n                    break;\n                case 'expires':\n                case 'creation':\n                case 'lastAccessed':\n                    if (typeof val === 'number' ||\n                        typeof val === 'string' ||\n                        val instanceof Date) {\n                        c[prop] = obj[prop] == 'Infinity' ? 'Infinity' : new Date(val);\n                    }\n                    else if (val === null) {\n                        c[prop] = null;\n                    }\n                    break;\n                case 'maxAge':\n                    if (typeof val === 'number' ||\n                        val === 'Infinity' ||\n                        val === '-Infinity') {\n                        c[prop] = val;\n                    }\n                    break;\n                case 'domain':\n                case 'path':\n                    if (typeof val === 'string' || val === null) {\n                        c[prop] = val;\n                    }\n                    break;\n                case 'secure':\n                case 'httpOnly':\n                    if (typeof val === 'boolean') {\n                        c[prop] = val;\n                    }\n                    break;\n                case 'extensions':\n                    if (Array.isArray(val) &&\n                        val.every((item) => typeof item === 'string')) {\n                        c[prop] = val;\n                    }\n                    break;\n                case 'hostOnly':\n                case 'pathIsDefault':\n                    if (typeof val === 'boolean' || val === null) {\n                        c[prop] = val;\n                    }\n                    break;\n            }\n        }\n    });\n    return c;\n}\nconst cookieDefaults = {\n    // the order in which the RFC has them:\n    key: '',\n    value: '',\n    expires: 'Infinity',\n    maxAge: null,\n    domain: null,\n    path: null,\n    secure: false,\n    httpOnly: false,\n    extensions: null,\n    // set by the CookieJar:\n    hostOnly: null,\n    pathIsDefault: null,\n    creation: null,\n    lastAccessed: null,\n    sameSite: undefined,\n};\n/**\n * An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to a user's web browser.\n * It is defined in {@link https://www.rfc-editor.org/rfc/rfc6265.html | RFC6265}.\n * @public\n */\nclass Cookie {\n    /**\n     * Create a new Cookie instance.\n     * @public\n     * @param options - The attributes to set on the cookie\n     */\n    constructor(options = {}) {\n        this.key = options.key ?? cookieDefaults.key;\n        this.value = options.value ?? cookieDefaults.value;\n        this.expires = options.expires ?? cookieDefaults.expires;\n        this.maxAge = options.maxAge ?? cookieDefaults.maxAge;\n        this.domain = options.domain ?? cookieDefaults.domain;\n        this.path = options.path ?? cookieDefaults.path;\n        this.secure = options.secure ?? cookieDefaults.secure;\n        this.httpOnly = options.httpOnly ?? cookieDefaults.httpOnly;\n        this.extensions = options.extensions ?? cookieDefaults.extensions;\n        this.creation = options.creation ?? cookieDefaults.creation;\n        this.hostOnly = options.hostOnly ?? cookieDefaults.hostOnly;\n        this.pathIsDefault = options.pathIsDefault ?? cookieDefaults.pathIsDefault;\n        this.lastAccessed = options.lastAccessed ?? cookieDefaults.lastAccessed;\n        this.sameSite = options.sameSite ?? cookieDefaults.sameSite;\n        this.creation = options.creation ?? new Date();\n        // used to break creation ties in cookieCompare():\n        Object.defineProperty(this, 'creationIndex', {\n            configurable: false,\n            enumerable: false, // important for assert.deepEqual checks\n            writable: true,\n            value: ++Cookie.cookiesCreated,\n        });\n        // Duplicate operation, but it makes TypeScript happy...\n        this.creationIndex = Cookie.cookiesCreated;\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        const now = Date.now();\n        const hostOnly = this.hostOnly != null ? this.hostOnly.toString() : '?';\n        const createAge = this.creation && this.creation !== 'Infinity'\n            ? `${String(now - this.creation.getTime())}ms`\n            : '?';\n        const accessAge = this.lastAccessed && this.lastAccessed !== 'Infinity'\n            ? `${String(now - this.lastAccessed.getTime())}ms`\n            : '?';\n        return `Cookie=\"${this.toString()}; hostOnly=${hostOnly}; aAge=${accessAge}; cAge=${createAge}\"`;\n    }\n    /**\n     * For convenience in using `JSON.stringify(cookie)`. Returns a plain-old Object that can be JSON-serialized.\n     *\n     * @remarks\n     * - Any `Date` properties (such as {@link Cookie.expires}, {@link Cookie.creation}, and {@link Cookie.lastAccessed}) are exported in ISO format (`Date.toISOString()`).\n     *\n     *  - Custom Cookie properties are discarded. In tough-cookie 1.x, since there was no {@link Cookie.toJSON} method explicitly defined, all enumerable properties were captured.\n     *      If you want a property to be serialized, add the property name to {@link Cookie.serializableProperties}.\n     */\n    toJSON() {\n        const obj = {};\n        for (const prop of Cookie.serializableProperties) {\n            const val = this[prop];\n            if (val === cookieDefaults[prop]) {\n                continue; // leave as prototype default\n            }\n            switch (prop) {\n                case 'key':\n                case 'value':\n                case 'sameSite':\n                    if (typeof val === 'string') {\n                        obj[prop] = val;\n                    }\n                    break;\n                case 'expires':\n                case 'creation':\n                case 'lastAccessed':\n                    if (typeof val === 'number' ||\n                        typeof val === 'string' ||\n                        val instanceof Date) {\n                        obj[prop] =\n                            val == 'Infinity' ? 'Infinity' : new Date(val).toISOString();\n                    }\n                    else if (val === null) {\n                        obj[prop] = null;\n                    }\n                    break;\n                case 'maxAge':\n                    if (typeof val === 'number' ||\n                        val === 'Infinity' ||\n                        val === '-Infinity') {\n                        obj[prop] = val;\n                    }\n                    break;\n                case 'domain':\n                case 'path':\n                    if (typeof val === 'string' || val === null) {\n                        obj[prop] = val;\n                    }\n                    break;\n                case 'secure':\n                case 'httpOnly':\n                    if (typeof val === 'boolean') {\n                        obj[prop] = val;\n                    }\n                    break;\n                case 'extensions':\n                    if (Array.isArray(val)) {\n                        obj[prop] = val;\n                    }\n                    break;\n                case 'hostOnly':\n                case 'pathIsDefault':\n                    if (typeof val === 'boolean' || val === null) {\n                        obj[prop] = val;\n                    }\n                    break;\n            }\n        }\n        return obj;\n    }\n    /**\n     * Does a deep clone of this cookie, implemented exactly as `Cookie.fromJSON(cookie.toJSON())`.\n     * @public\n     */\n    clone() {\n        return fromJSON(this.toJSON());\n    }\n    /**\n     * Validates cookie attributes for semantic correctness. Useful for \"lint\" checking any `Set-Cookie` headers you generate.\n     * For now, it returns a boolean, but eventually could return a reason string.\n     *\n     * @remarks\n     * Works for a few things, but is by no means comprehensive.\n     *\n     * @beta\n     */\n    validate() {\n        if (!this.value || !COOKIE_OCTETS.test(this.value)) {\n            return false;\n        }\n        if (this.expires != 'Infinity' &&\n            !(this.expires instanceof Date) &&\n            !(0, parseDate_1.parseDate)(this.expires)) {\n            return false;\n        }\n        if (this.maxAge != null &&\n            this.maxAge !== 'Infinity' &&\n            (this.maxAge === '-Infinity' || this.maxAge <= 0)) {\n            return false; // \"Max-Age=\" non-zero-digit *DIGIT\n        }\n        if (this.path != null && !PATH_VALUE.test(this.path)) {\n            return false;\n        }\n        const cdomain = this.cdomain();\n        if (cdomain) {\n            if (cdomain.match(/\\.$/)) {\n                return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this\n            }\n            const suffix = (0, getPublicSuffix_1.getPublicSuffix)(cdomain);\n            if (suffix == null) {\n                // it's a public suffix\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Sets the 'Expires' attribute on a cookie.\n     *\n     * @remarks\n     * When given a `string` value it will be parsed with {@link parseDate}. If the value can't be parsed as a cookie date\n     * then the 'Expires' attribute will be set to `\"Infinity\"`.\n     *\n     * @param exp - the new value for the 'Expires' attribute of the cookie.\n     */\n    setExpires(exp) {\n        if (exp instanceof Date) {\n            this.expires = exp;\n        }\n        else {\n            this.expires = (0, parseDate_1.parseDate)(exp) || 'Infinity';\n        }\n    }\n    /**\n     * Sets the 'Max-Age' attribute (in seconds) on a cookie.\n     *\n     * @remarks\n     * Coerces `-Infinity` to `\"-Infinity\"` and `Infinity` to `\"Infinity\"` so it can be serialized to JSON.\n     *\n     * @param age - the new value for the 'Max-Age' attribute (in seconds).\n     */\n    setMaxAge(age) {\n        if (age === Infinity) {\n            this.maxAge = 'Infinity';\n        }\n        else if (age === -Infinity) {\n            this.maxAge = '-Infinity';\n        }\n        else {\n            this.maxAge = age;\n        }\n    }\n    /**\n     * Encodes to a `Cookie` header value (specifically, the {@link Cookie.key} and {@link Cookie.value} properties joined with \"=\").\n     * @public\n     */\n    cookieString() {\n        const val = this.value || '';\n        if (this.key) {\n            return `${this.key}=${val}`;\n        }\n        return val;\n    }\n    /**\n     * Encodes to a `Set-Cookie header` value.\n     * @public\n     */\n    toString() {\n        let str = this.cookieString();\n        if (this.expires != 'Infinity') {\n            if (this.expires instanceof Date) {\n                str += `; Expires=${(0, formatDate_1.formatDate)(this.expires)}`;\n            }\n        }\n        if (this.maxAge != null && this.maxAge != Infinity) {\n            str += `; Max-Age=${String(this.maxAge)}`;\n        }\n        if (this.domain && !this.hostOnly) {\n            str += `; Domain=${this.domain}`;\n        }\n        if (this.path) {\n            str += `; Path=${this.path}`;\n        }\n        if (this.secure) {\n            str += '; Secure';\n        }\n        if (this.httpOnly) {\n            str += '; HttpOnly';\n        }\n        if (this.sameSite && this.sameSite !== 'none') {\n            if (this.sameSite.toLowerCase() ===\n                Cookie.sameSiteCanonical.lax.toLowerCase()) {\n                str += `; SameSite=${Cookie.sameSiteCanonical.lax}`;\n            }\n            else if (this.sameSite.toLowerCase() ===\n                Cookie.sameSiteCanonical.strict.toLowerCase()) {\n                str += `; SameSite=${Cookie.sameSiteCanonical.strict}`;\n            }\n            else {\n                str += `; SameSite=${this.sameSite}`;\n            }\n        }\n        if (this.extensions) {\n            this.extensions.forEach((ext) => {\n                str += `; ${ext}`;\n            });\n        }\n        return str;\n    }\n    /**\n     * Computes the TTL relative to now (milliseconds).\n     *\n     * @remarks\n     * - `Infinity` is returned for cookies without an explicit expiry\n     *\n     * - `0` is returned if the cookie is expired.\n     *\n     * - Otherwise a time-to-live in milliseconds is returned.\n     *\n     * @param now - passing an explicit value is mostly used for testing purposes since this defaults to the `Date.now()`\n     * @public\n     */\n    TTL(now = Date.now()) {\n        // TTL() partially replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n        // elsewhere)\n        // S5.3 says to give the \"latest representable date\" for which we use Infinity\n        // For \"expired\" we use 0\n        // -----\n        // RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires\n        // attribute, the Max-Age attribute has precedence and controls the\n        // expiration date of the cookie.\n        // (Concurs with S5.3 step 3)\n        if (this.maxAge != null && typeof this.maxAge === 'number') {\n            return this.maxAge <= 0 ? 0 : this.maxAge * 1000;\n        }\n        const expires = this.expires;\n        if (expires === 'Infinity') {\n            return Infinity;\n        }\n        return (expires?.getTime() ?? now) - (now || Date.now());\n    }\n    /**\n     * Computes the absolute unix-epoch milliseconds that this cookie expires.\n     *\n     * The \"Max-Age\" attribute takes precedence over \"Expires\" (as per the RFC). The {@link Cookie.lastAccessed} attribute\n     * (or the `now` parameter if given) is used to offset the {@link Cookie.maxAge} attribute.\n     *\n     * If Expires ({@link Cookie.expires}) is set, that's returned.\n     *\n     * @param now - can be used to provide a time offset (instead of {@link Cookie.lastAccessed}) to use when calculating the \"Max-Age\" value\n     */\n    expiryTime(now) {\n        // expiryTime() replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie() elsewhere)\n        if (this.maxAge != null) {\n            const relativeTo = now || this.lastAccessed || new Date();\n            const maxAge = typeof this.maxAge === 'number' ? this.maxAge : -Infinity;\n            const age = maxAge <= 0 ? -Infinity : maxAge * 1000;\n            if (relativeTo === 'Infinity') {\n                return Infinity;\n            }\n            return relativeTo.getTime() + age;\n        }\n        if (this.expires == 'Infinity') {\n            return Infinity;\n        }\n        return this.expires ? this.expires.getTime() : undefined;\n    }\n    /**\n     * Similar to {@link Cookie.expiryTime}, computes the absolute unix-epoch milliseconds that this cookie expires and returns it as a Date.\n     *\n     * The \"Max-Age\" attribute takes precedence over \"Expires\" (as per the RFC). The {@link Cookie.lastAccessed} attribute\n     * (or the `now` parameter if given) is used to offset the {@link Cookie.maxAge} attribute.\n     *\n     * If Expires ({@link Cookie.expires}) is set, that's returned.\n     *\n     * @param now - can be used to provide a time offset (instead of {@link Cookie.lastAccessed}) to use when calculating the \"Max-Age\" value\n     */\n    expiryDate(now) {\n        const millisec = this.expiryTime(now);\n        if (millisec == Infinity) {\n            // The 31-bit value of 2147483647000 was chosen to be the MAX_TIME representable\n            // in tough-cookie though MDN states that the actual maximum value for a Date is 8.64e15.\n            // I'm guessing this is due to the Y2038 problem that would affect systems that store\n            // unix time as 32-bit integers.\n            // See:\n            // - https://github.com/salesforce/tough-cookie/commit/0616f70bf725e00c63d442544ad230c4f8b23357\n            // - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date\n            // - https://en.wikipedia.org/wiki/Year_2038_problem\n            return new Date(2147483647000);\n        }\n        else if (millisec == -Infinity) {\n            return new Date(0);\n        }\n        else {\n            return millisec == undefined ? undefined : new Date(millisec);\n        }\n    }\n    /**\n     * Indicates if the cookie has been persisted to a store or not.\n     * @public\n     */\n    isPersistent() {\n        // This replaces the \"persistent-flag\" parts of S5.3 step 3\n        return this.maxAge != null || this.expires != 'Infinity';\n    }\n    /**\n     * Calls {@link canonicalDomain} with the {@link Cookie.domain} property.\n     * @public\n     */\n    canonicalizedDomain() {\n        // Mostly S5.1.2 and S5.2.3:\n        return (0, canonicalDomain_1.canonicalDomain)(this.domain);\n    }\n    /**\n     * Alias for {@link Cookie.canonicalizedDomain}\n     * @public\n     */\n    cdomain() {\n        return (0, canonicalDomain_1.canonicalDomain)(this.domain);\n    }\n    /**\n     * Parses a string into a Cookie object.\n     *\n     * @remarks\n     * Note: when parsing a `Cookie` header it must be split by ';' before each Cookie string can be parsed.\n     *\n     * @example\n     * ```\n     * // parse a `Set-Cookie` header\n     * const setCookieHeader = 'a=bcd; Expires=Tue, 18 Oct 2011 07:05:03 GMT'\n     * const cookie = Cookie.parse(setCookieHeader)\n     * cookie.key === 'a'\n     * cookie.value === 'bcd'\n     * cookie.expires === new Date(Date.parse('Tue, 18 Oct 2011 07:05:03 GMT'))\n     * ```\n     *\n     * @example\n     * ```\n     * // parse a `Cookie` header\n     * const cookieHeader = 'name=value; name2=value2; name3=value3'\n     * const cookies = cookieHeader.split(';').map(Cookie.parse)\n     * cookies[0].name === 'name'\n     * cookies[0].value === 'value'\n     * cookies[1].name === 'name2'\n     * cookies[1].value === 'value2'\n     * cookies[2].name === 'name3'\n     * cookies[2].value === 'value3'\n     * ```\n     *\n     * @param str - The `Set-Cookie` header or a Cookie string to parse.\n     * @param options - Configures `strict` or `loose` mode for cookie parsing\n     */\n    static parse(str, options) {\n        return parse(str, options);\n    }\n    /**\n     * Does the reverse of {@link Cookie.toJSON}.\n     *\n     * @remarks\n     * Any Date properties (such as .expires, .creation, and .lastAccessed) are parsed via Date.parse, not tough-cookie's parseDate, since ISO timestamps are being handled at this layer.\n     *\n     * @example\n     * ```\n     * const json = JSON.stringify({\n     *   key: 'alpha',\n     *   value: 'beta',\n     *   domain: 'example.com',\n     *   path: '/foo',\n     *   expires: '2038-01-19T03:14:07.000Z',\n     * })\n     * const cookie = Cookie.fromJSON(json)\n     * cookie.key === 'alpha'\n     * cookie.value === 'beta'\n     * cookie.domain === 'example.com'\n     * cookie.path === '/foo'\n     * cookie.expires === new Date(Date.parse('2038-01-19T03:14:07.000Z'))\n     * ```\n     *\n     * @param str - An unparsed JSON string or a value that has already been parsed as JSON\n     */\n    static fromJSON(str) {\n        return fromJSON(str);\n    }\n}\nexports.Cookie = Cookie;\nCookie.cookiesCreated = 0;\n/**\n * @internal\n */\nCookie.sameSiteLevel = {\n    strict: 3,\n    lax: 2,\n    none: 1,\n};\n/**\n * @internal\n */\nCookie.sameSiteCanonical = {\n    strict: 'Strict',\n    lax: 'Lax',\n};\n/**\n * Cookie properties that will be serialized when using {@link Cookie.fromJSON} and {@link Cookie.toJSON}.\n * @public\n */\nCookie.serializableProperties = [\n    'key',\n    'value',\n    'expires',\n    'maxAge',\n    'domain',\n    'path',\n    'secure',\n    'httpOnly',\n    'extensions',\n    'hostOnly',\n    'pathIsDefault',\n    'creation',\n    'lastAccessed',\n    'sameSite',\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/cookie/cookie.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/cookie/cookieCompare.js":
/*!****************************************************************!*\
  !*** ./node_modules/tough-cookie/dist/cookie/cookieCompare.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.cookieCompare = cookieCompare;\n/**\n * The maximum timestamp a cookie, in milliseconds. The value is (2^31 - 1) seconds since the Unix\n * epoch, corresponding to 2038-01-19.\n */\nconst MAX_TIME = 2147483647000;\n/**\n * A comparison function that can be used with {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort | Array.sort()},\n * which orders a list of cookies into the recommended order given in Step 2 of {@link https://www.rfc-editor.org/rfc/rfc6265.html#section-5.4 | RFC6265 - Section 5.4}.\n *\n * The sort algorithm is, in order of precedence:\n *\n * - Longest {@link Cookie.path}\n *\n * - Oldest {@link Cookie.creation} (which has a 1-ms precision, same as Date)\n *\n * - Lowest {@link Cookie.creationIndex} (to get beyond the 1-ms precision)\n *\n * @remarks\n * ### RFC6265 - Section 5.4 - Step 2\n *\n * The user agent SHOULD sort the cookie-list in the following order:\n *\n * - Cookies with longer paths are listed before cookies with shorter paths.\n *\n * - Among cookies that have equal-length path fields, cookies with\n *    earlier creation-times are listed before cookies with later\n *    creation-times.\n *\n * NOTE: Not all user agents sort the cookie-list in this order, but\n * this order reflects common practice when this document was\n * written, and, historically, there have been servers that\n * (erroneously) depended on this order.\n *\n * ### Custom Store Implementors\n *\n * Since the JavaScript Date is limited to a 1-ms precision, cookies within the same millisecond are entirely possible.\n * This is especially true when using the `now` option to `CookieJar.setCookie(...)`. The {@link Cookie.creationIndex}\n * property is a per-process global counter, assigned during construction with `new Cookie()`, which preserves the spirit\n * of the RFC sorting: older cookies go first. This works great for {@link MemoryCookieStore} since `Set-Cookie` headers\n * are parsed in order, but is not so great for distributed systems.\n *\n * Sophisticated Stores may wish to set this to some other\n * logical clock so that if cookies `A` and `B` are created in the same millisecond, but cookie `A` is created before\n * cookie `B`, then `A.creationIndex < B.creationIndex`.\n *\n * @example\n * ```\n * const cookies = [\n *   new Cookie({ key: 'a', value: '' }),\n *   new Cookie({ key: 'b', value: '' }),\n *   new Cookie({ key: 'c', value: '', path: '/path' }),\n *   new Cookie({ key: 'd', value: '', path: '/path' }),\n * ]\n * cookies.sort(cookieCompare)\n * // cookie sort order would be ['c', 'd', 'a', 'b']\n * ```\n *\n * @param a - the first Cookie for comparison\n * @param b - the second Cookie for comparison\n * @public\n */\nfunction cookieCompare(a, b) {\n    let cmp;\n    // descending for length: b CMP a\n    const aPathLen = a.path ? a.path.length : 0;\n    const bPathLen = b.path ? b.path.length : 0;\n    cmp = bPathLen - aPathLen;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    // ascending for time: a CMP b\n    const aTime = a.creation && a.creation instanceof Date ? a.creation.getTime() : MAX_TIME;\n    const bTime = b.creation && b.creation instanceof Date ? b.creation.getTime() : MAX_TIME;\n    cmp = aTime - bTime;\n    if (cmp !== 0) {\n        return cmp;\n    }\n    // break ties for the same millisecond (precision of JavaScript's clock)\n    cmp = (a.creationIndex || 0) - (b.creationIndex || 0);\n    return cmp;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3QvY29va2llL2Nvb2tpZUNvbXBhcmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxpSEFBaUg7QUFDakssaUZBQWlGLHNGQUFzRjtBQUN2SztBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxhQUFhLHVCQUF1QjtBQUNwQztBQUNBLGFBQWEsNEJBQTRCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRkFBMkY7QUFDM0Y7QUFDQSxxRUFBcUUseUJBQXlCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxQkFBcUI7QUFDdkMsa0JBQWtCLHFCQUFxQjtBQUN2QyxrQkFBa0Isb0NBQW9DO0FBQ3RELGtCQUFrQixvQ0FBb0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxkYXJzaFxcT25lRHJpdmVcXERlc2t0b3BcXENvZGVcXE1FUk4gV2ViIERldlxcR3JhcGhpXFxub2RlX21vZHVsZXNcXHRvdWdoLWNvb2tpZVxcZGlzdFxcY29va2llXFxjb29raWVDb21wYXJlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb29raWVDb21wYXJlID0gY29va2llQ29tcGFyZTtcbi8qKlxuICogVGhlIG1heGltdW0gdGltZXN0YW1wIGEgY29va2llLCBpbiBtaWxsaXNlY29uZHMuIFRoZSB2YWx1ZSBpcyAoMl4zMSAtIDEpIHNlY29uZHMgc2luY2UgdGhlIFVuaXhcbiAqIGVwb2NoLCBjb3JyZXNwb25kaW5nIHRvIDIwMzgtMDEtMTkuXG4gKi9cbmNvbnN0IE1BWF9USU1FID0gMjE0NzQ4MzY0NzAwMDtcbi8qKlxuICogQSBjb21wYXJpc29uIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc29ydCB8IEFycmF5LnNvcnQoKX0sXG4gKiB3aGljaCBvcmRlcnMgYSBsaXN0IG9mIGNvb2tpZXMgaW50byB0aGUgcmVjb21tZW5kZWQgb3JkZXIgZ2l2ZW4gaW4gU3RlcCAyIG9mIHtAbGluayBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjNjI2NS5odG1sI3NlY3Rpb24tNS40IHwgUkZDNjI2NSAtIFNlY3Rpb24gNS40fS5cbiAqXG4gKiBUaGUgc29ydCBhbGdvcml0aG0gaXMsIGluIG9yZGVyIG9mIHByZWNlZGVuY2U6XG4gKlxuICogLSBMb25nZXN0IHtAbGluayBDb29raWUucGF0aH1cbiAqXG4gKiAtIE9sZGVzdCB7QGxpbmsgQ29va2llLmNyZWF0aW9ufSAod2hpY2ggaGFzIGEgMS1tcyBwcmVjaXNpb24sIHNhbWUgYXMgRGF0ZSlcbiAqXG4gKiAtIExvd2VzdCB7QGxpbmsgQ29va2llLmNyZWF0aW9uSW5kZXh9ICh0byBnZXQgYmV5b25kIHRoZSAxLW1zIHByZWNpc2lvbilcbiAqXG4gKiBAcmVtYXJrc1xuICogIyMjIFJGQzYyNjUgLSBTZWN0aW9uIDUuNCAtIFN0ZXAgMlxuICpcbiAqIFRoZSB1c2VyIGFnZW50IFNIT1VMRCBzb3J0IHRoZSBjb29raWUtbGlzdCBpbiB0aGUgZm9sbG93aW5nIG9yZGVyOlxuICpcbiAqIC0gQ29va2llcyB3aXRoIGxvbmdlciBwYXRocyBhcmUgbGlzdGVkIGJlZm9yZSBjb29raWVzIHdpdGggc2hvcnRlciBwYXRocy5cbiAqXG4gKiAtIEFtb25nIGNvb2tpZXMgdGhhdCBoYXZlIGVxdWFsLWxlbmd0aCBwYXRoIGZpZWxkcywgY29va2llcyB3aXRoXG4gKiAgICBlYXJsaWVyIGNyZWF0aW9uLXRpbWVzIGFyZSBsaXN0ZWQgYmVmb3JlIGNvb2tpZXMgd2l0aCBsYXRlclxuICogICAgY3JlYXRpb24tdGltZXMuXG4gKlxuICogTk9URTogTm90IGFsbCB1c2VyIGFnZW50cyBzb3J0IHRoZSBjb29raWUtbGlzdCBpbiB0aGlzIG9yZGVyLCBidXRcbiAqIHRoaXMgb3JkZXIgcmVmbGVjdHMgY29tbW9uIHByYWN0aWNlIHdoZW4gdGhpcyBkb2N1bWVudCB3YXNcbiAqIHdyaXR0ZW4sIGFuZCwgaGlzdG9yaWNhbGx5LCB0aGVyZSBoYXZlIGJlZW4gc2VydmVycyB0aGF0XG4gKiAoZXJyb25lb3VzbHkpIGRlcGVuZGVkIG9uIHRoaXMgb3JkZXIuXG4gKlxuICogIyMjIEN1c3RvbSBTdG9yZSBJbXBsZW1lbnRvcnNcbiAqXG4gKiBTaW5jZSB0aGUgSmF2YVNjcmlwdCBEYXRlIGlzIGxpbWl0ZWQgdG8gYSAxLW1zIHByZWNpc2lvbiwgY29va2llcyB3aXRoaW4gdGhlIHNhbWUgbWlsbGlzZWNvbmQgYXJlIGVudGlyZWx5IHBvc3NpYmxlLlxuICogVGhpcyBpcyBlc3BlY2lhbGx5IHRydWUgd2hlbiB1c2luZyB0aGUgYG5vd2Agb3B0aW9uIHRvIGBDb29raWVKYXIuc2V0Q29va2llKC4uLilgLiBUaGUge0BsaW5rIENvb2tpZS5jcmVhdGlvbkluZGV4fVxuICogcHJvcGVydHkgaXMgYSBwZXItcHJvY2VzcyBnbG9iYWwgY291bnRlciwgYXNzaWduZWQgZHVyaW5nIGNvbnN0cnVjdGlvbiB3aXRoIGBuZXcgQ29va2llKClgLCB3aGljaCBwcmVzZXJ2ZXMgdGhlIHNwaXJpdFxuICogb2YgdGhlIFJGQyBzb3J0aW5nOiBvbGRlciBjb29raWVzIGdvIGZpcnN0LiBUaGlzIHdvcmtzIGdyZWF0IGZvciB7QGxpbmsgTWVtb3J5Q29va2llU3RvcmV9IHNpbmNlIGBTZXQtQ29va2llYCBoZWFkZXJzXG4gKiBhcmUgcGFyc2VkIGluIG9yZGVyLCBidXQgaXMgbm90IHNvIGdyZWF0IGZvciBkaXN0cmlidXRlZCBzeXN0ZW1zLlxuICpcbiAqIFNvcGhpc3RpY2F0ZWQgU3RvcmVzIG1heSB3aXNoIHRvIHNldCB0aGlzIHRvIHNvbWUgb3RoZXJcbiAqIGxvZ2ljYWwgY2xvY2sgc28gdGhhdCBpZiBjb29raWVzIGBBYCBhbmQgYEJgIGFyZSBjcmVhdGVkIGluIHRoZSBzYW1lIG1pbGxpc2Vjb25kLCBidXQgY29va2llIGBBYCBpcyBjcmVhdGVkIGJlZm9yZVxuICogY29va2llIGBCYCwgdGhlbiBgQS5jcmVhdGlvbkluZGV4IDwgQi5jcmVhdGlvbkluZGV4YC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBjb25zdCBjb29raWVzID0gW1xuICogICBuZXcgQ29va2llKHsga2V5OiAnYScsIHZhbHVlOiAnJyB9KSxcbiAqICAgbmV3IENvb2tpZSh7IGtleTogJ2InLCB2YWx1ZTogJycgfSksXG4gKiAgIG5ldyBDb29raWUoeyBrZXk6ICdjJywgdmFsdWU6ICcnLCBwYXRoOiAnL3BhdGgnIH0pLFxuICogICBuZXcgQ29va2llKHsga2V5OiAnZCcsIHZhbHVlOiAnJywgcGF0aDogJy9wYXRoJyB9KSxcbiAqIF1cbiAqIGNvb2tpZXMuc29ydChjb29raWVDb21wYXJlKVxuICogLy8gY29va2llIHNvcnQgb3JkZXIgd291bGQgYmUgWydjJywgJ2QnLCAnYScsICdiJ11cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBhIC0gdGhlIGZpcnN0IENvb2tpZSBmb3IgY29tcGFyaXNvblxuICogQHBhcmFtIGIgLSB0aGUgc2Vjb25kIENvb2tpZSBmb3IgY29tcGFyaXNvblxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBjb29raWVDb21wYXJlKGEsIGIpIHtcbiAgICBsZXQgY21wO1xuICAgIC8vIGRlc2NlbmRpbmcgZm9yIGxlbmd0aDogYiBDTVAgYVxuICAgIGNvbnN0IGFQYXRoTGVuID0gYS5wYXRoID8gYS5wYXRoLmxlbmd0aCA6IDA7XG4gICAgY29uc3QgYlBhdGhMZW4gPSBiLnBhdGggPyBiLnBhdGgubGVuZ3RoIDogMDtcbiAgICBjbXAgPSBiUGF0aExlbiAtIGFQYXRoTGVuO1xuICAgIGlmIChjbXAgIT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG4gICAgLy8gYXNjZW5kaW5nIGZvciB0aW1lOiBhIENNUCBiXG4gICAgY29uc3QgYVRpbWUgPSBhLmNyZWF0aW9uICYmIGEuY3JlYXRpb24gaW5zdGFuY2VvZiBEYXRlID8gYS5jcmVhdGlvbi5nZXRUaW1lKCkgOiBNQVhfVElNRTtcbiAgICBjb25zdCBiVGltZSA9IGIuY3JlYXRpb24gJiYgYi5jcmVhdGlvbiBpbnN0YW5jZW9mIERhdGUgPyBiLmNyZWF0aW9uLmdldFRpbWUoKSA6IE1BWF9USU1FO1xuICAgIGNtcCA9IGFUaW1lIC0gYlRpbWU7XG4gICAgaWYgKGNtcCAhPT0gMCkge1xuICAgICAgICByZXR1cm4gY21wO1xuICAgIH1cbiAgICAvLyBicmVhayB0aWVzIGZvciB0aGUgc2FtZSBtaWxsaXNlY29uZCAocHJlY2lzaW9uIG9mIEphdmFTY3JpcHQncyBjbG9jaylcbiAgICBjbXAgPSAoYS5jcmVhdGlvbkluZGV4IHx8IDApIC0gKGIuY3JlYXRpb25JbmRleCB8fCAwKTtcbiAgICByZXR1cm4gY21wO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/cookie/cookieCompare.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/cookie/cookieJar.js":
/*!************************************************************!*\
  !*** ./node_modules/tough-cookie/dist/cookie/cookieJar.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CookieJar = void 0;\nconst getPublicSuffix_1 = __webpack_require__(/*! ../getPublicSuffix */ \"(rsc)/./node_modules/tough-cookie/dist/getPublicSuffix.js\");\nconst validators = __importStar(__webpack_require__(/*! ../validators */ \"(rsc)/./node_modules/tough-cookie/dist/validators.js\"));\nconst validators_1 = __webpack_require__(/*! ../validators */ \"(rsc)/./node_modules/tough-cookie/dist/validators.js\");\nconst store_1 = __webpack_require__(/*! ../store */ \"(rsc)/./node_modules/tough-cookie/dist/store.js\");\nconst memstore_1 = __webpack_require__(/*! ../memstore */ \"(rsc)/./node_modules/tough-cookie/dist/memstore.js\");\nconst pathMatch_1 = __webpack_require__(/*! ../pathMatch */ \"(rsc)/./node_modules/tough-cookie/dist/pathMatch.js\");\nconst cookie_1 = __webpack_require__(/*! ./cookie */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/cookie.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/tough-cookie/dist/utils.js\");\nconst canonicalDomain_1 = __webpack_require__(/*! ./canonicalDomain */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/canonicalDomain.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/constants.js\");\nconst defaultPath_1 = __webpack_require__(/*! ./defaultPath */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/defaultPath.js\");\nconst domainMatch_1 = __webpack_require__(/*! ./domainMatch */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/domainMatch.js\");\nconst cookieCompare_1 = __webpack_require__(/*! ./cookieCompare */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/cookieCompare.js\");\nconst version_1 = __webpack_require__(/*! ../version */ \"(rsc)/./node_modules/tough-cookie/dist/version.js\");\nconst defaultSetCookieOptions = {\n    loose: false,\n    sameSiteContext: undefined,\n    ignoreError: false,\n    http: true,\n};\nconst defaultGetCookieOptions = {\n    http: true,\n    expire: true,\n    allPaths: false,\n    sameSiteContext: undefined,\n    sort: undefined,\n};\nconst SAME_SITE_CONTEXT_VAL_ERR = 'Invalid sameSiteContext option for getCookies(); expected one of \"strict\", \"lax\", or \"none\"';\nfunction getCookieContext(url) {\n    if (url &&\n        typeof url === 'object' &&\n        'hostname' in url &&\n        typeof url.hostname === 'string' &&\n        'pathname' in url &&\n        typeof url.pathname === 'string' &&\n        'protocol' in url &&\n        typeof url.protocol === 'string') {\n        return {\n            hostname: url.hostname,\n            pathname: url.pathname,\n            protocol: url.protocol,\n        };\n    }\n    else if (typeof url === 'string') {\n        try {\n            return new URL(decodeURI(url));\n        }\n        catch {\n            return new URL(url);\n        }\n    }\n    else {\n        throw new validators_1.ParameterError('`url` argument is not a string or URL.');\n    }\n}\nfunction checkSameSiteContext(value) {\n    const context = String(value).toLowerCase();\n    if (context === 'none' || context === 'lax' || context === 'strict') {\n        return context;\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n *  If the cookie-name begins with a case-sensitive match for the\n *  string \"__Secure-\", abort these steps and ignore the cookie\n *  entirely unless the cookie's secure-only-flag is true.\n * @param cookie\n * @returns boolean\n */\nfunction isSecurePrefixConditionMet(cookie) {\n    const startsWithSecurePrefix = typeof cookie.key === 'string' && cookie.key.startsWith('__Secure-');\n    return !startsWithSecurePrefix || cookie.secure;\n}\n/**\n *  If the cookie-name begins with a case-sensitive match for the\n *  string \"__Host-\", abort these steps and ignore the cookie\n *  entirely unless the cookie meets all the following criteria:\n *    1.  The cookie's secure-only-flag is true.\n *    2.  The cookie's host-only-flag is true.\n *    3.  The cookie-attribute-list contains an attribute with an\n *        attribute-name of \"Path\", and the cookie's path is \"/\".\n * @param cookie\n * @returns boolean\n */\nfunction isHostPrefixConditionMet(cookie) {\n    const startsWithHostPrefix = typeof cookie.key === 'string' && cookie.key.startsWith('__Host-');\n    return (!startsWithHostPrefix ||\n        Boolean(cookie.secure &&\n            cookie.hostOnly &&\n            cookie.path != null &&\n            cookie.path === '/'));\n}\nfunction getNormalizedPrefixSecurity(prefixSecurity) {\n    const normalizedPrefixSecurity = prefixSecurity.toLowerCase();\n    /* The three supported options */\n    switch (normalizedPrefixSecurity) {\n        case constants_1.PrefixSecurityEnum.STRICT:\n        case constants_1.PrefixSecurityEnum.SILENT:\n        case constants_1.PrefixSecurityEnum.DISABLED:\n            return normalizedPrefixSecurity;\n        default:\n            return constants_1.PrefixSecurityEnum.SILENT;\n    }\n}\n/**\n * A CookieJar is for storage and retrieval of {@link Cookie} objects as defined in\n * {@link https://www.rfc-editor.org/rfc/rfc6265.html#section-5.3 | RFC6265 - Section 5.3}.\n *\n * It also supports a pluggable persistence layer via {@link Store}.\n * @public\n */\nclass CookieJar {\n    /**\n     * Creates a new `CookieJar` instance.\n     *\n     * @remarks\n     * - If a custom store is not passed to the constructor, an in-memory store ({@link MemoryCookieStore} will be created and used.\n     * - If a boolean value is passed as the `options` parameter, this is equivalent to passing `{ rejectPublicSuffixes: <value> }`\n     *\n     * @param store - a custom {@link Store} implementation (defaults to {@link MemoryCookieStore})\n     * @param options - configures how cookies are processed by the cookie jar\n     */\n    constructor(store, options) {\n        if (typeof options === 'boolean') {\n            options = { rejectPublicSuffixes: options };\n        }\n        this.rejectPublicSuffixes = options?.rejectPublicSuffixes ?? true;\n        this.enableLooseMode = options?.looseMode ?? false;\n        this.allowSpecialUseDomain = options?.allowSpecialUseDomain ?? true;\n        this.prefixSecurity = getNormalizedPrefixSecurity(options?.prefixSecurity ?? 'silent');\n        this.store = store ?? new memstore_1.MemoryCookieStore();\n    }\n    callSync(fn) {\n        if (!this.store.synchronous) {\n            throw new Error('CookieJar store is not synchronous; use async API instead.');\n        }\n        let syncErr = null;\n        let syncResult = undefined;\n        try {\n            fn.call(this, (error, result) => {\n                syncErr = error;\n                syncResult = result;\n            });\n        }\n        catch (err) {\n            syncErr = err;\n        }\n        if (syncErr)\n            throw syncErr;\n        return syncResult;\n    }\n    /**\n     * @internal No doc because this is the overload implementation\n     */\n    setCookie(cookie, url, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = undefined;\n        }\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        const cb = promiseCallback.callback;\n        let context;\n        try {\n            if (typeof url === 'string') {\n                validators.validate(validators.isNonEmptyString(url), callback, (0, utils_1.safeToString)(options));\n            }\n            context = getCookieContext(url);\n            if (typeof url === 'function') {\n                return promiseCallback.reject(new Error('No URL was specified'));\n            }\n            if (typeof options === 'function') {\n                options = defaultSetCookieOptions;\n            }\n            validators.validate(typeof cb === 'function', cb);\n            if (!validators.isNonEmptyString(cookie) &&\n                !validators.isObject(cookie) &&\n                cookie instanceof String &&\n                cookie.length == 0) {\n                return promiseCallback.resolve(undefined);\n            }\n        }\n        catch (err) {\n            return promiseCallback.reject(err);\n        }\n        const host = (0, canonicalDomain_1.canonicalDomain)(context.hostname) ?? null;\n        const loose = options?.loose || this.enableLooseMode;\n        let sameSiteContext = null;\n        if (options?.sameSiteContext) {\n            sameSiteContext = checkSameSiteContext(options.sameSiteContext);\n            if (!sameSiteContext) {\n                return promiseCallback.reject(new Error(SAME_SITE_CONTEXT_VAL_ERR));\n            }\n        }\n        // S5.3 step 1\n        if (typeof cookie === 'string' || cookie instanceof String) {\n            const parsedCookie = cookie_1.Cookie.parse(cookie.toString(), { loose: loose });\n            if (!parsedCookie) {\n                const err = new Error('Cookie failed to parse');\n                return options?.ignoreError\n                    ? promiseCallback.resolve(undefined)\n                    : promiseCallback.reject(err);\n            }\n            cookie = parsedCookie;\n        }\n        else if (!(cookie instanceof cookie_1.Cookie)) {\n            // If you're seeing this error, and are passing in a Cookie object,\n            // it *might* be a Cookie object from another loaded version of tough-cookie.\n            const err = new Error('First argument to setCookie must be a Cookie object or string');\n            return options?.ignoreError\n                ? promiseCallback.resolve(undefined)\n                : promiseCallback.reject(err);\n        }\n        // S5.3 step 2\n        const now = options?.now || new Date(); // will assign later to save effort in the face of errors\n        // S5.3 step 3: NOOP; persistent-flag and expiry-time is handled by getCookie()\n        // S5.3 step 4: NOOP; domain is null by default\n        // S5.3 step 5: public suffixes\n        if (this.rejectPublicSuffixes && cookie.domain) {\n            try {\n                const cdomain = cookie.cdomain();\n                const suffix = typeof cdomain === 'string'\n                    ? (0, getPublicSuffix_1.getPublicSuffix)(cdomain, {\n                        allowSpecialUseDomain: this.allowSpecialUseDomain,\n                        ignoreError: options?.ignoreError,\n                    })\n                    : null;\n                if (suffix == null && !constants_1.IP_V6_REGEX_OBJECT.test(cookie.domain)) {\n                    // e.g. \"com\"\n                    const err = new Error('Cookie has domain set to a public suffix');\n                    return options?.ignoreError\n                        ? promiseCallback.resolve(undefined)\n                        : promiseCallback.reject(err);\n                }\n                // Using `any` here rather than `unknown` to avoid a type assertion, at the cost of needing\n                // to disable eslint directives. It's easier to have this one spot of technically incorrect\n                // types, rather than having to deal with _all_ callback errors being `unknown`.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }\n            catch (err) {\n                return options?.ignoreError\n                    ? promiseCallback.resolve(undefined)\n                    : // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                        promiseCallback.reject(err);\n            }\n        }\n        // S5.3 step 6:\n        if (cookie.domain) {\n            if (!(0, domainMatch_1.domainMatch)(host ?? undefined, cookie.cdomain() ?? undefined, false)) {\n                const err = new Error(`Cookie not in this host's domain. Cookie:${cookie.cdomain() ?? 'null'} Request:${host ?? 'null'}`);\n                return options?.ignoreError\n                    ? promiseCallback.resolve(undefined)\n                    : promiseCallback.reject(err);\n            }\n            if (cookie.hostOnly == null) {\n                // don't reset if already set\n                cookie.hostOnly = false;\n            }\n        }\n        else {\n            cookie.hostOnly = true;\n            cookie.domain = host;\n        }\n        //S5.2.4 If the attribute-value is empty or if the first character of the\n        //attribute-value is not %x2F (\"/\"):\n        //Let cookie-path be the default-path.\n        if (!cookie.path || cookie.path[0] !== '/') {\n            cookie.path = (0, defaultPath_1.defaultPath)(context.pathname);\n            cookie.pathIsDefault = true;\n        }\n        // S5.3 step 8: NOOP; secure attribute\n        // S5.3 step 9: NOOP; httpOnly attribute\n        // S5.3 step 10\n        if (options?.http === false && cookie.httpOnly) {\n            const err = new Error(\"Cookie is HttpOnly and this isn't an HTTP API\");\n            return options.ignoreError\n                ? promiseCallback.resolve(undefined)\n                : promiseCallback.reject(err);\n        }\n        // 6252bis-02 S5.4 Step 13 & 14:\n        if (cookie.sameSite !== 'none' &&\n            cookie.sameSite !== undefined &&\n            sameSiteContext) {\n            // \"If the cookie's \"same-site-flag\" is not \"None\", and the cookie\n            //  is being set from a context whose \"site for cookies\" is not an\n            //  exact match for request-uri's host's registered domain, then\n            //  abort these steps and ignore the newly created cookie entirely.\"\n            if (sameSiteContext === 'none') {\n                const err = new Error('Cookie is SameSite but this is a cross-origin request');\n                return options?.ignoreError\n                    ? promiseCallback.resolve(undefined)\n                    : promiseCallback.reject(err);\n            }\n        }\n        /* 6265bis-02 S5.4 Steps 15 & 16 */\n        const ignoreErrorForPrefixSecurity = this.prefixSecurity === constants_1.PrefixSecurityEnum.SILENT;\n        const prefixSecurityDisabled = this.prefixSecurity === constants_1.PrefixSecurityEnum.DISABLED;\n        /* If prefix checking is not disabled ...*/\n        if (!prefixSecurityDisabled) {\n            let errorFound = false;\n            let errorMsg;\n            /* Check secure prefix condition */\n            if (!isSecurePrefixConditionMet(cookie)) {\n                errorFound = true;\n                errorMsg = 'Cookie has __Secure prefix but Secure attribute is not set';\n            }\n            else if (!isHostPrefixConditionMet(cookie)) {\n                /* Check host prefix condition */\n                errorFound = true;\n                errorMsg =\n                    \"Cookie has __Host prefix but either Secure or HostOnly attribute is not set or Path is not '/'\";\n            }\n            if (errorFound) {\n                return options?.ignoreError || ignoreErrorForPrefixSecurity\n                    ? promiseCallback.resolve(undefined)\n                    : promiseCallback.reject(new Error(errorMsg));\n            }\n        }\n        const store = this.store;\n        // TODO: It feels weird to be manipulating the store as a side effect of a method.\n        // We should either do it in the constructor or not at all.\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!store.updateCookie) {\n            store.updateCookie = async function (_oldCookie, newCookie, cb) {\n                return this.putCookie(newCookie).then(() => cb?.(null), (error) => cb?.(error));\n            };\n        }\n        const withCookie = function withCookie(err, oldCookie) {\n            if (err) {\n                cb(err);\n                return;\n            }\n            const next = function (err) {\n                if (err) {\n                    cb(err);\n                }\n                else if (typeof cookie === 'string') {\n                    cb(null, undefined);\n                }\n                else {\n                    cb(null, cookie);\n                }\n            };\n            if (oldCookie) {\n                // S5.3 step 11 - \"If the cookie store contains a cookie with the same name,\n                // domain, and path as the newly created cookie:\"\n                if (options &&\n                    'http' in options &&\n                    options.http === false &&\n                    oldCookie.httpOnly) {\n                    // step 11.2\n                    err = new Error(\"old Cookie is HttpOnly and this isn't an HTTP API\");\n                    if (options.ignoreError)\n                        cb(null, undefined);\n                    else\n                        cb(err);\n                    return;\n                }\n                if (cookie instanceof cookie_1.Cookie) {\n                    cookie.creation = oldCookie.creation;\n                    // step 11.3\n                    cookie.creationIndex = oldCookie.creationIndex;\n                    // preserve tie-breaker\n                    cookie.lastAccessed = now;\n                    // Step 11.4 (delete cookie) is implied by just setting the new one:\n                    store.updateCookie(oldCookie, cookie, next); // step 12\n                }\n            }\n            else {\n                if (cookie instanceof cookie_1.Cookie) {\n                    cookie.creation = cookie.lastAccessed = now;\n                    store.putCookie(cookie, next); // step 12\n                }\n            }\n        };\n        // TODO: Refactor to avoid using a callback\n        store.findCookie(cookie.domain, cookie.path, cookie.key, withCookie);\n        return promiseCallback.promise;\n    }\n    /**\n     * Synchronously attempt to set the {@link Cookie} in the {@link CookieJar}.\n     *\n     * <strong>Note:</strong> Only works if the configured {@link Store} is also synchronous.\n     *\n     * @remarks\n     * - If successfully persisted, the {@link Cookie} will have updated\n     *     {@link Cookie.creation}, {@link Cookie.lastAccessed} and {@link Cookie.hostOnly}\n     *     properties.\n     *\n     * - As per the RFC, the {@link Cookie.hostOnly} flag is set if there was no `Domain={value}`\n     *     atttribute on the cookie string. The {@link Cookie.domain} property is set to the\n     *     fully-qualified hostname of `currentUrl` in this case. Matching this cookie requires an\n     *     exact hostname match (not a {@link domainMatch} as per usual)\n     *\n     * @param cookie - The cookie object or cookie string to store. A string value will be parsed into a cookie using {@link Cookie.parse}.\n     * @param url - The domain to store the cookie with.\n     * @param options - Configuration settings to use when storing the cookie.\n     * @public\n     */\n    setCookieSync(cookie, url, options) {\n        const setCookieFn = options\n            ? this.setCookie.bind(this, cookie, url, options)\n            : this.setCookie.bind(this, cookie, url);\n        return this.callSync(setCookieFn);\n    }\n    /**\n     * @internal No doc because this is the overload implementation\n     */\n    getCookies(url, options, callback) {\n        // RFC6365 S5.4\n        if (typeof options === 'function') {\n            callback = options;\n            options = defaultGetCookieOptions;\n        }\n        else if (options === undefined) {\n            options = defaultGetCookieOptions;\n        }\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        const cb = promiseCallback.callback;\n        let context;\n        try {\n            if (typeof url === 'string') {\n                validators.validate(validators.isNonEmptyString(url), cb, url);\n            }\n            context = getCookieContext(url);\n            validators.validate(validators.isObject(options), cb, (0, utils_1.safeToString)(options));\n            validators.validate(typeof cb === 'function', cb);\n        }\n        catch (parameterError) {\n            return promiseCallback.reject(parameterError);\n        }\n        const host = (0, canonicalDomain_1.canonicalDomain)(context.hostname);\n        const path = context.pathname || '/';\n        const secure = context.protocol &&\n            (context.protocol == 'https:' || context.protocol == 'wss:');\n        let sameSiteLevel = 0;\n        if (options.sameSiteContext) {\n            const sameSiteContext = checkSameSiteContext(options.sameSiteContext);\n            if (sameSiteContext == null) {\n                return promiseCallback.reject(new Error(SAME_SITE_CONTEXT_VAL_ERR));\n            }\n            sameSiteLevel = cookie_1.Cookie.sameSiteLevel[sameSiteContext];\n            if (!sameSiteLevel) {\n                return promiseCallback.reject(new Error(SAME_SITE_CONTEXT_VAL_ERR));\n            }\n        }\n        const http = options.http ?? true;\n        const now = Date.now();\n        const expireCheck = options.expire ?? true;\n        const allPaths = options.allPaths ?? false;\n        const store = this.store;\n        function matchingCookie(c) {\n            // \"Either:\n            //   The cookie's host-only-flag is true and the canonicalized\n            //   request-host is identical to the cookie's domain.\n            // Or:\n            //   The cookie's host-only-flag is false and the canonicalized\n            //   request-host domain-matches the cookie's domain.\"\n            if (c.hostOnly) {\n                if (c.domain != host) {\n                    return false;\n                }\n            }\n            else {\n                if (!(0, domainMatch_1.domainMatch)(host ?? undefined, c.domain ?? undefined, false)) {\n                    return false;\n                }\n            }\n            // \"The request-uri's path path-matches the cookie's path.\"\n            if (!allPaths && typeof c.path === 'string' && !(0, pathMatch_1.pathMatch)(path, c.path)) {\n                return false;\n            }\n            // \"If the cookie's secure-only-flag is true, then the request-uri's\n            // scheme must denote a \"secure\" protocol\"\n            if (c.secure && !secure) {\n                return false;\n            }\n            // \"If the cookie's http-only-flag is true, then exclude the cookie if the\n            // cookie-string is being generated for a \"non-HTTP\" API\"\n            if (c.httpOnly && !http) {\n                return false;\n            }\n            // RFC6265bis-02 S5.3.7\n            if (sameSiteLevel) {\n                let cookieLevel;\n                if (c.sameSite === 'lax') {\n                    cookieLevel = cookie_1.Cookie.sameSiteLevel.lax;\n                }\n                else if (c.sameSite === 'strict') {\n                    cookieLevel = cookie_1.Cookie.sameSiteLevel.strict;\n                }\n                else {\n                    cookieLevel = cookie_1.Cookie.sameSiteLevel.none;\n                }\n                if (cookieLevel > sameSiteLevel) {\n                    // only allow cookies at or below the request level\n                    return false;\n                }\n            }\n            // deferred from S5.3\n            // non-RFC: allow retention of expired cookies by choice\n            const expiryTime = c.expiryTime();\n            if (expireCheck && expiryTime != undefined && expiryTime <= now) {\n                store.removeCookie(c.domain, c.path, c.key, () => { }); // result ignored\n                return false;\n            }\n            return true;\n        }\n        store.findCookies(host, allPaths ? null : path, this.allowSpecialUseDomain, (err, cookies) => {\n            if (err) {\n                cb(err);\n                return;\n            }\n            if (cookies == null) {\n                cb(null, []);\n                return;\n            }\n            cookies = cookies.filter(matchingCookie);\n            // sorting of S5.4 part 2\n            if ('sort' in options && options.sort !== false) {\n                cookies = cookies.sort(cookieCompare_1.cookieCompare);\n            }\n            // S5.4 part 3\n            const now = new Date();\n            for (const cookie of cookies) {\n                cookie.lastAccessed = now;\n            }\n            // TODO persist lastAccessed\n            cb(null, cookies);\n        });\n        return promiseCallback.promise;\n    }\n    /**\n     * Synchronously retrieve the list of cookies that can be sent in a Cookie header for the\n     * current URL.\n     *\n     * <strong>Note</strong>: Only works if the configured Store is also synchronous.\n     *\n     * @remarks\n     * - The array of cookies returned will be sorted according to {@link cookieCompare}.\n     *\n     * - The {@link Cookie.lastAccessed} property will be updated on all returned cookies.\n     *\n     * @param url - The domain to store the cookie with.\n     * @param options - Configuration settings to use when retrieving the cookies.\n     */\n    getCookiesSync(url, options) {\n        return this.callSync(this.getCookies.bind(this, url, options)) ?? [];\n    }\n    /**\n     * @internal No doc because this is the overload implementation\n     */\n    getCookieString(url, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = undefined;\n        }\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        const next = function (err, cookies) {\n            if (err) {\n                promiseCallback.callback(err);\n            }\n            else {\n                promiseCallback.callback(null, cookies\n                    ?.sort(cookieCompare_1.cookieCompare)\n                    .map((c) => c.cookieString())\n                    .join('; '));\n            }\n        };\n        this.getCookies(url, options, next);\n        return promiseCallback.promise;\n    }\n    /**\n     * Synchronous version of `.getCookieString()`. Accepts the same options as `.getCookies()` but returns a string suitable for a\n     * `Cookie` header rather than an Array.\n     *\n     * <strong>Note</strong>: Only works if the configured Store is also synchronous.\n     *\n     * @param url - The domain to store the cookie with.\n     * @param options - Configuration settings to use when retrieving the cookies.\n     */\n    getCookieStringSync(url, options) {\n        return (this.callSync(options\n            ? this.getCookieString.bind(this, url, options)\n            : this.getCookieString.bind(this, url)) ?? '');\n    }\n    /**\n     * @internal No doc because this is the overload implementation\n     */\n    getSetCookieStrings(url, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = undefined;\n        }\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        const next = function (err, cookies) {\n            if (err) {\n                promiseCallback.callback(err);\n            }\n            else {\n                promiseCallback.callback(null, cookies?.map((c) => {\n                    return c.toString();\n                }));\n            }\n        };\n        this.getCookies(url, options, next);\n        return promiseCallback.promise;\n    }\n    /**\n     * Synchronous version of `.getSetCookieStrings()`. Returns an array of strings suitable for `Set-Cookie` headers.\n     * Accepts the same options as `.getCookies()`.\n     *\n     * <strong>Note</strong>: Only works if the configured Store is also synchronous.\n     *\n     * @param url - The domain to store the cookie with.\n     * @param options - Configuration settings to use when retrieving the cookies.\n     */\n    getSetCookieStringsSync(url, options = {}) {\n        return (this.callSync(this.getSetCookieStrings.bind(this, url, options)) ?? []);\n    }\n    /**\n     * @internal No doc because this is the overload implementation\n     */\n    serialize(callback) {\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        let type = this.store.constructor.name;\n        if (validators.isObject(type)) {\n            type = null;\n        }\n        // update README.md \"Serialization Format\" if you change this, please!\n        const serialized = {\n            // The version of tough-cookie that serialized this jar. Generally a good\n            // practice since future versions can make data import decisions based on\n            // known past behavior. When/if this matters, use `semver`.\n            version: `tough-cookie@${version_1.version}`,\n            // add the store type, to make humans happy:\n            storeType: type,\n            // CookieJar configuration:\n            rejectPublicSuffixes: this.rejectPublicSuffixes,\n            enableLooseMode: this.enableLooseMode,\n            allowSpecialUseDomain: this.allowSpecialUseDomain,\n            prefixSecurity: getNormalizedPrefixSecurity(this.prefixSecurity),\n            // this gets filled from getAllCookies:\n            cookies: [],\n        };\n        if (typeof this.store.getAllCookies !== 'function') {\n            return promiseCallback.reject(new Error('store does not support getAllCookies and cannot be serialized'));\n        }\n        this.store.getAllCookies((err, cookies) => {\n            if (err) {\n                promiseCallback.callback(err);\n                return;\n            }\n            if (cookies == null) {\n                promiseCallback.callback(null, serialized);\n                return;\n            }\n            serialized.cookies = cookies.map((cookie) => {\n                // convert to serialized 'raw' cookies\n                const serializedCookie = cookie.toJSON();\n                // Remove the index so new ones get assigned during deserialization\n                delete serializedCookie.creationIndex;\n                return serializedCookie;\n            });\n            promiseCallback.callback(null, serialized);\n        });\n        return promiseCallback.promise;\n    }\n    /**\n     * Serialize the CookieJar if the underlying store supports `.getAllCookies`.\n     *\n     * <strong>Note</strong>: Only works if the configured Store is also synchronous.\n     */\n    serializeSync() {\n        return this.callSync((callback) => {\n            this.serialize(callback);\n        });\n    }\n    /**\n     * Alias of {@link CookieJar.serializeSync}. Allows the cookie to be serialized\n     * with `JSON.stringify(cookieJar)`.\n     */\n    toJSON() {\n        return this.serializeSync();\n    }\n    /**\n     * Use the class method CookieJar.deserialize instead of calling this directly\n     * @internal\n     */\n    _importCookies(serialized, callback) {\n        let cookies = undefined;\n        if (serialized &&\n            typeof serialized === 'object' &&\n            (0, utils_1.inOperator)('cookies', serialized) &&\n            Array.isArray(serialized.cookies)) {\n            cookies = serialized.cookies;\n        }\n        if (!cookies) {\n            callback(new Error('serialized jar has no cookies array'), undefined);\n            return;\n        }\n        cookies = cookies.slice(); // do not modify the original\n        const putNext = (err) => {\n            if (err) {\n                callback(err, undefined);\n                return;\n            }\n            if (Array.isArray(cookies)) {\n                if (!cookies.length) {\n                    callback(err, this);\n                    return;\n                }\n                let cookie;\n                try {\n                    cookie = cookie_1.Cookie.fromJSON(cookies.shift());\n                }\n                catch (e) {\n                    callback(e instanceof Error ? e : new Error(), undefined);\n                    return;\n                }\n                if (cookie === undefined) {\n                    putNext(null); // skip this cookie\n                    return;\n                }\n                this.store.putCookie(cookie, putNext);\n            }\n        };\n        putNext(null);\n    }\n    /**\n     * @internal\n     */\n    _importCookiesSync(serialized) {\n        this.callSync(this._importCookies.bind(this, serialized));\n    }\n    /**\n     * @internal No doc because this is the overload implementation\n     */\n    clone(newStore, callback) {\n        if (typeof newStore === 'function') {\n            callback = newStore;\n            newStore = undefined;\n        }\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        const cb = promiseCallback.callback;\n        this.serialize((err, serialized) => {\n            if (err) {\n                return promiseCallback.reject(err);\n            }\n            return CookieJar.deserialize(serialized ?? '', newStore, cb);\n        });\n        return promiseCallback.promise;\n    }\n    /**\n     * @internal\n     */\n    _cloneSync(newStore) {\n        const cloneFn = newStore && typeof newStore !== 'function'\n            ? this.clone.bind(this, newStore)\n            : this.clone.bind(this);\n        return this.callSync((callback) => {\n            cloneFn(callback);\n        });\n    }\n    /**\n     * Produces a deep clone of this CookieJar. Modifications to the original do\n     * not affect the clone, and vice versa.\n     *\n     * <strong>Note</strong>: Only works if both the configured Store and destination\n     * Store are synchronous.\n     *\n     * @remarks\n     * - When no {@link Store} is provided, a new {@link MemoryCookieStore} will be used.\n     *\n     * - Transferring between store types is supported so long as the source\n     *     implements `.getAllCookies()` and the destination implements `.putCookie()`.\n     *\n     * @param newStore - The target {@link Store} to clone cookies into.\n     */\n    cloneSync(newStore) {\n        if (!newStore) {\n            return this._cloneSync();\n        }\n        if (!newStore.synchronous) {\n            throw new Error('CookieJar clone destination store is not synchronous; use async API instead.');\n        }\n        return this._cloneSync(newStore);\n    }\n    /**\n     * @internal No doc because this is the overload implementation\n     */\n    removeAllCookies(callback) {\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        const cb = promiseCallback.callback;\n        const store = this.store;\n        // Check that the store implements its own removeAllCookies(). The default\n        // implementation in Store will immediately call the callback with a \"not\n        // implemented\" Error.\n        if (typeof store.removeAllCookies === 'function' &&\n            store.removeAllCookies !== store_1.Store.prototype.removeAllCookies) {\n            // `Callback<undefined>` and `ErrorCallback` are *technically* incompatible, but for the\n            // standard implementation `cb = (err, result) => {}`, they're essentially the same.\n            store.removeAllCookies(cb);\n            return promiseCallback.promise;\n        }\n        store.getAllCookies((err, cookies) => {\n            if (err) {\n                cb(err);\n                return;\n            }\n            if (!cookies) {\n                cookies = [];\n            }\n            if (cookies.length === 0) {\n                cb(null, undefined);\n                return;\n            }\n            let completedCount = 0;\n            const removeErrors = [];\n            // TODO: Refactor to avoid using callback\n            const removeCookieCb = function removeCookieCb(removeErr) {\n                if (removeErr) {\n                    removeErrors.push(removeErr);\n                }\n                completedCount++;\n                if (completedCount === cookies.length) {\n                    if (removeErrors[0])\n                        cb(removeErrors[0]);\n                    else\n                        cb(null, undefined);\n                    return;\n                }\n            };\n            cookies.forEach((cookie) => {\n                store.removeCookie(cookie.domain, cookie.path, cookie.key, removeCookieCb);\n            });\n        });\n        return promiseCallback.promise;\n    }\n    /**\n     * Removes all cookies from the CookieJar.\n     *\n     * <strong>Note</strong>: Only works if the configured Store is also synchronous.\n     *\n     * @remarks\n     * - This is a new backwards-compatible feature of tough-cookie version 2.5,\n     *     so not all Stores will implement it efficiently. For Stores that do not\n     *     implement `removeAllCookies`, the fallback is to call `removeCookie` after\n     *     `getAllCookies`.\n     *\n     * - If `getAllCookies` fails or isn't implemented in the Store, an error is returned.\n     *\n     * - If one or more of the `removeCookie` calls fail, only the first error is returned.\n     */\n    removeAllCookiesSync() {\n        this.callSync((callback) => {\n            // `Callback<undefined>` and `ErrorCallback` are *technically* incompatible, but for the\n            // standard implementation `cb = (err, result) => {}`, they're essentially the same.\n            this.removeAllCookies(callback);\n        });\n    }\n    /**\n     * @internal No doc because this is the overload implementation\n     */\n    static deserialize(strOrObj, store, callback) {\n        if (typeof store === 'function') {\n            callback = store;\n            store = undefined;\n        }\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        let serialized;\n        if (typeof strOrObj === 'string') {\n            try {\n                serialized = JSON.parse(strOrObj);\n            }\n            catch (e) {\n                return promiseCallback.reject(e instanceof Error ? e : new Error());\n            }\n        }\n        else {\n            serialized = strOrObj;\n        }\n        const readSerializedProperty = (property) => {\n            return serialized &&\n                typeof serialized === 'object' &&\n                (0, utils_1.inOperator)(property, serialized)\n                ? serialized[property]\n                : undefined;\n        };\n        const readSerializedBoolean = (property) => {\n            const value = readSerializedProperty(property);\n            return typeof value === 'boolean' ? value : undefined;\n        };\n        const readSerializedString = (property) => {\n            const value = readSerializedProperty(property);\n            return typeof value === 'string' ? value : undefined;\n        };\n        const jar = new CookieJar(store, {\n            rejectPublicSuffixes: readSerializedBoolean('rejectPublicSuffixes'),\n            looseMode: readSerializedBoolean('enableLooseMode'),\n            allowSpecialUseDomain: readSerializedBoolean('allowSpecialUseDomain'),\n            prefixSecurity: getNormalizedPrefixSecurity(readSerializedString('prefixSecurity') ?? 'silent'),\n        });\n        jar._importCookies(serialized, (err) => {\n            if (err) {\n                promiseCallback.callback(err);\n                return;\n            }\n            promiseCallback.callback(null, jar);\n        });\n        return promiseCallback.promise;\n    }\n    /**\n     * A new CookieJar is created and the serialized {@link Cookie} values are added to\n     * the underlying store. Each {@link Cookie} is added via `store.putCookie(...)` in\n     * the order in which they appear in the serialization.\n     *\n     * <strong>Note</strong>: Only works if the configured Store is also synchronous.\n     *\n     * @remarks\n     * - When no {@link Store} is provided, a new {@link MemoryCookieStore} will be used.\n     *\n     * - As a convenience, if `strOrObj` is a string, it is passed through `JSON.parse` first.\n     *\n     * @param strOrObj - A JSON string or object representing the deserialized cookies.\n     * @param store - The underlying store to persist the deserialized cookies into.\n     */\n    static deserializeSync(strOrObj, store) {\n        const serialized = typeof strOrObj === 'string' ? JSON.parse(strOrObj) : strOrObj;\n        const readSerializedProperty = (property) => {\n            return serialized &&\n                typeof serialized === 'object' &&\n                (0, utils_1.inOperator)(property, serialized)\n                ? serialized[property]\n                : undefined;\n        };\n        const readSerializedBoolean = (property) => {\n            const value = readSerializedProperty(property);\n            return typeof value === 'boolean' ? value : undefined;\n        };\n        const readSerializedString = (property) => {\n            const value = readSerializedProperty(property);\n            return typeof value === 'string' ? value : undefined;\n        };\n        const jar = new CookieJar(store, {\n            rejectPublicSuffixes: readSerializedBoolean('rejectPublicSuffixes'),\n            looseMode: readSerializedBoolean('enableLooseMode'),\n            allowSpecialUseDomain: readSerializedBoolean('allowSpecialUseDomain'),\n            prefixSecurity: getNormalizedPrefixSecurity(readSerializedString('prefixSecurity') ?? 'silent'),\n        });\n        // catch this mistake early:\n        if (!jar.store.synchronous) {\n            throw new Error('CookieJar store is not synchronous; use async API instead.');\n        }\n        jar._importCookiesSync(serialized);\n        return jar;\n    }\n    /**\n     * Alias of {@link CookieJar.deserializeSync}.\n     *\n     * @remarks\n     * - When no {@link Store} is provided, a new {@link MemoryCookieStore} will be used.\n     *\n     * - As a convenience, if `strOrObj` is a string, it is passed through `JSON.parse` first.\n     *\n     * @param jsonString - A JSON string or object representing the deserialized cookies.\n     * @param store - The underlying store to persist the deserialized cookies into.\n     */\n    static fromJSON(jsonString, store) {\n        return CookieJar.deserializeSync(jsonString, store);\n    }\n}\nexports.CookieJar = CookieJar;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/cookie/cookieJar.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/cookie/defaultPath.js":
/*!**************************************************************!*\
  !*** ./node_modules/tough-cookie/dist/cookie/defaultPath.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultPath = defaultPath;\n/**\n * Given a current request/response path, gives the path appropriate for storing\n * in a cookie. This is basically the \"directory\" of a \"file\" in the path, but\n * is specified by {@link https://www.rfc-editor.org/rfc/rfc6265.html#section-5.1.4 | RFC6265 - Section 5.1.4}.\n *\n * @remarks\n * ### RFC6265 - Section 5.1.4\n *\n * The user agent MUST use an algorithm equivalent to the following algorithm to compute the default-path of a cookie:\n *\n * 1. Let uri-path be the path portion of the request-uri if such a\n *     portion exists (and empty otherwise).  For example, if the\n *     request-uri contains just a path (and optional query string),\n *     then the uri-path is that path (without the %x3F (\"?\") character\n *     or query string), and if the request-uri contains a full\n *     absoluteURI, the uri-path is the path component of that URI.\n *\n * 2. If the uri-path is empty or if the first character of the uri-\n *     path is not a %x2F (\"/\") character, output %x2F (\"/\") and skip\n *     the remaining steps.\n *\n * 3. If the uri-path contains no more than one %x2F (\"/\") character,\n *     output %x2F (\"/\") and skip the remaining step.\n *\n * 4. Output the characters of the uri-path from the first character up\n *     to, but not including, the right-most %x2F (\"/\").\n *\n * @example\n * ```\n * defaultPath('') === '/'\n * defaultPath('/some-path') === '/'\n * defaultPath('/some-parent-path/some-path') === '/some-parent-path'\n * defaultPath('relative-path') === '/'\n * ```\n *\n * @param path - the path portion of the request-uri (excluding the hostname, query, fragment, and so on)\n * @public\n */\nfunction defaultPath(path) {\n    // \"2. If the uri-path is empty or if the first character of the uri-path is not\n    // a %x2F (\"/\") character, output %x2F (\"/\") and skip the remaining steps.\n    if (!path || path.slice(0, 1) !== '/') {\n        return '/';\n    }\n    // \"3. If the uri-path contains no more than one %x2F (\"/\") character, output\n    // %x2F (\"/\") and skip the remaining step.\"\n    if (path === '/') {\n        return path;\n    }\n    const rightSlash = path.lastIndexOf('/');\n    if (rightSlash === 0) {\n        return '/';\n    }\n    // \"4. Output the characters of the uri-path from the first character up to,\n    // but not including, the right-most %x2F (\"/\").\"\n    return path.slice(0, rightSlash);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3QvY29va2llL2RlZmF1bHRQYXRoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMEZBQTBGO0FBQzlHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZGFyc2hcXE9uZURyaXZlXFxEZXNrdG9wXFxDb2RlXFxNRVJOIFdlYiBEZXZcXEdyYXBoaVxcbm9kZV9tb2R1bGVzXFx0b3VnaC1jb29raWVcXGRpc3RcXGNvb2tpZVxcZGVmYXVsdFBhdGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHRQYXRoID0gZGVmYXVsdFBhdGg7XG4vKipcbiAqIEdpdmVuIGEgY3VycmVudCByZXF1ZXN0L3Jlc3BvbnNlIHBhdGgsIGdpdmVzIHRoZSBwYXRoIGFwcHJvcHJpYXRlIGZvciBzdG9yaW5nXG4gKiBpbiBhIGNvb2tpZS4gVGhpcyBpcyBiYXNpY2FsbHkgdGhlIFwiZGlyZWN0b3J5XCIgb2YgYSBcImZpbGVcIiBpbiB0aGUgcGF0aCwgYnV0XG4gKiBpcyBzcGVjaWZpZWQgYnkge0BsaW5rIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM2MjY1Lmh0bWwjc2VjdGlvbi01LjEuNCB8IFJGQzYyNjUgLSBTZWN0aW9uIDUuMS40fS5cbiAqXG4gKiBAcmVtYXJrc1xuICogIyMjIFJGQzYyNjUgLSBTZWN0aW9uIDUuMS40XG4gKlxuICogVGhlIHVzZXIgYWdlbnQgTVVTVCB1c2UgYW4gYWxnb3JpdGhtIGVxdWl2YWxlbnQgdG8gdGhlIGZvbGxvd2luZyBhbGdvcml0aG0gdG8gY29tcHV0ZSB0aGUgZGVmYXVsdC1wYXRoIG9mIGEgY29va2llOlxuICpcbiAqIDEuIExldCB1cmktcGF0aCBiZSB0aGUgcGF0aCBwb3J0aW9uIG9mIHRoZSByZXF1ZXN0LXVyaSBpZiBzdWNoIGFcbiAqICAgICBwb3J0aW9uIGV4aXN0cyAoYW5kIGVtcHR5IG90aGVyd2lzZSkuICBGb3IgZXhhbXBsZSwgaWYgdGhlXG4gKiAgICAgcmVxdWVzdC11cmkgY29udGFpbnMganVzdCBhIHBhdGggKGFuZCBvcHRpb25hbCBxdWVyeSBzdHJpbmcpLFxuICogICAgIHRoZW4gdGhlIHVyaS1wYXRoIGlzIHRoYXQgcGF0aCAod2l0aG91dCB0aGUgJXgzRiAoXCI/XCIpIGNoYXJhY3RlclxuICogICAgIG9yIHF1ZXJ5IHN0cmluZyksIGFuZCBpZiB0aGUgcmVxdWVzdC11cmkgY29udGFpbnMgYSBmdWxsXG4gKiAgICAgYWJzb2x1dGVVUkksIHRoZSB1cmktcGF0aCBpcyB0aGUgcGF0aCBjb21wb25lbnQgb2YgdGhhdCBVUkkuXG4gKlxuICogMi4gSWYgdGhlIHVyaS1wYXRoIGlzIGVtcHR5IG9yIGlmIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIHVyaS1cbiAqICAgICBwYXRoIGlzIG5vdCBhICV4MkYgKFwiL1wiKSBjaGFyYWN0ZXIsIG91dHB1dCAleDJGIChcIi9cIikgYW5kIHNraXBcbiAqICAgICB0aGUgcmVtYWluaW5nIHN0ZXBzLlxuICpcbiAqIDMuIElmIHRoZSB1cmktcGF0aCBjb250YWlucyBubyBtb3JlIHRoYW4gb25lICV4MkYgKFwiL1wiKSBjaGFyYWN0ZXIsXG4gKiAgICAgb3V0cHV0ICV4MkYgKFwiL1wiKSBhbmQgc2tpcCB0aGUgcmVtYWluaW5nIHN0ZXAuXG4gKlxuICogNC4gT3V0cHV0IHRoZSBjaGFyYWN0ZXJzIG9mIHRoZSB1cmktcGF0aCBmcm9tIHRoZSBmaXJzdCBjaGFyYWN0ZXIgdXBcbiAqICAgICB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIHRoZSByaWdodC1tb3N0ICV4MkYgKFwiL1wiKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBkZWZhdWx0UGF0aCgnJykgPT09ICcvJ1xuICogZGVmYXVsdFBhdGgoJy9zb21lLXBhdGgnKSA9PT0gJy8nXG4gKiBkZWZhdWx0UGF0aCgnL3NvbWUtcGFyZW50LXBhdGgvc29tZS1wYXRoJykgPT09ICcvc29tZS1wYXJlbnQtcGF0aCdcbiAqIGRlZmF1bHRQYXRoKCdyZWxhdGl2ZS1wYXRoJykgPT09ICcvJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIHBhdGggLSB0aGUgcGF0aCBwb3J0aW9uIG9mIHRoZSByZXF1ZXN0LXVyaSAoZXhjbHVkaW5nIHRoZSBob3N0bmFtZSwgcXVlcnksIGZyYWdtZW50LCBhbmQgc28gb24pXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRQYXRoKHBhdGgpIHtcbiAgICAvLyBcIjIuIElmIHRoZSB1cmktcGF0aCBpcyBlbXB0eSBvciBpZiB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIHRoZSB1cmktcGF0aCBpcyBub3RcbiAgICAvLyBhICV4MkYgKFwiL1wiKSBjaGFyYWN0ZXIsIG91dHB1dCAleDJGIChcIi9cIikgYW5kIHNraXAgdGhlIHJlbWFpbmluZyBzdGVwcy5cbiAgICBpZiAoIXBhdGggfHwgcGF0aC5zbGljZSgwLCAxKSAhPT0gJy8nKSB7XG4gICAgICAgIHJldHVybiAnLyc7XG4gICAgfVxuICAgIC8vIFwiMy4gSWYgdGhlIHVyaS1wYXRoIGNvbnRhaW5zIG5vIG1vcmUgdGhhbiBvbmUgJXgyRiAoXCIvXCIpIGNoYXJhY3Rlciwgb3V0cHV0XG4gICAgLy8gJXgyRiAoXCIvXCIpIGFuZCBza2lwIHRoZSByZW1haW5pbmcgc3RlcC5cIlxuICAgIGlmIChwYXRoID09PSAnLycpIHtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuICAgIGNvbnN0IHJpZ2h0U2xhc2ggPSBwYXRoLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgaWYgKHJpZ2h0U2xhc2ggPT09IDApIHtcbiAgICAgICAgcmV0dXJuICcvJztcbiAgICB9XG4gICAgLy8gXCI0LiBPdXRwdXQgdGhlIGNoYXJhY3RlcnMgb2YgdGhlIHVyaS1wYXRoIGZyb20gdGhlIGZpcnN0IGNoYXJhY3RlciB1cCB0byxcbiAgICAvLyBidXQgbm90IGluY2x1ZGluZywgdGhlIHJpZ2h0LW1vc3QgJXgyRiAoXCIvXCIpLlwiXG4gICAgcmV0dXJuIHBhdGguc2xpY2UoMCwgcmlnaHRTbGFzaCk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/cookie/defaultPath.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/cookie/domainMatch.js":
/*!**************************************************************!*\
  !*** ./node_modules/tough-cookie/dist/cookie/domainMatch.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.domainMatch = domainMatch;\nconst canonicalDomain_1 = __webpack_require__(/*! ./canonicalDomain */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/canonicalDomain.js\");\n// Dumped from ip-regex@4.0.0, with the following changes:\n// * all capturing groups converted to non-capturing -- \"(?:)\"\n// * support for IPv6 Scoped Literal (\"%eth1\") removed\n// * lowercase hexadecimal only\nconst IP_REGEX_LOWERCASE = /(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-f\\d]{1,4}:){7}(?:[a-f\\d]{1,4}|:)|(?:[a-f\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-f\\d]{1,4}|:)|(?:[a-f\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,2}|:)|(?:[a-f\\d]{1,4}:){4}(?:(?::[a-f\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,3}|:)|(?:[a-f\\d]{1,4}:){3}(?:(?::[a-f\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,4}|:)|(?:[a-f\\d]{1,4}:){2}(?:(?::[a-f\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,5}|:)|(?:[a-f\\d]{1,4}:){1}(?:(?::[a-f\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-f\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,7}|:)))$)/;\n/**\n * Answers \"does this real domain match the domain in a cookie?\". The `domain` is the \"current\" domain name and the\n * `cookieDomain` is the \"cookie\" domain name. Matches according to {@link https://www.rfc-editor.org/rfc/rfc6265.html#section-5.1.3 | RFC6265 - Section 5.1.3},\n * but it helps to think of it as a \"suffix match\".\n *\n * @remarks\n * ### 5.1.3.  Domain Matching\n *\n * A string domain-matches a given domain string if at least one of the\n * following conditions hold:\n *\n * - The domain string and the string are identical.  (Note that both\n *     the domain string and the string will have been canonicalized to\n *     lower case at this point.)\n *\n * - All of the following conditions hold:\n *\n *     - The domain string is a suffix of the string.\n *\n *     - The last character of the string that is not included in the\n *         domain string is a %x2E (\".\") character.\n *\n *     - The string is a host name (i.e., not an IP address).\n *\n * @example\n * ```\n * domainMatch('example.com', 'example.com') === true\n * domainMatch('eXaMpLe.cOm', 'ExAmPlE.CoM') === true\n * domainMatch('no.ca', 'yes.ca') === false\n * ```\n *\n * @param domain - The domain string to test\n * @param cookieDomain - The cookie domain string to match against\n * @param canonicalize - The canonicalize parameter toggles whether the domain parameters get normalized with canonicalDomain or not\n * @public\n */\nfunction domainMatch(domain, cookieDomain, canonicalize) {\n    if (domain == null || cookieDomain == null) {\n        return undefined;\n    }\n    let _str;\n    let _domStr;\n    if (canonicalize !== false) {\n        _str = (0, canonicalDomain_1.canonicalDomain)(domain);\n        _domStr = (0, canonicalDomain_1.canonicalDomain)(cookieDomain);\n    }\n    else {\n        _str = domain;\n        _domStr = cookieDomain;\n    }\n    if (_str == null || _domStr == null) {\n        return undefined;\n    }\n    /*\n     * S5.1.3:\n     * \"A string domain-matches a given domain string if at least one of the\n     * following conditions hold:\"\n     *\n     * \" o The domain string and the string are identical. (Note that both the\n     * domain string and the string will have been canonicalized to lower case at\n     * this point)\"\n     */\n    if (_str == _domStr) {\n        return true;\n    }\n    /* \" o All of the following [three] conditions hold:\" */\n    /* \"* The domain string is a suffix of the string\" */\n    const idx = _str.lastIndexOf(cookieDomain);\n    if (idx <= 0) {\n        return false; // it's a non-match (-1) or prefix (0)\n    }\n    // next, check it's a proper suffix\n    // e.g., \"a.b.c\".indexOf(\"b.c\") === 2\n    // 5 === 3+2\n    if (_str.length !== _domStr.length + idx) {\n        return false; // it's not a suffix\n    }\n    /* \"  * The last character of the string that is not included in the\n     * domain string is a %x2E (\".\") character.\" */\n    if (_str.substring(idx - 1, idx) !== '.') {\n        return false; // doesn't align on \".\"\n    }\n    /* \"  * The string is a host name (i.e., not an IP address).\" */\n    return !IP_REGEX_LOWERCASE.test(_str);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3QvY29va2llL2RvbWFpbk1hdGNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQiwwQkFBMEIsbUJBQU8sQ0FBQywyRkFBbUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpSEFBaUgsRUFBRSxxQkFBcUIsSUFBSSxHQUFHLEVBQUUsV0FBVyxJQUFJLGVBQWUsSUFBSSxHQUFHLEVBQUUsb0ZBQW9GLEVBQUUsVUFBVSxJQUFJLGVBQWUsSUFBSSxHQUFHLEVBQUUscUZBQXFGLEVBQUUsYUFBYSxJQUFJLEVBQUUsSUFBSSxlQUFlLElBQUksR0FBRyxFQUFFLGVBQWUsSUFBSSxFQUFFLElBQUksa0ZBQWtGLEVBQUUsYUFBYSxJQUFJLEVBQUUsSUFBSSxlQUFlLElBQUksR0FBRyxFQUFFLGVBQWUsSUFBSSxFQUFFLElBQUksa0ZBQWtGLEVBQUUsYUFBYSxJQUFJLEVBQUUsSUFBSSxlQUFlLElBQUksR0FBRyxFQUFFLGVBQWUsSUFBSSxFQUFFLElBQUksa0ZBQWtGLEVBQUUsYUFBYSxJQUFJLEVBQUUsSUFBSSxlQUFlLElBQUksR0FBRyxFQUFFLGVBQWUsSUFBSSxFQUFFLElBQUksa0ZBQWtGLEVBQUUsYUFBYSxJQUFJLEVBQUUsSUFBSSx1QkFBdUIsSUFBSSxFQUFFLElBQUksa0ZBQWtGLEVBQUUsYUFBYSxJQUFJLEVBQUUsSUFBSTtBQUM5cEM7QUFDQTtBQUNBLHFFQUFxRSwwRkFBMEY7QUFDL0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZGFyc2hcXE9uZURyaXZlXFxEZXNrdG9wXFxDb2RlXFxNRVJOIFdlYiBEZXZcXEdyYXBoaVxcbm9kZV9tb2R1bGVzXFx0b3VnaC1jb29raWVcXGRpc3RcXGNvb2tpZVxcZG9tYWluTWF0Y2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRvbWFpbk1hdGNoID0gZG9tYWluTWF0Y2g7XG5jb25zdCBjYW5vbmljYWxEb21haW5fMSA9IHJlcXVpcmUoXCIuL2Nhbm9uaWNhbERvbWFpblwiKTtcbi8vIER1bXBlZCBmcm9tIGlwLXJlZ2V4QDQuMC4wLCB3aXRoIHRoZSBmb2xsb3dpbmcgY2hhbmdlczpcbi8vICogYWxsIGNhcHR1cmluZyBncm91cHMgY29udmVydGVkIHRvIG5vbi1jYXB0dXJpbmcgLS0gXCIoPzopXCJcbi8vICogc3VwcG9ydCBmb3IgSVB2NiBTY29wZWQgTGl0ZXJhbCAoXCIlZXRoMVwiKSByZW1vdmVkXG4vLyAqIGxvd2VyY2FzZSBoZXhhZGVjaW1hbCBvbmx5XG5jb25zdCBJUF9SRUdFWF9MT1dFUkNBU0UgPSAvKD86Xig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M30kKXwoPzpeKD86KD86W2EtZlxcZF17MSw0fTopezd9KD86W2EtZlxcZF17MSw0fXw6KXwoPzpbYS1mXFxkXXsxLDR9Oil7Nn0oPzooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkoPzpcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkpezN9fDpbYS1mXFxkXXsxLDR9fDopfCg/OlthLWZcXGRdezEsNH06KXs1fSg/OjooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkoPzpcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkpezN9fCg/OjpbYS1mXFxkXXsxLDR9KXsxLDJ9fDopfCg/OlthLWZcXGRdezEsNH06KXs0fSg/Oig/OjpbYS1mXFxkXXsxLDR9KXswLDF9Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M318KD86OlthLWZcXGRdezEsNH0pezEsM318Oil8KD86W2EtZlxcZF17MSw0fTopezN9KD86KD86OlthLWZcXGRdezEsNH0pezAsMn06KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKD86XFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKXszfXwoPzo6W2EtZlxcZF17MSw0fSl7MSw0fXw6KXwoPzpbYS1mXFxkXXsxLDR9Oil7Mn0oPzooPzo6W2EtZlxcZF17MSw0fSl7MCwzfTooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkoPzpcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkpezN9fCg/OjpbYS1mXFxkXXsxLDR9KXsxLDV9fDopfCg/OlthLWZcXGRdezEsNH06KXsxfSg/Oig/OjpbYS1mXFxkXXsxLDR9KXswLDR9Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M318KD86OlthLWZcXGRdezEsNH0pezEsNn18Oil8KD86Oig/Oig/OjpbYS1mXFxkXXsxLDR9KXswLDV9Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M318KD86OlthLWZcXGRdezEsNH0pezEsN318OikpKSQpLztcbi8qKlxuICogQW5zd2VycyBcImRvZXMgdGhpcyByZWFsIGRvbWFpbiBtYXRjaCB0aGUgZG9tYWluIGluIGEgY29va2llP1wiLiBUaGUgYGRvbWFpbmAgaXMgdGhlIFwiY3VycmVudFwiIGRvbWFpbiBuYW1lIGFuZCB0aGVcbiAqIGBjb29raWVEb21haW5gIGlzIHRoZSBcImNvb2tpZVwiIGRvbWFpbiBuYW1lLiBNYXRjaGVzIGFjY29yZGluZyB0byB7QGxpbmsgaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzYyNjUuaHRtbCNzZWN0aW9uLTUuMS4zIHwgUkZDNjI2NSAtIFNlY3Rpb24gNS4xLjN9LFxuICogYnV0IGl0IGhlbHBzIHRvIHRoaW5rIG9mIGl0IGFzIGEgXCJzdWZmaXggbWF0Y2hcIi5cbiAqXG4gKiBAcmVtYXJrc1xuICogIyMjIDUuMS4zLiAgRG9tYWluIE1hdGNoaW5nXG4gKlxuICogQSBzdHJpbmcgZG9tYWluLW1hdGNoZXMgYSBnaXZlbiBkb21haW4gc3RyaW5nIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGVcbiAqIGZvbGxvd2luZyBjb25kaXRpb25zIGhvbGQ6XG4gKlxuICogLSBUaGUgZG9tYWluIHN0cmluZyBhbmQgdGhlIHN0cmluZyBhcmUgaWRlbnRpY2FsLiAgKE5vdGUgdGhhdCBib3RoXG4gKiAgICAgdGhlIGRvbWFpbiBzdHJpbmcgYW5kIHRoZSBzdHJpbmcgd2lsbCBoYXZlIGJlZW4gY2Fub25pY2FsaXplZCB0b1xuICogICAgIGxvd2VyIGNhc2UgYXQgdGhpcyBwb2ludC4pXG4gKlxuICogLSBBbGwgb2YgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGhvbGQ6XG4gKlxuICogICAgIC0gVGhlIGRvbWFpbiBzdHJpbmcgaXMgYSBzdWZmaXggb2YgdGhlIHN0cmluZy5cbiAqXG4gKiAgICAgLSBUaGUgbGFzdCBjaGFyYWN0ZXIgb2YgdGhlIHN0cmluZyB0aGF0IGlzIG5vdCBpbmNsdWRlZCBpbiB0aGVcbiAqICAgICAgICAgZG9tYWluIHN0cmluZyBpcyBhICV4MkUgKFwiLlwiKSBjaGFyYWN0ZXIuXG4gKlxuICogICAgIC0gVGhlIHN0cmluZyBpcyBhIGhvc3QgbmFtZSAoaS5lLiwgbm90IGFuIElQIGFkZHJlc3MpLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIGRvbWFpbk1hdGNoKCdleGFtcGxlLmNvbScsICdleGFtcGxlLmNvbScpID09PSB0cnVlXG4gKiBkb21haW5NYXRjaCgnZVhhTXBMZS5jT20nLCAnRXhBbVBsRS5Db00nKSA9PT0gdHJ1ZVxuICogZG9tYWluTWF0Y2goJ25vLmNhJywgJ3llcy5jYScpID09PSBmYWxzZVxuICogYGBgXG4gKlxuICogQHBhcmFtIGRvbWFpbiAtIFRoZSBkb21haW4gc3RyaW5nIHRvIHRlc3RcbiAqIEBwYXJhbSBjb29raWVEb21haW4gLSBUaGUgY29va2llIGRvbWFpbiBzdHJpbmcgdG8gbWF0Y2ggYWdhaW5zdFxuICogQHBhcmFtIGNhbm9uaWNhbGl6ZSAtIFRoZSBjYW5vbmljYWxpemUgcGFyYW1ldGVyIHRvZ2dsZXMgd2hldGhlciB0aGUgZG9tYWluIHBhcmFtZXRlcnMgZ2V0IG5vcm1hbGl6ZWQgd2l0aCBjYW5vbmljYWxEb21haW4gb3Igbm90XG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGRvbWFpbk1hdGNoKGRvbWFpbiwgY29va2llRG9tYWluLCBjYW5vbmljYWxpemUpIHtcbiAgICBpZiAoZG9tYWluID09IG51bGwgfHwgY29va2llRG9tYWluID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgbGV0IF9zdHI7XG4gICAgbGV0IF9kb21TdHI7XG4gICAgaWYgKGNhbm9uaWNhbGl6ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgX3N0ciA9ICgwLCBjYW5vbmljYWxEb21haW5fMS5jYW5vbmljYWxEb21haW4pKGRvbWFpbik7XG4gICAgICAgIF9kb21TdHIgPSAoMCwgY2Fub25pY2FsRG9tYWluXzEuY2Fub25pY2FsRG9tYWluKShjb29raWVEb21haW4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgX3N0ciA9IGRvbWFpbjtcbiAgICAgICAgX2RvbVN0ciA9IGNvb2tpZURvbWFpbjtcbiAgICB9XG4gICAgaWYgKF9zdHIgPT0gbnVsbCB8fCBfZG9tU3RyID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLypcbiAgICAgKiBTNS4xLjM6XG4gICAgICogXCJBIHN0cmluZyBkb21haW4tbWF0Y2hlcyBhIGdpdmVuIGRvbWFpbiBzdHJpbmcgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZVxuICAgICAqIGZvbGxvd2luZyBjb25kaXRpb25zIGhvbGQ6XCJcbiAgICAgKlxuICAgICAqIFwiIG8gVGhlIGRvbWFpbiBzdHJpbmcgYW5kIHRoZSBzdHJpbmcgYXJlIGlkZW50aWNhbC4gKE5vdGUgdGhhdCBib3RoIHRoZVxuICAgICAqIGRvbWFpbiBzdHJpbmcgYW5kIHRoZSBzdHJpbmcgd2lsbCBoYXZlIGJlZW4gY2Fub25pY2FsaXplZCB0byBsb3dlciBjYXNlIGF0XG4gICAgICogdGhpcyBwb2ludClcIlxuICAgICAqL1xuICAgIGlmIChfc3RyID09IF9kb21TdHIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qIFwiIG8gQWxsIG9mIHRoZSBmb2xsb3dpbmcgW3RocmVlXSBjb25kaXRpb25zIGhvbGQ6XCIgKi9cbiAgICAvKiBcIiogVGhlIGRvbWFpbiBzdHJpbmcgaXMgYSBzdWZmaXggb2YgdGhlIHN0cmluZ1wiICovXG4gICAgY29uc3QgaWR4ID0gX3N0ci5sYXN0SW5kZXhPZihjb29raWVEb21haW4pO1xuICAgIGlmIChpZHggPD0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGl0J3MgYSBub24tbWF0Y2ggKC0xKSBvciBwcmVmaXggKDApXG4gICAgfVxuICAgIC8vIG5leHQsIGNoZWNrIGl0J3MgYSBwcm9wZXIgc3VmZml4XG4gICAgLy8gZS5nLiwgXCJhLmIuY1wiLmluZGV4T2YoXCJiLmNcIikgPT09IDJcbiAgICAvLyA1ID09PSAzKzJcbiAgICBpZiAoX3N0ci5sZW5ndGggIT09IF9kb21TdHIubGVuZ3RoICsgaWR4KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gaXQncyBub3QgYSBzdWZmaXhcbiAgICB9XG4gICAgLyogXCIgICogVGhlIGxhc3QgY2hhcmFjdGVyIG9mIHRoZSBzdHJpbmcgdGhhdCBpcyBub3QgaW5jbHVkZWQgaW4gdGhlXG4gICAgICogZG9tYWluIHN0cmluZyBpcyBhICV4MkUgKFwiLlwiKSBjaGFyYWN0ZXIuXCIgKi9cbiAgICBpZiAoX3N0ci5zdWJzdHJpbmcoaWR4IC0gMSwgaWR4KSAhPT0gJy4nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gZG9lc24ndCBhbGlnbiBvbiBcIi5cIlxuICAgIH1cbiAgICAvKiBcIiAgKiBUaGUgc3RyaW5nIGlzIGEgaG9zdCBuYW1lIChpLmUuLCBub3QgYW4gSVAgYWRkcmVzcykuXCIgKi9cbiAgICByZXR1cm4gIUlQX1JFR0VYX0xPV0VSQ0FTRS50ZXN0KF9zdHIpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/cookie/domainMatch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/cookie/formatDate.js":
/*!*************************************************************!*\
  !*** ./node_modules/tough-cookie/dist/cookie/formatDate.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatDate = formatDate;\n/**\n * Format a {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date | Date} into\n * the {@link https://www.rfc-editor.org/rfc/rfc2616#section-3.3.1 | preferred Internet standard format}\n * defined in {@link https://www.rfc-editor.org/rfc/rfc822#section-5 | RFC822} and\n * updated in {@link https://www.rfc-editor.org/rfc/rfc1123#page-55 | RFC1123}.\n *\n * @example\n * ```\n * formatDate(new Date(0)) === 'Thu, 01 Jan 1970 00:00:00 GMT`\n * ```\n *\n * @param date - the date value to format\n * @public\n */\nfunction formatDate(date) {\n    return date.toUTCString();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3QvY29va2llL2Zvcm1hdERhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCO0FBQ0EsYUFBYSxvR0FBb0c7QUFDakgsUUFBUTtBQUNSLGVBQWUsZ0VBQWdFO0FBQy9FLGVBQWUsK0RBQStEO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxkYXJzaFxcT25lRHJpdmVcXERlc2t0b3BcXENvZGVcXE1FUk4gV2ViIERldlxcR3JhcGhpXFxub2RlX21vZHVsZXNcXHRvdWdoLWNvb2tpZVxcZGlzdFxcY29va2llXFxmb3JtYXREYXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mb3JtYXREYXRlID0gZm9ybWF0RGF0ZTtcbi8qKlxuICogRm9ybWF0IGEge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGUgfCBEYXRlfSBpbnRvXG4gKiB0aGUge0BsaW5rIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmMyNjE2I3NlY3Rpb24tMy4zLjEgfCBwcmVmZXJyZWQgSW50ZXJuZXQgc3RhbmRhcmQgZm9ybWF0fVxuICogZGVmaW5lZCBpbiB7QGxpbmsgaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzgyMiNzZWN0aW9uLTUgfCBSRkM4MjJ9IGFuZFxuICogdXBkYXRlZCBpbiB7QGxpbmsgaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzExMjMjcGFnZS01NSB8IFJGQzExMjN9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIGZvcm1hdERhdGUobmV3IERhdGUoMCkpID09PSAnVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVRgXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIHRoZSBkYXRlIHZhbHVlIHRvIGZvcm1hdFxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS50b1VUQ1N0cmluZygpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/cookie/formatDate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/cookie/index.js":
/*!********************************************************!*\
  !*** ./node_modules/tough-cookie/dist/cookie/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.permutePath = exports.parseDate = exports.formatDate = exports.domainMatch = exports.defaultPath = exports.CookieJar = exports.cookieCompare = exports.Cookie = exports.PrefixSecurityEnum = exports.canonicalDomain = exports.version = exports.ParameterError = exports.Store = exports.getPublicSuffix = exports.permuteDomain = exports.pathMatch = exports.MemoryCookieStore = void 0;\nexports.parse = parse;\nexports.fromJSON = fromJSON;\nvar memstore_1 = __webpack_require__(/*! ../memstore */ \"(rsc)/./node_modules/tough-cookie/dist/memstore.js\");\nObject.defineProperty(exports, \"MemoryCookieStore\", ({ enumerable: true, get: function () { return memstore_1.MemoryCookieStore; } }));\nvar pathMatch_1 = __webpack_require__(/*! ../pathMatch */ \"(rsc)/./node_modules/tough-cookie/dist/pathMatch.js\");\nObject.defineProperty(exports, \"pathMatch\", ({ enumerable: true, get: function () { return pathMatch_1.pathMatch; } }));\nvar permuteDomain_1 = __webpack_require__(/*! ../permuteDomain */ \"(rsc)/./node_modules/tough-cookie/dist/permuteDomain.js\");\nObject.defineProperty(exports, \"permuteDomain\", ({ enumerable: true, get: function () { return permuteDomain_1.permuteDomain; } }));\nvar getPublicSuffix_1 = __webpack_require__(/*! ../getPublicSuffix */ \"(rsc)/./node_modules/tough-cookie/dist/getPublicSuffix.js\");\nObject.defineProperty(exports, \"getPublicSuffix\", ({ enumerable: true, get: function () { return getPublicSuffix_1.getPublicSuffix; } }));\nvar store_1 = __webpack_require__(/*! ../store */ \"(rsc)/./node_modules/tough-cookie/dist/store.js\");\nObject.defineProperty(exports, \"Store\", ({ enumerable: true, get: function () { return store_1.Store; } }));\nvar validators_1 = __webpack_require__(/*! ../validators */ \"(rsc)/./node_modules/tough-cookie/dist/validators.js\");\nObject.defineProperty(exports, \"ParameterError\", ({ enumerable: true, get: function () { return validators_1.ParameterError; } }));\nvar version_1 = __webpack_require__(/*! ../version */ \"(rsc)/./node_modules/tough-cookie/dist/version.js\");\nObject.defineProperty(exports, \"version\", ({ enumerable: true, get: function () { return version_1.version; } }));\nvar canonicalDomain_1 = __webpack_require__(/*! ./canonicalDomain */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/canonicalDomain.js\");\nObject.defineProperty(exports, \"canonicalDomain\", ({ enumerable: true, get: function () { return canonicalDomain_1.canonicalDomain; } }));\nvar constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/constants.js\");\nObject.defineProperty(exports, \"PrefixSecurityEnum\", ({ enumerable: true, get: function () { return constants_1.PrefixSecurityEnum; } }));\nvar cookie_1 = __webpack_require__(/*! ./cookie */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/cookie.js\");\nObject.defineProperty(exports, \"Cookie\", ({ enumerable: true, get: function () { return cookie_1.Cookie; } }));\nvar cookieCompare_1 = __webpack_require__(/*! ./cookieCompare */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/cookieCompare.js\");\nObject.defineProperty(exports, \"cookieCompare\", ({ enumerable: true, get: function () { return cookieCompare_1.cookieCompare; } }));\nvar cookieJar_1 = __webpack_require__(/*! ./cookieJar */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/cookieJar.js\");\nObject.defineProperty(exports, \"CookieJar\", ({ enumerable: true, get: function () { return cookieJar_1.CookieJar; } }));\nvar defaultPath_1 = __webpack_require__(/*! ./defaultPath */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/defaultPath.js\");\nObject.defineProperty(exports, \"defaultPath\", ({ enumerable: true, get: function () { return defaultPath_1.defaultPath; } }));\nvar domainMatch_1 = __webpack_require__(/*! ./domainMatch */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/domainMatch.js\");\nObject.defineProperty(exports, \"domainMatch\", ({ enumerable: true, get: function () { return domainMatch_1.domainMatch; } }));\nvar formatDate_1 = __webpack_require__(/*! ./formatDate */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/formatDate.js\");\nObject.defineProperty(exports, \"formatDate\", ({ enumerable: true, get: function () { return formatDate_1.formatDate; } }));\nvar parseDate_1 = __webpack_require__(/*! ./parseDate */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/parseDate.js\");\nObject.defineProperty(exports, \"parseDate\", ({ enumerable: true, get: function () { return parseDate_1.parseDate; } }));\nvar permutePath_1 = __webpack_require__(/*! ./permutePath */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/permutePath.js\");\nObject.defineProperty(exports, \"permutePath\", ({ enumerable: true, get: function () { return permutePath_1.permutePath; } }));\nconst cookie_2 = __webpack_require__(/*! ./cookie */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/cookie.js\");\n/**\n * {@inheritDoc Cookie.parse}\n * @public\n */\nfunction parse(str, options) {\n    return cookie_2.Cookie.parse(str, options);\n}\n/**\n * {@inheritDoc Cookie.fromJSON}\n * @public\n */\nfunction fromJSON(str) {\n    return cookie_2.Cookie.fromJSON(str);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3QvY29va2llL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLGlCQUFpQixHQUFHLGtCQUFrQixHQUFHLG1CQUFtQixHQUFHLG1CQUFtQixHQUFHLGlCQUFpQixHQUFHLHFCQUFxQixHQUFHLGNBQWMsR0FBRywwQkFBMEIsR0FBRyx1QkFBdUIsR0FBRyxlQUFlLEdBQUcsc0JBQXNCLEdBQUcsYUFBYSxHQUFHLHVCQUF1QixHQUFHLHFCQUFxQixHQUFHLGlCQUFpQixHQUFHLHlCQUF5QjtBQUN6WCxhQUFhO0FBQ2IsZ0JBQWdCO0FBQ2hCLGlCQUFpQixtQkFBTyxDQUFDLHVFQUFhO0FBQ3RDLHFEQUFvRCxFQUFFLHFDQUFxQyx3Q0FBd0MsRUFBQztBQUNwSSxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBYztBQUN4Qyw2Q0FBNEMsRUFBRSxxQ0FBcUMsaUNBQWlDLEVBQUM7QUFDckgsc0JBQXNCLG1CQUFPLENBQUMsaUZBQWtCO0FBQ2hELGlEQUFnRCxFQUFFLHFDQUFxQyx5Q0FBeUMsRUFBQztBQUNqSSx3QkFBd0IsbUJBQU8sQ0FBQyxxRkFBb0I7QUFDcEQsbURBQWtELEVBQUUscUNBQXFDLDZDQUE2QyxFQUFDO0FBQ3ZJLGNBQWMsbUJBQU8sQ0FBQyxpRUFBVTtBQUNoQyx5Q0FBd0MsRUFBRSxxQ0FBcUMseUJBQXlCLEVBQUM7QUFDekcsbUJBQW1CLG1CQUFPLENBQUMsMkVBQWU7QUFDMUMsa0RBQWlELEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQ2hJLGdCQUFnQixtQkFBTyxDQUFDLHFFQUFZO0FBQ3BDLDJDQUEwQyxFQUFFLHFDQUFxQyw2QkFBNkIsRUFBQztBQUMvRyx3QkFBd0IsbUJBQU8sQ0FBQywyRkFBbUI7QUFDbkQsbURBQWtELEVBQUUscUNBQXFDLDZDQUE2QyxFQUFDO0FBQ3ZJLGtCQUFrQixtQkFBTyxDQUFDLCtFQUFhO0FBQ3ZDLHNEQUFxRCxFQUFFLHFDQUFxQywwQ0FBMEMsRUFBQztBQUN2SSxlQUFlLG1CQUFPLENBQUMseUVBQVU7QUFDakMsMENBQXlDLEVBQUUscUNBQXFDLDJCQUEyQixFQUFDO0FBQzVHLHNCQUFzQixtQkFBTyxDQUFDLHVGQUFpQjtBQUMvQyxpREFBZ0QsRUFBRSxxQ0FBcUMseUNBQXlDLEVBQUM7QUFDakksa0JBQWtCLG1CQUFPLENBQUMsK0VBQWE7QUFDdkMsNkNBQTRDLEVBQUUscUNBQXFDLGlDQUFpQyxFQUFDO0FBQ3JILG9CQUFvQixtQkFBTyxDQUFDLG1GQUFlO0FBQzNDLCtDQUE4QyxFQUFFLHFDQUFxQyxxQ0FBcUMsRUFBQztBQUMzSCxvQkFBb0IsbUJBQU8sQ0FBQyxtRkFBZTtBQUMzQywrQ0FBOEMsRUFBRSxxQ0FBcUMscUNBQXFDLEVBQUM7QUFDM0gsbUJBQW1CLG1CQUFPLENBQUMsaUZBQWM7QUFDekMsOENBQTZDLEVBQUUscUNBQXFDLG1DQUFtQyxFQUFDO0FBQ3hILGtCQUFrQixtQkFBTyxDQUFDLCtFQUFhO0FBQ3ZDLDZDQUE0QyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUNySCxvQkFBb0IsbUJBQU8sQ0FBQyxtRkFBZTtBQUMzQywrQ0FBOEMsRUFBRSxxQ0FBcUMscUNBQXFDLEVBQUM7QUFDM0gsaUJBQWlCLG1CQUFPLENBQUMseUVBQVU7QUFDbkM7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZGFyc2hcXE9uZURyaXZlXFxEZXNrdG9wXFxDb2RlXFxNRVJOIFdlYiBEZXZcXEdyYXBoaVxcbm9kZV9tb2R1bGVzXFx0b3VnaC1jb29raWVcXGRpc3RcXGNvb2tpZVxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBlcm11dGVQYXRoID0gZXhwb3J0cy5wYXJzZURhdGUgPSBleHBvcnRzLmZvcm1hdERhdGUgPSBleHBvcnRzLmRvbWFpbk1hdGNoID0gZXhwb3J0cy5kZWZhdWx0UGF0aCA9IGV4cG9ydHMuQ29va2llSmFyID0gZXhwb3J0cy5jb29raWVDb21wYXJlID0gZXhwb3J0cy5Db29raWUgPSBleHBvcnRzLlByZWZpeFNlY3VyaXR5RW51bSA9IGV4cG9ydHMuY2Fub25pY2FsRG9tYWluID0gZXhwb3J0cy52ZXJzaW9uID0gZXhwb3J0cy5QYXJhbWV0ZXJFcnJvciA9IGV4cG9ydHMuU3RvcmUgPSBleHBvcnRzLmdldFB1YmxpY1N1ZmZpeCA9IGV4cG9ydHMucGVybXV0ZURvbWFpbiA9IGV4cG9ydHMucGF0aE1hdGNoID0gZXhwb3J0cy5NZW1vcnlDb29raWVTdG9yZSA9IHZvaWQgMDtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMuZnJvbUpTT04gPSBmcm9tSlNPTjtcbnZhciBtZW1zdG9yZV8xID0gcmVxdWlyZShcIi4uL21lbXN0b3JlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTWVtb3J5Q29va2llU3RvcmVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lbXN0b3JlXzEuTWVtb3J5Q29va2llU3RvcmU7IH0gfSk7XG52YXIgcGF0aE1hdGNoXzEgPSByZXF1aXJlKFwiLi4vcGF0aE1hdGNoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGF0aE1hdGNoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYXRoTWF0Y2hfMS5wYXRoTWF0Y2g7IH0gfSk7XG52YXIgcGVybXV0ZURvbWFpbl8xID0gcmVxdWlyZShcIi4uL3Blcm11dGVEb21haW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwZXJtdXRlRG9tYWluXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwZXJtdXRlRG9tYWluXzEucGVybXV0ZURvbWFpbjsgfSB9KTtcbnZhciBnZXRQdWJsaWNTdWZmaXhfMSA9IHJlcXVpcmUoXCIuLi9nZXRQdWJsaWNTdWZmaXhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRQdWJsaWNTdWZmaXhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldFB1YmxpY1N1ZmZpeF8xLmdldFB1YmxpY1N1ZmZpeDsgfSB9KTtcbnZhciBzdG9yZV8xID0gcmVxdWlyZShcIi4uL3N0b3JlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RvcmVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlXzEuU3RvcmU7IH0gfSk7XG52YXIgdmFsaWRhdG9yc18xID0gcmVxdWlyZShcIi4uL3ZhbGlkYXRvcnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYXJhbWV0ZXJFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsaWRhdG9yc18xLlBhcmFtZXRlckVycm9yOyB9IH0pO1xudmFyIHZlcnNpb25fMSA9IHJlcXVpcmUoXCIuLi92ZXJzaW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidmVyc2lvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdmVyc2lvbl8xLnZlcnNpb247IH0gfSk7XG52YXIgY2Fub25pY2FsRG9tYWluXzEgPSByZXF1aXJlKFwiLi9jYW5vbmljYWxEb21haW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjYW5vbmljYWxEb21haW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbm9uaWNhbERvbWFpbl8xLmNhbm9uaWNhbERvbWFpbjsgfSB9KTtcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlByZWZpeFNlY3VyaXR5RW51bVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uc3RhbnRzXzEuUHJlZml4U2VjdXJpdHlFbnVtOyB9IH0pO1xudmFyIGNvb2tpZV8xID0gcmVxdWlyZShcIi4vY29va2llXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29va2llXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb29raWVfMS5Db29raWU7IH0gfSk7XG52YXIgY29va2llQ29tcGFyZV8xID0gcmVxdWlyZShcIi4vY29va2llQ29tcGFyZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvb2tpZUNvbXBhcmVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvb2tpZUNvbXBhcmVfMS5jb29raWVDb21wYXJlOyB9IH0pO1xudmFyIGNvb2tpZUphcl8xID0gcmVxdWlyZShcIi4vY29va2llSmFyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29va2llSmFyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb29raWVKYXJfMS5Db29raWVKYXI7IH0gfSk7XG52YXIgZGVmYXVsdFBhdGhfMSA9IHJlcXVpcmUoXCIuL2RlZmF1bHRQYXRoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFBhdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlZmF1bHRQYXRoXzEuZGVmYXVsdFBhdGg7IH0gfSk7XG52YXIgZG9tYWluTWF0Y2hfMSA9IHJlcXVpcmUoXCIuL2RvbWFpbk1hdGNoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZG9tYWluTWF0Y2hcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvbWFpbk1hdGNoXzEuZG9tYWluTWF0Y2g7IH0gfSk7XG52YXIgZm9ybWF0RGF0ZV8xID0gcmVxdWlyZShcIi4vZm9ybWF0RGF0ZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZvcm1hdERhdGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZvcm1hdERhdGVfMS5mb3JtYXREYXRlOyB9IH0pO1xudmFyIHBhcnNlRGF0ZV8xID0gcmVxdWlyZShcIi4vcGFyc2VEYXRlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGFyc2VEYXRlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYXJzZURhdGVfMS5wYXJzZURhdGU7IH0gfSk7XG52YXIgcGVybXV0ZVBhdGhfMSA9IHJlcXVpcmUoXCIuL3Blcm11dGVQYXRoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGVybXV0ZVBhdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcm11dGVQYXRoXzEucGVybXV0ZVBhdGg7IH0gfSk7XG5jb25zdCBjb29raWVfMiA9IHJlcXVpcmUoXCIuL2Nvb2tpZVwiKTtcbi8qKlxuICoge0Bpbmhlcml0RG9jIENvb2tpZS5wYXJzZX1cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcGFyc2Uoc3RyLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvb2tpZV8yLkNvb2tpZS5wYXJzZShzdHIsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiB7QGluaGVyaXREb2MgQ29va2llLmZyb21KU09OfVxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBmcm9tSlNPTihzdHIpIHtcbiAgICByZXR1cm4gY29va2llXzIuQ29va2llLmZyb21KU09OKHN0cik7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/cookie/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/cookie/parseDate.js":
/*!************************************************************!*\
  !*** ./node_modules/tough-cookie/dist/cookie/parseDate.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// date-time parsing constants (RFC6265 S5.1.1)\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseDate = parseDate;\n// eslint-disable-next-line no-control-regex\nconst DATE_DELIM = /[\\x09\\x20-\\x2F\\x3B-\\x40\\x5B-\\x60\\x7B-\\x7E]/;\nconst MONTH_TO_NUM = {\n    jan: 0,\n    feb: 1,\n    mar: 2,\n    apr: 3,\n    may: 4,\n    jun: 5,\n    jul: 6,\n    aug: 7,\n    sep: 8,\n    oct: 9,\n    nov: 10,\n    dec: 11,\n};\n/*\n * Parses a Natural number (i.e., non-negative integer) with either the\n *    <min>*<max>DIGIT ( non-digit *OCTET )\n * or\n *    <min>*<max>DIGIT\n * grammar (RFC6265 S5.1.1).\n *\n * The \"trailingOK\" boolean controls if the grammar accepts a\n * \"( non-digit *OCTET )\" trailer.\n */\nfunction parseDigits(token, minDigits, maxDigits, trailingOK) {\n    let count = 0;\n    while (count < token.length) {\n        const c = token.charCodeAt(count);\n        // \"non-digit = %x00-2F / %x3A-FF\"\n        if (c <= 0x2f || c >= 0x3a) {\n            break;\n        }\n        count++;\n    }\n    // constrain to a minimum and maximum number of digits.\n    if (count < minDigits || count > maxDigits) {\n        return;\n    }\n    if (!trailingOK && count != token.length) {\n        return;\n    }\n    return parseInt(token.slice(0, count), 10);\n}\nfunction parseTime(token) {\n    const parts = token.split(':');\n    const result = [0, 0, 0];\n    /* RF6256 S5.1.1:\n     *      time            = hms-time ( non-digit *OCTET )\n     *      hms-time        = time-field \":\" time-field \":\" time-field\n     *      time-field      = 1*2DIGIT\n     */\n    if (parts.length !== 3) {\n        return;\n    }\n    for (let i = 0; i < 3; i++) {\n        // \"time-field\" must be strictly \"1*2DIGIT\", HOWEVER, \"hms-time\" can be\n        // followed by \"( non-digit *OCTET )\" therefore the last time-field can\n        // have a trailer\n        const trailingOK = i == 2;\n        const numPart = parts[i];\n        if (numPart === undefined) {\n            return;\n        }\n        const num = parseDigits(numPart, 1, 2, trailingOK);\n        if (num === undefined) {\n            return;\n        }\n        result[i] = num;\n    }\n    return result;\n}\nfunction parseMonth(token) {\n    token = String(token).slice(0, 3).toLowerCase();\n    switch (token) {\n        case 'jan':\n            return MONTH_TO_NUM.jan;\n        case 'feb':\n            return MONTH_TO_NUM.feb;\n        case 'mar':\n            return MONTH_TO_NUM.mar;\n        case 'apr':\n            return MONTH_TO_NUM.apr;\n        case 'may':\n            return MONTH_TO_NUM.may;\n        case 'jun':\n            return MONTH_TO_NUM.jun;\n        case 'jul':\n            return MONTH_TO_NUM.jul;\n        case 'aug':\n            return MONTH_TO_NUM.aug;\n        case 'sep':\n            return MONTH_TO_NUM.sep;\n        case 'oct':\n            return MONTH_TO_NUM.oct;\n        case 'nov':\n            return MONTH_TO_NUM.nov;\n        case 'dec':\n            return MONTH_TO_NUM.dec;\n        default:\n            return;\n    }\n}\n/**\n * Parse a cookie date string into a {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date | Date}. Parses according to\n * {@link https://www.rfc-editor.org/rfc/rfc6265.html#section-5.1.1 | RFC6265 - Section 5.1.1}, not\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse | Date.parse()}.\n *\n * @remarks\n *\n * ### RFC6265 - 5.1.1. Dates\n *\n * The user agent MUST use an algorithm equivalent to the following\n * algorithm to parse a cookie-date.  Note that the various boolean\n * flags defined as a part of the algorithm (i.e., found-time, found-\n * day-of-month, found-month, found-year) are initially \"not set\".\n *\n * 1.  Using the grammar below, divide the cookie-date into date-tokens.\n *\n * ```\n *     cookie-date     = *delimiter date-token-list *delimiter\n *     date-token-list = date-token *( 1*delimiter date-token )\n *     date-token      = 1*non-delimiter\n *\n *     delimiter       = %x09 / %x20-2F / %x3B-40 / %x5B-60 / %x7B-7E\n *     non-delimiter   = %x00-08 / %x0A-1F / DIGIT / \":\" / ALPHA / %x7F-FF\n *     non-digit       = %x00-2F / %x3A-FF\n *\n *     day-of-month    = 1*2DIGIT ( non-digit *OCTET )\n *     month           = ( \"jan\" / \"feb\" / \"mar\" / \"apr\" /\n *                        \"may\" / \"jun\" / \"jul\" / \"aug\" /\n *                        \"sep\" / \"oct\" / \"nov\" / \"dec\" ) *OCTET\n *     year            = 2*4DIGIT ( non-digit *OCTET )\n *     time            = hms-time ( non-digit *OCTET )\n *     hms-time        = time-field \":\" time-field \":\" time-field\n *     time-field      = 1*2DIGIT\n * ```\n *\n * 2. Process each date-token sequentially in the order the date-tokens\n *     appear in the cookie-date:\n *\n *     1. If the found-time flag is not set and the token matches the\n *         time production, set the found-time flag and set the hour-\n *         value, minute-value, and second-value to the numbers denoted\n *         by the digits in the date-token, respectively.  Skip the\n *         remaining sub-steps and continue to the next date-token.\n *\n *     2. If the found-day-of-month flag is not set and the date-token\n *         matches the day-of-month production, set the found-day-of-\n *         month flag and set the day-of-month-value to the number\n *         denoted by the date-token.  Skip the remaining sub-steps and\n *         continue to the next date-token.\n *\n *     3. If the found-month flag is not set and the date-token matches\n *         the month production, set the found-month flag and set the\n *         month-value to the month denoted by the date-token.  Skip the\n *         remaining sub-steps and continue to the next date-token.\n *\n *     4. If the found-year flag is not set and the date-token matches\n *         the year production, set the found-year flag and set the\n *         year-value to the number denoted by the date-token.  Skip the\n *         remaining sub-steps and continue to the next date-token.\n *\n *  3. If the year-value is greater than or equal to 70 and less than or\n *      equal to 99, increment the year-value by 1900.\n *\n *  4. If the year-value is greater than or equal to 0 and less than or\n *      equal to 69, increment the year-value by 2000.\n *\n *      1. NOTE: Some existing user agents interpret two-digit years differently.\n *\n *  5. Abort these steps and fail to parse the cookie-date if:\n *\n *      - at least one of the found-day-of-month, found-month, found-\n *          year, or found-time flags is not set,\n *\n *      - the day-of-month-value is less than 1 or greater than 31,\n *\n *      - the year-value is less than 1601,\n *\n *      - the hour-value is greater than 23,\n *\n *      - the minute-value is greater than 59, or\n *\n *      - the second-value is greater than 59.\n *\n *      (Note that leap seconds cannot be represented in this syntax.)\n *\n *  6. Let the parsed-cookie-date be the date whose day-of-month, month,\n *      year, hour, minute, and second (in UTC) are the day-of-month-\n *      value, the month-value, the year-value, the hour-value, the\n *      minute-value, and the second-value, respectively.  If no such\n *      date exists, abort these steps and fail to parse the cookie-date.\n *\n *  7. Return the parsed-cookie-date as the result of this algorithm.\n *\n * @example\n * ```\n * parseDate('Wed, 09 Jun 2021 10:18:14 GMT')\n * ```\n *\n * @param cookieDate - the cookie date string\n * @public\n */\nfunction parseDate(cookieDate) {\n    if (!cookieDate) {\n        return;\n    }\n    /* RFC6265 S5.1.1:\n     * 2. Process each date-token sequentially in the order the date-tokens\n     * appear in the cookie-date\n     */\n    const tokens = cookieDate.split(DATE_DELIM);\n    let hour;\n    let minute;\n    let second;\n    let dayOfMonth;\n    let month;\n    let year;\n    for (let i = 0; i < tokens.length; i++) {\n        const token = (tokens[i] ?? '').trim();\n        if (!token.length) {\n            continue;\n        }\n        /* 2.1. If the found-time flag is not set and the token matches the time\n         * production, set the found-time flag and set the hour- value,\n         * minute-value, and second-value to the numbers denoted by the digits in\n         * the date-token, respectively.  Skip the remaining sub-steps and continue\n         * to the next date-token.\n         */\n        if (second === undefined) {\n            const result = parseTime(token);\n            if (result) {\n                hour = result[0];\n                minute = result[1];\n                second = result[2];\n                continue;\n            }\n        }\n        /* 2.2. If the found-day-of-month flag is not set and the date-token matches\n         * the day-of-month production, set the found-day-of- month flag and set\n         * the day-of-month-value to the number denoted by the date-token.  Skip\n         * the remaining sub-steps and continue to the next date-token.\n         */\n        if (dayOfMonth === undefined) {\n            // \"day-of-month = 1*2DIGIT ( non-digit *OCTET )\"\n            const result = parseDigits(token, 1, 2, true);\n            if (result !== undefined) {\n                dayOfMonth = result;\n                continue;\n            }\n        }\n        /* 2.3. If the found-month flag is not set and the date-token matches the\n         * month production, set the found-month flag and set the month-value to\n         * the month denoted by the date-token.  Skip the remaining sub-steps and\n         * continue to the next date-token.\n         */\n        if (month === undefined) {\n            const result = parseMonth(token);\n            if (result !== undefined) {\n                month = result;\n                continue;\n            }\n        }\n        /* 2.4. If the found-year flag is not set and the date-token matches the\n         * year production, set the found-year flag and set the year-value to the\n         * number denoted by the date-token.  Skip the remaining sub-steps and\n         * continue to the next date-token.\n         */\n        if (year === undefined) {\n            // \"year = 2*4DIGIT ( non-digit *OCTET )\"\n            const result = parseDigits(token, 2, 4, true);\n            if (result !== undefined) {\n                year = result;\n                /* From S5.1.1:\n                 * 3.  If the year-value is greater than or equal to 70 and less\n                 * than or equal to 99, increment the year-value by 1900.\n                 * 4.  If the year-value is greater than or equal to 0 and less\n                 * than or equal to 69, increment the year-value by 2000.\n                 */\n                if (year >= 70 && year <= 99) {\n                    year += 1900;\n                }\n                else if (year >= 0 && year <= 69) {\n                    year += 2000;\n                }\n            }\n        }\n    }\n    /* RFC 6265 S5.1.1\n     * \"5. Abort these steps and fail to parse the cookie-date if:\n     *     *  at least one of the found-day-of-month, found-month, found-\n     *        year, or found-time flags is not set,\n     *     *  the day-of-month-value is less than 1 or greater than 31,\n     *     *  the year-value is less than 1601,\n     *     *  the hour-value is greater than 23,\n     *     *  the minute-value is greater than 59, or\n     *     *  the second-value is greater than 59.\n     *     (Note that leap seconds cannot be represented in this syntax.)\"\n     *\n     * So, in order as above:\n     */\n    if (dayOfMonth === undefined ||\n        month === undefined ||\n        year === undefined ||\n        hour === undefined ||\n        minute === undefined ||\n        second === undefined ||\n        dayOfMonth < 1 ||\n        dayOfMonth > 31 ||\n        year < 1601 ||\n        hour > 23 ||\n        minute > 59 ||\n        second > 59) {\n        return;\n    }\n    return new Date(Date.UTC(year, month, dayOfMonth, hour, minute, second));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/cookie/parseDate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/cookie/permutePath.js":
/*!**************************************************************!*\
  !*** ./node_modules/tough-cookie/dist/cookie/permutePath.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.permutePath = permutePath;\n/**\n * Generates the permutation of all possible values that {@link pathMatch} the `path` parameter.\n * The array is in longest-to-shortest order.  Useful when building custom {@link Store} implementations.\n *\n * @example\n * ```\n * permutePath('/foo/bar/')\n * // ['/foo/bar/', '/foo/bar', '/foo', '/']\n * ```\n *\n * @param path - the path to generate permutations for\n * @public\n */\nfunction permutePath(path) {\n    if (path === '/') {\n        return ['/'];\n    }\n    const permutations = [path];\n    while (path.length > 1) {\n        const lindex = path.lastIndexOf('/');\n        if (lindex === 0) {\n            break;\n        }\n        path = path.slice(0, lindex);\n        permutations.push(path);\n    }\n    permutations.push('/');\n    return permutations;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3QvY29va2llL3Blcm11dGVQYXRoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQjtBQUNBLDBEQUEwRCxpQkFBaUI7QUFDM0UsNEVBQTRFLGFBQWE7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxkYXJzaFxcT25lRHJpdmVcXERlc2t0b3BcXENvZGVcXE1FUk4gV2ViIERldlxcR3JhcGhpXFxub2RlX21vZHVsZXNcXHRvdWdoLWNvb2tpZVxcZGlzdFxcY29va2llXFxwZXJtdXRlUGF0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGVybXV0ZVBhdGggPSBwZXJtdXRlUGF0aDtcbi8qKlxuICogR2VuZXJhdGVzIHRoZSBwZXJtdXRhdGlvbiBvZiBhbGwgcG9zc2libGUgdmFsdWVzIHRoYXQge0BsaW5rIHBhdGhNYXRjaH0gdGhlIGBwYXRoYCBwYXJhbWV0ZXIuXG4gKiBUaGUgYXJyYXkgaXMgaW4gbG9uZ2VzdC10by1zaG9ydGVzdCBvcmRlci4gIFVzZWZ1bCB3aGVuIGJ1aWxkaW5nIGN1c3RvbSB7QGxpbmsgU3RvcmV9IGltcGxlbWVudGF0aW9ucy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBwZXJtdXRlUGF0aCgnL2Zvby9iYXIvJylcbiAqIC8vIFsnL2Zvby9iYXIvJywgJy9mb28vYmFyJywgJy9mb28nLCAnLyddXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gcGF0aCAtIHRoZSBwYXRoIHRvIGdlbmVyYXRlIHBlcm11dGF0aW9ucyBmb3JcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcGVybXV0ZVBhdGgocGF0aCkge1xuICAgIGlmIChwYXRoID09PSAnLycpIHtcbiAgICAgICAgcmV0dXJuIFsnLyddO1xuICAgIH1cbiAgICBjb25zdCBwZXJtdXRhdGlvbnMgPSBbcGF0aF07XG4gICAgd2hpbGUgKHBhdGgubGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBsaW5kZXggPSBwYXRoLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgICAgIGlmIChsaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIGxpbmRleCk7XG4gICAgICAgIHBlcm11dGF0aW9ucy5wdXNoKHBhdGgpO1xuICAgIH1cbiAgICBwZXJtdXRhdGlvbnMucHVzaCgnLycpO1xuICAgIHJldHVybiBwZXJtdXRhdGlvbnM7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/cookie/permutePath.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/getPublicSuffix.js":
/*!***********************************************************!*\
  !*** ./node_modules/tough-cookie/dist/getPublicSuffix.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getPublicSuffix = getPublicSuffix;\nconst tldts_1 = __webpack_require__(/*! tldts */ \"(rsc)/./node_modules/tldts/dist/es6/index.js\");\n// RFC 6761\nconst SPECIAL_USE_DOMAINS = ['local', 'example', 'invalid', 'localhost', 'test'];\nconst SPECIAL_TREATMENT_DOMAINS = ['localhost', 'invalid'];\nconst defaultGetPublicSuffixOptions = {\n    allowSpecialUseDomain: false,\n    ignoreError: false,\n};\n/**\n * Returns the public suffix of this hostname. The public suffix is the shortest domain\n * name upon which a cookie can be set.\n *\n * @remarks\n * A \"public suffix\" is a domain that is controlled by a\n * public registry, such as \"com\", \"co.uk\", and \"pvt.k12.wy.us\".\n * This step is essential for preventing attacker.com from\n * disrupting the integrity of example.com by setting a cookie\n * with a Domain attribute of \"com\".  Unfortunately, the set of\n * public suffixes (also known as \"registry controlled domains\")\n * changes over time.  If feasible, user agents SHOULD use an\n * up-to-date public suffix list, such as the one maintained by\n * the Mozilla project at http://publicsuffix.org/.\n * (See {@link https://www.rfc-editor.org/rfc/rfc6265.html#section-5.3 | RFC6265 - Section 5.3})\n *\n * @example\n * ```\n * getPublicSuffix('www.example.com') === 'example.com'\n * getPublicSuffix('www.subdomain.example.com') === 'example.com'\n * ```\n *\n * @param domain - the domain attribute of a cookie\n * @param options - optional configuration for controlling how the public suffix is determined\n * @public\n */\nfunction getPublicSuffix(domain, options = {}) {\n    options = { ...defaultGetPublicSuffixOptions, ...options };\n    const domainParts = domain.split('.');\n    const topLevelDomain = domainParts[domainParts.length - 1];\n    const allowSpecialUseDomain = !!options.allowSpecialUseDomain;\n    const ignoreError = !!options.ignoreError;\n    if (allowSpecialUseDomain &&\n        topLevelDomain !== undefined &&\n        SPECIAL_USE_DOMAINS.includes(topLevelDomain)) {\n        if (domainParts.length > 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const secondLevelDomain = domainParts[domainParts.length - 2];\n            // In aforementioned example, the eTLD/pubSuf will be apple.localhost\n            return `${secondLevelDomain}.${topLevelDomain}`;\n        }\n        else if (SPECIAL_TREATMENT_DOMAINS.includes(topLevelDomain)) {\n            // For a single word special use domain, e.g. 'localhost' or 'invalid', per RFC 6761,\n            // \"Application software MAY recognize {localhost/invalid} names as special, or\n            // MAY pass them to name resolution APIs as they would for other domain names.\"\n            return topLevelDomain;\n        }\n    }\n    if (!ignoreError &&\n        topLevelDomain !== undefined &&\n        SPECIAL_USE_DOMAINS.includes(topLevelDomain)) {\n        throw new Error(`Cookie has domain set to the public suffix \"${topLevelDomain}\" which is a special use domain. To allow this, configure your CookieJar with {allowSpecialUseDomain: true, rejectPublicSuffixes: false}.`);\n    }\n    const publicSuffix = (0, tldts_1.getDomain)(domain, {\n        allowIcannDomains: true,\n        allowPrivateDomains: true,\n    });\n    if (publicSuffix)\n        return publicSuffix;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3QvZ2V0UHVibGljU3VmZml4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QixnQkFBZ0IsbUJBQU8sQ0FBQywyREFBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHNGQUFzRjtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGtCQUFrQixHQUFHLGVBQWU7QUFDMUQ7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELG1CQUFtQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSxlQUFlLCtFQUErRSx5REFBeUQ7QUFDOU47QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGRhcnNoXFxPbmVEcml2ZVxcRGVza3RvcFxcQ29kZVxcTUVSTiBXZWIgRGV2XFxHcmFwaGlcXG5vZGVfbW9kdWxlc1xcdG91Z2gtY29va2llXFxkaXN0XFxnZXRQdWJsaWNTdWZmaXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFB1YmxpY1N1ZmZpeCA9IGdldFB1YmxpY1N1ZmZpeDtcbmNvbnN0IHRsZHRzXzEgPSByZXF1aXJlKFwidGxkdHNcIik7XG4vLyBSRkMgNjc2MVxuY29uc3QgU1BFQ0lBTF9VU0VfRE9NQUlOUyA9IFsnbG9jYWwnLCAnZXhhbXBsZScsICdpbnZhbGlkJywgJ2xvY2FsaG9zdCcsICd0ZXN0J107XG5jb25zdCBTUEVDSUFMX1RSRUFUTUVOVF9ET01BSU5TID0gWydsb2NhbGhvc3QnLCAnaW52YWxpZCddO1xuY29uc3QgZGVmYXVsdEdldFB1YmxpY1N1ZmZpeE9wdGlvbnMgPSB7XG4gICAgYWxsb3dTcGVjaWFsVXNlRG9tYWluOiBmYWxzZSxcbiAgICBpZ25vcmVFcnJvcjogZmFsc2UsXG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBwdWJsaWMgc3VmZml4IG9mIHRoaXMgaG9zdG5hbWUuIFRoZSBwdWJsaWMgc3VmZml4IGlzIHRoZSBzaG9ydGVzdCBkb21haW5cbiAqIG5hbWUgdXBvbiB3aGljaCBhIGNvb2tpZSBjYW4gYmUgc2V0LlxuICpcbiAqIEByZW1hcmtzXG4gKiBBIFwicHVibGljIHN1ZmZpeFwiIGlzIGEgZG9tYWluIHRoYXQgaXMgY29udHJvbGxlZCBieSBhXG4gKiBwdWJsaWMgcmVnaXN0cnksIHN1Y2ggYXMgXCJjb21cIiwgXCJjby51a1wiLCBhbmQgXCJwdnQuazEyLnd5LnVzXCIuXG4gKiBUaGlzIHN0ZXAgaXMgZXNzZW50aWFsIGZvciBwcmV2ZW50aW5nIGF0dGFja2VyLmNvbSBmcm9tXG4gKiBkaXNydXB0aW5nIHRoZSBpbnRlZ3JpdHkgb2YgZXhhbXBsZS5jb20gYnkgc2V0dGluZyBhIGNvb2tpZVxuICogd2l0aCBhIERvbWFpbiBhdHRyaWJ1dGUgb2YgXCJjb21cIi4gIFVuZm9ydHVuYXRlbHksIHRoZSBzZXQgb2ZcbiAqIHB1YmxpYyBzdWZmaXhlcyAoYWxzbyBrbm93biBhcyBcInJlZ2lzdHJ5IGNvbnRyb2xsZWQgZG9tYWluc1wiKVxuICogY2hhbmdlcyBvdmVyIHRpbWUuICBJZiBmZWFzaWJsZSwgdXNlciBhZ2VudHMgU0hPVUxEIHVzZSBhblxuICogdXAtdG8tZGF0ZSBwdWJsaWMgc3VmZml4IGxpc3QsIHN1Y2ggYXMgdGhlIG9uZSBtYWludGFpbmVkIGJ5XG4gKiB0aGUgTW96aWxsYSBwcm9qZWN0IGF0IGh0dHA6Ly9wdWJsaWNzdWZmaXgub3JnLy5cbiAqIChTZWUge0BsaW5rIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM2MjY1Lmh0bWwjc2VjdGlvbi01LjMgfCBSRkM2MjY1IC0gU2VjdGlvbiA1LjN9KVxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIGdldFB1YmxpY1N1ZmZpeCgnd3d3LmV4YW1wbGUuY29tJykgPT09ICdleGFtcGxlLmNvbSdcbiAqIGdldFB1YmxpY1N1ZmZpeCgnd3d3LnN1YmRvbWFpbi5leGFtcGxlLmNvbScpID09PSAnZXhhbXBsZS5jb20nXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZG9tYWluIC0gdGhlIGRvbWFpbiBhdHRyaWJ1dGUgb2YgYSBjb29raWVcbiAqIEBwYXJhbSBvcHRpb25zIC0gb3B0aW9uYWwgY29uZmlndXJhdGlvbiBmb3IgY29udHJvbGxpbmcgaG93IHRoZSBwdWJsaWMgc3VmZml4IGlzIGRldGVybWluZWRcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZ2V0UHVibGljU3VmZml4KGRvbWFpbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgb3B0aW9ucyA9IHsgLi4uZGVmYXVsdEdldFB1YmxpY1N1ZmZpeE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcbiAgICBjb25zdCBkb21haW5QYXJ0cyA9IGRvbWFpbi5zcGxpdCgnLicpO1xuICAgIGNvbnN0IHRvcExldmVsRG9tYWluID0gZG9tYWluUGFydHNbZG9tYWluUGFydHMubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgYWxsb3dTcGVjaWFsVXNlRG9tYWluID0gISFvcHRpb25zLmFsbG93U3BlY2lhbFVzZURvbWFpbjtcbiAgICBjb25zdCBpZ25vcmVFcnJvciA9ICEhb3B0aW9ucy5pZ25vcmVFcnJvcjtcbiAgICBpZiAoYWxsb3dTcGVjaWFsVXNlRG9tYWluICYmXG4gICAgICAgIHRvcExldmVsRG9tYWluICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgU1BFQ0lBTF9VU0VfRE9NQUlOUy5pbmNsdWRlcyh0b3BMZXZlbERvbWFpbikpIHtcbiAgICAgICAgaWYgKGRvbWFpblBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICBjb25zdCBzZWNvbmRMZXZlbERvbWFpbiA9IGRvbWFpblBhcnRzW2RvbWFpblBhcnRzLmxlbmd0aCAtIDJdO1xuICAgICAgICAgICAgLy8gSW4gYWZvcmVtZW50aW9uZWQgZXhhbXBsZSwgdGhlIGVUTEQvcHViU3VmIHdpbGwgYmUgYXBwbGUubG9jYWxob3N0XG4gICAgICAgICAgICByZXR1cm4gYCR7c2Vjb25kTGV2ZWxEb21haW59LiR7dG9wTGV2ZWxEb21haW59YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChTUEVDSUFMX1RSRUFUTUVOVF9ET01BSU5TLmluY2x1ZGVzKHRvcExldmVsRG9tYWluKSkge1xuICAgICAgICAgICAgLy8gRm9yIGEgc2luZ2xlIHdvcmQgc3BlY2lhbCB1c2UgZG9tYWluLCBlLmcuICdsb2NhbGhvc3QnIG9yICdpbnZhbGlkJywgcGVyIFJGQyA2NzYxLFxuICAgICAgICAgICAgLy8gXCJBcHBsaWNhdGlvbiBzb2Z0d2FyZSBNQVkgcmVjb2duaXplIHtsb2NhbGhvc3QvaW52YWxpZH0gbmFtZXMgYXMgc3BlY2lhbCwgb3JcbiAgICAgICAgICAgIC8vIE1BWSBwYXNzIHRoZW0gdG8gbmFtZSByZXNvbHV0aW9uIEFQSXMgYXMgdGhleSB3b3VsZCBmb3Igb3RoZXIgZG9tYWluIG5hbWVzLlwiXG4gICAgICAgICAgICByZXR1cm4gdG9wTGV2ZWxEb21haW47XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpZ25vcmVFcnJvciAmJlxuICAgICAgICB0b3BMZXZlbERvbWFpbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIFNQRUNJQUxfVVNFX0RPTUFJTlMuaW5jbHVkZXModG9wTGV2ZWxEb21haW4pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29va2llIGhhcyBkb21haW4gc2V0IHRvIHRoZSBwdWJsaWMgc3VmZml4IFwiJHt0b3BMZXZlbERvbWFpbn1cIiB3aGljaCBpcyBhIHNwZWNpYWwgdXNlIGRvbWFpbi4gVG8gYWxsb3cgdGhpcywgY29uZmlndXJlIHlvdXIgQ29va2llSmFyIHdpdGgge2FsbG93U3BlY2lhbFVzZURvbWFpbjogdHJ1ZSwgcmVqZWN0UHVibGljU3VmZml4ZXM6IGZhbHNlfS5gKTtcbiAgICB9XG4gICAgY29uc3QgcHVibGljU3VmZml4ID0gKDAsIHRsZHRzXzEuZ2V0RG9tYWluKShkb21haW4sIHtcbiAgICAgICAgYWxsb3dJY2FubkRvbWFpbnM6IHRydWUsXG4gICAgICAgIGFsbG93UHJpdmF0ZURvbWFpbnM6IHRydWUsXG4gICAgfSk7XG4gICAgaWYgKHB1YmxpY1N1ZmZpeClcbiAgICAgICAgcmV0dXJuIHB1YmxpY1N1ZmZpeDtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/getPublicSuffix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/memstore.js":
/*!****************************************************!*\
  !*** ./node_modules/tough-cookie/dist/memstore.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MemoryCookieStore = void 0;\nconst pathMatch_1 = __webpack_require__(/*! ./pathMatch */ \"(rsc)/./node_modules/tough-cookie/dist/pathMatch.js\");\nconst permuteDomain_1 = __webpack_require__(/*! ./permuteDomain */ \"(rsc)/./node_modules/tough-cookie/dist/permuteDomain.js\");\nconst store_1 = __webpack_require__(/*! ./store */ \"(rsc)/./node_modules/tough-cookie/dist/store.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/tough-cookie/dist/utils.js\");\n/**\n * An in-memory {@link Store} implementation for {@link CookieJar}. This is the default implementation used by\n * {@link CookieJar} and supports both async and sync operations. Also supports serialization, getAllCookies, and removeAllCookies.\n * @public\n */\nclass MemoryCookieStore extends store_1.Store {\n    /**\n     * Create a new {@link MemoryCookieStore}.\n     */\n    constructor() {\n        super();\n        this.synchronous = true;\n        this.idx = Object.create(null);\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    findCookie(domain, path, key, callback) {\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        if (domain == null || path == null || key == null) {\n            return promiseCallback.resolve(undefined);\n        }\n        const result = this.idx[domain]?.[path]?.[key];\n        return promiseCallback.resolve(result);\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    findCookies(domain, path, allowSpecialUseDomain = false, callback) {\n        if (typeof allowSpecialUseDomain === 'function') {\n            callback = allowSpecialUseDomain;\n            // TODO: It's weird that `allowSpecialUseDomain` defaults to false with no callback,\n            // but true with a callback. This is legacy behavior from v4.\n            allowSpecialUseDomain = true;\n        }\n        const results = [];\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        if (!domain) {\n            return promiseCallback.resolve([]);\n        }\n        let pathMatcher;\n        if (!path) {\n            // null means \"all paths\"\n            pathMatcher = function matchAll(domainIndex) {\n                for (const curPath in domainIndex) {\n                    const pathIndex = domainIndex[curPath];\n                    for (const key in pathIndex) {\n                        const value = pathIndex[key];\n                        if (value) {\n                            results.push(value);\n                        }\n                    }\n                }\n            };\n        }\n        else {\n            pathMatcher = function matchRFC(domainIndex) {\n                //NOTE: we should use path-match algorithm from S5.1.4 here\n                //(see : https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/canonical_cookie.cc#L299)\n                for (const cookiePath in domainIndex) {\n                    if ((0, pathMatch_1.pathMatch)(path, cookiePath)) {\n                        const pathIndex = domainIndex[cookiePath];\n                        for (const key in pathIndex) {\n                            const value = pathIndex[key];\n                            if (value) {\n                                results.push(value);\n                            }\n                        }\n                    }\n                }\n            };\n        }\n        const domains = (0, permuteDomain_1.permuteDomain)(domain, allowSpecialUseDomain) || [domain];\n        const idx = this.idx;\n        domains.forEach((curDomain) => {\n            const domainIndex = idx[curDomain];\n            if (!domainIndex) {\n                return;\n            }\n            pathMatcher(domainIndex);\n        });\n        return promiseCallback.resolve(results);\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    putCookie(cookie, callback) {\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        const { domain, path, key } = cookie;\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (domain == null || path == null || key == null) {\n            return promiseCallback.resolve(undefined);\n        }\n        const domainEntry = this.idx[domain] ??\n            Object.create(null);\n        this.idx[domain] = domainEntry;\n        const pathEntry = domainEntry[path] ??\n            Object.create(null);\n        domainEntry[path] = pathEntry;\n        pathEntry[key] = cookie;\n        return promiseCallback.resolve(undefined);\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    updateCookie(_oldCookie, newCookie, callback) {\n        // updateCookie() may avoid updating cookies that are identical.  For example,\n        // lastAccessed may not be important to some stores and an equality\n        // comparison could exclude that field.\n        // Don't return a value when using a callback, so that the return type is truly \"void\"\n        if (callback)\n            this.putCookie(newCookie, callback);\n        else\n            return this.putCookie(newCookie);\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    removeCookie(domain, path, key, callback) {\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        delete this.idx[domain]?.[path]?.[key];\n        return promiseCallback.resolve(undefined);\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    removeCookies(domain, path, callback) {\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        const domainEntry = this.idx[domain];\n        if (domainEntry) {\n            if (path) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete domainEntry[path];\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete this.idx[domain];\n            }\n        }\n        return promiseCallback.resolve(undefined);\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    removeAllCookies(callback) {\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        this.idx = Object.create(null);\n        return promiseCallback.resolve(undefined);\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    getAllCookies(callback) {\n        const promiseCallback = (0, utils_1.createPromiseCallback)(callback);\n        const cookies = [];\n        const idx = this.idx;\n        const domains = Object.keys(idx);\n        domains.forEach((domain) => {\n            const domainEntry = idx[domain] ?? {};\n            const paths = Object.keys(domainEntry);\n            paths.forEach((path) => {\n                const pathEntry = domainEntry[path] ?? {};\n                const keys = Object.keys(pathEntry);\n                keys.forEach((key) => {\n                    const keyEntry = pathEntry[key];\n                    if (keyEntry != null) {\n                        cookies.push(keyEntry);\n                    }\n                });\n            });\n        });\n        // Sort by creationIndex so deserializing retains the creation order.\n        // When implementing your own store, this SHOULD retain the order too\n        cookies.sort((a, b) => {\n            return (a.creationIndex || 0) - (b.creationIndex || 0);\n        });\n        return promiseCallback.resolve(cookies);\n    }\n}\nexports.MemoryCookieStore = MemoryCookieStore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/memstore.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/pathMatch.js":
/*!*****************************************************!*\
  !*** ./node_modules/tough-cookie/dist/pathMatch.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.pathMatch = pathMatch;\n/**\n * Answers \"does the request-path path-match a given cookie-path?\" as per {@link https://www.rfc-editor.org/rfc/rfc6265.html#section-5.1.4 | RFC6265 Section 5.1.4}.\n * This is essentially a prefix-match where cookiePath is a prefix of reqPath.\n *\n * @remarks\n * A request-path path-matches a given cookie-path if at least one of\n * the following conditions holds:\n *\n * - The cookie-path and the request-path are identical.\n * - The cookie-path is a prefix of the request-path, and the last character of the cookie-path is %x2F (\"/\").\n * - The cookie-path is a prefix of the request-path, and the first character of the request-path that is not included in the cookie-path is a %x2F (\"/\") character.\n *\n * @param reqPath - the path of the request\n * @param cookiePath - the path of the cookie\n * @public\n */\nfunction pathMatch(reqPath, cookiePath) {\n    // \"o  The cookie-path and the request-path are identical.\"\n    if (cookiePath === reqPath) {\n        return true;\n    }\n    const idx = reqPath.indexOf(cookiePath);\n    if (idx === 0) {\n        // \"o  The cookie-path is a prefix of the request-path, and the last\n        // character of the cookie-path is %x2F (\"/\").\"\n        if (cookiePath[cookiePath.length - 1] === '/') {\n            return true;\n        }\n        // \" o  The cookie-path is a prefix of the request-path, and the first\n        // character of the request-path that is not included in the cookie- path\n        // is a %x2F (\"/\") character.\"\n        if (reqPath.startsWith(cookiePath) && reqPath[cookiePath.length] === '/') {\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3QvcGF0aE1hdGNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQjtBQUNBLDJFQUEyRSx3RkFBd0Y7QUFDbks7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxkYXJzaFxcT25lRHJpdmVcXERlc2t0b3BcXENvZGVcXE1FUk4gV2ViIERldlxcR3JhcGhpXFxub2RlX21vZHVsZXNcXHRvdWdoLWNvb2tpZVxcZGlzdFxccGF0aE1hdGNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXRoTWF0Y2ggPSBwYXRoTWF0Y2g7XG4vKipcbiAqIEFuc3dlcnMgXCJkb2VzIHRoZSByZXF1ZXN0LXBhdGggcGF0aC1tYXRjaCBhIGdpdmVuIGNvb2tpZS1wYXRoP1wiIGFzIHBlciB7QGxpbmsgaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzYyNjUuaHRtbCNzZWN0aW9uLTUuMS40IHwgUkZDNjI2NSBTZWN0aW9uIDUuMS40fS5cbiAqIFRoaXMgaXMgZXNzZW50aWFsbHkgYSBwcmVmaXgtbWF0Y2ggd2hlcmUgY29va2llUGF0aCBpcyBhIHByZWZpeCBvZiByZXFQYXRoLlxuICpcbiAqIEByZW1hcmtzXG4gKiBBIHJlcXVlc3QtcGF0aCBwYXRoLW1hdGNoZXMgYSBnaXZlbiBjb29raWUtcGF0aCBpZiBhdCBsZWFzdCBvbmUgb2ZcbiAqIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBob2xkczpcbiAqXG4gKiAtIFRoZSBjb29raWUtcGF0aCBhbmQgdGhlIHJlcXVlc3QtcGF0aCBhcmUgaWRlbnRpY2FsLlxuICogLSBUaGUgY29va2llLXBhdGggaXMgYSBwcmVmaXggb2YgdGhlIHJlcXVlc3QtcGF0aCwgYW5kIHRoZSBsYXN0IGNoYXJhY3RlciBvZiB0aGUgY29va2llLXBhdGggaXMgJXgyRiAoXCIvXCIpLlxuICogLSBUaGUgY29va2llLXBhdGggaXMgYSBwcmVmaXggb2YgdGhlIHJlcXVlc3QtcGF0aCwgYW5kIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIHJlcXVlc3QtcGF0aCB0aGF0IGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgY29va2llLXBhdGggaXMgYSAleDJGIChcIi9cIikgY2hhcmFjdGVyLlxuICpcbiAqIEBwYXJhbSByZXFQYXRoIC0gdGhlIHBhdGggb2YgdGhlIHJlcXVlc3RcbiAqIEBwYXJhbSBjb29raWVQYXRoIC0gdGhlIHBhdGggb2YgdGhlIGNvb2tpZVxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBwYXRoTWF0Y2gocmVxUGF0aCwgY29va2llUGF0aCkge1xuICAgIC8vIFwibyAgVGhlIGNvb2tpZS1wYXRoIGFuZCB0aGUgcmVxdWVzdC1wYXRoIGFyZSBpZGVudGljYWwuXCJcbiAgICBpZiAoY29va2llUGF0aCA9PT0gcmVxUGF0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgaWR4ID0gcmVxUGF0aC5pbmRleE9mKGNvb2tpZVBhdGgpO1xuICAgIGlmIChpZHggPT09IDApIHtcbiAgICAgICAgLy8gXCJvICBUaGUgY29va2llLXBhdGggaXMgYSBwcmVmaXggb2YgdGhlIHJlcXVlc3QtcGF0aCwgYW5kIHRoZSBsYXN0XG4gICAgICAgIC8vIGNoYXJhY3RlciBvZiB0aGUgY29va2llLXBhdGggaXMgJXgyRiAoXCIvXCIpLlwiXG4gICAgICAgIGlmIChjb29raWVQYXRoW2Nvb2tpZVBhdGgubGVuZ3RoIC0gMV0gPT09ICcvJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gXCIgbyAgVGhlIGNvb2tpZS1wYXRoIGlzIGEgcHJlZml4IG9mIHRoZSByZXF1ZXN0LXBhdGgsIGFuZCB0aGUgZmlyc3RcbiAgICAgICAgLy8gY2hhcmFjdGVyIG9mIHRoZSByZXF1ZXN0LXBhdGggdGhhdCBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGNvb2tpZS0gcGF0aFxuICAgICAgICAvLyBpcyBhICV4MkYgKFwiL1wiKSBjaGFyYWN0ZXIuXCJcbiAgICAgICAgaWYgKHJlcVBhdGguc3RhcnRzV2l0aChjb29raWVQYXRoKSAmJiByZXFQYXRoW2Nvb2tpZVBhdGgubGVuZ3RoXSA9PT0gJy8nKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/pathMatch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/permuteDomain.js":
/*!*********************************************************!*\
  !*** ./node_modules/tough-cookie/dist/permuteDomain.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.permuteDomain = permuteDomain;\nconst getPublicSuffix_1 = __webpack_require__(/*! ./getPublicSuffix */ \"(rsc)/./node_modules/tough-cookie/dist/getPublicSuffix.js\");\n/**\n * Generates the permutation of all possible values that {@link domainMatch} the given `domain` parameter. The\n * array is in shortest-to-longest order. Useful when building custom {@link Store} implementations.\n *\n * @example\n * ```\n * permuteDomain('foo.bar.example.com')\n * // ['example.com', 'bar.example.com', 'foo.bar.example.com']\n * ```\n *\n * @public\n * @param domain - the domain to generate permutations for\n * @param allowSpecialUseDomain - flag to control if {@link https://www.rfc-editor.org/rfc/rfc6761.html | Special Use Domains} such as `localhost` should be allowed\n */\nfunction permuteDomain(domain, allowSpecialUseDomain) {\n    const pubSuf = (0, getPublicSuffix_1.getPublicSuffix)(domain, {\n        allowSpecialUseDomain: allowSpecialUseDomain,\n    });\n    if (!pubSuf) {\n        return undefined;\n    }\n    if (pubSuf == domain) {\n        return [domain];\n    }\n    // Nuke trailing dot\n    if (domain.slice(-1) == '.') {\n        domain = domain.slice(0, -1);\n    }\n    const prefix = domain.slice(0, -(pubSuf.length + 1)); // \".example.com\"\n    const parts = prefix.split('.').reverse();\n    let cur = pubSuf;\n    const permutations = [cur];\n    while (parts.length) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const part = parts.shift();\n        cur = `${part}.${cur}`;\n        permutations.push(cur);\n    }\n    return permutations;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3QvcGVybXV0ZURvbWFpbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsMEJBQTBCLG1CQUFPLENBQUMsb0ZBQW1CO0FBQ3JEO0FBQ0EsMERBQTBELG1CQUFtQjtBQUM3RSx1RUFBdUUsYUFBYTtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QseUVBQXlFO0FBQy9IO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixLQUFLLEdBQUcsSUFBSTtBQUM3QjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxkYXJzaFxcT25lRHJpdmVcXERlc2t0b3BcXENvZGVcXE1FUk4gV2ViIERldlxcR3JhcGhpXFxub2RlX21vZHVsZXNcXHRvdWdoLWNvb2tpZVxcZGlzdFxccGVybXV0ZURvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGVybXV0ZURvbWFpbiA9IHBlcm11dGVEb21haW47XG5jb25zdCBnZXRQdWJsaWNTdWZmaXhfMSA9IHJlcXVpcmUoXCIuL2dldFB1YmxpY1N1ZmZpeFwiKTtcbi8qKlxuICogR2VuZXJhdGVzIHRoZSBwZXJtdXRhdGlvbiBvZiBhbGwgcG9zc2libGUgdmFsdWVzIHRoYXQge0BsaW5rIGRvbWFpbk1hdGNofSB0aGUgZ2l2ZW4gYGRvbWFpbmAgcGFyYW1ldGVyLiBUaGVcbiAqIGFycmF5IGlzIGluIHNob3J0ZXN0LXRvLWxvbmdlc3Qgb3JkZXIuIFVzZWZ1bCB3aGVuIGJ1aWxkaW5nIGN1c3RvbSB7QGxpbmsgU3RvcmV9IGltcGxlbWVudGF0aW9ucy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBwZXJtdXRlRG9tYWluKCdmb28uYmFyLmV4YW1wbGUuY29tJylcbiAqIC8vIFsnZXhhbXBsZS5jb20nLCAnYmFyLmV4YW1wbGUuY29tJywgJ2Zvby5iYXIuZXhhbXBsZS5jb20nXVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIGRvbWFpbiAtIHRoZSBkb21haW4gdG8gZ2VuZXJhdGUgcGVybXV0YXRpb25zIGZvclxuICogQHBhcmFtIGFsbG93U3BlY2lhbFVzZURvbWFpbiAtIGZsYWcgdG8gY29udHJvbCBpZiB7QGxpbmsgaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzY3NjEuaHRtbCB8IFNwZWNpYWwgVXNlIERvbWFpbnN9IHN1Y2ggYXMgYGxvY2FsaG9zdGAgc2hvdWxkIGJlIGFsbG93ZWRcbiAqL1xuZnVuY3Rpb24gcGVybXV0ZURvbWFpbihkb21haW4sIGFsbG93U3BlY2lhbFVzZURvbWFpbikge1xuICAgIGNvbnN0IHB1YlN1ZiA9ICgwLCBnZXRQdWJsaWNTdWZmaXhfMS5nZXRQdWJsaWNTdWZmaXgpKGRvbWFpbiwge1xuICAgICAgICBhbGxvd1NwZWNpYWxVc2VEb21haW46IGFsbG93U3BlY2lhbFVzZURvbWFpbixcbiAgICB9KTtcbiAgICBpZiAoIXB1YlN1Zikge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocHViU3VmID09IGRvbWFpbikge1xuICAgICAgICByZXR1cm4gW2RvbWFpbl07XG4gICAgfVxuICAgIC8vIE51a2UgdHJhaWxpbmcgZG90XG4gICAgaWYgKGRvbWFpbi5zbGljZSgtMSkgPT0gJy4nKSB7XG4gICAgICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgwLCAtMSk7XG4gICAgfVxuICAgIGNvbnN0IHByZWZpeCA9IGRvbWFpbi5zbGljZSgwLCAtKHB1YlN1Zi5sZW5ndGggKyAxKSk7IC8vIFwiLmV4YW1wbGUuY29tXCJcbiAgICBjb25zdCBwYXJ0cyA9IHByZWZpeC5zcGxpdCgnLicpLnJldmVyc2UoKTtcbiAgICBsZXQgY3VyID0gcHViU3VmO1xuICAgIGNvbnN0IHBlcm11dGF0aW9ucyA9IFtjdXJdO1xuICAgIHdoaWxlIChwYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgY29uc3QgcGFydCA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIGN1ciA9IGAke3BhcnR9LiR7Y3VyfWA7XG4gICAgICAgIHBlcm11dGF0aW9ucy5wdXNoKGN1cik7XG4gICAgfVxuICAgIHJldHVybiBwZXJtdXRhdGlvbnM7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/permuteDomain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/store.js":
/*!*************************************************!*\
  !*** ./node_modules/tough-cookie/dist/store.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// disabling this lint on this whole file because Store should be abstract\n// but we have implementations in the wild that may not implement all features\n/* eslint-disable @typescript-eslint/no-unused-vars */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Store = void 0;\n/**\n * Base class for {@link CookieJar} stores.\n *\n * The storage model for each {@link CookieJar} instance can be replaced with a custom implementation. The default is\n * {@link MemoryCookieStore}.\n *\n * @remarks\n * - Stores should inherit from the base Store class, which is available as a top-level export.\n *\n * - Stores are asynchronous by default, but if {@link Store.synchronous} is set to true, then the `*Sync` methods\n *     of the containing {@link CookieJar} can be used.\n *\n * @public\n */\nclass Store {\n    constructor() {\n        this.synchronous = false;\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    findCookie(_domain, _path, _key, _callback) {\n        throw new Error('findCookie is not implemented');\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    findCookies(_domain, _path, _allowSpecialUseDomain = false, _callback) {\n        throw new Error('findCookies is not implemented');\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    putCookie(_cookie, _callback) {\n        throw new Error('putCookie is not implemented');\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    updateCookie(_oldCookie, _newCookie, _callback) {\n        // recommended default implementation:\n        // return this.putCookie(newCookie, cb);\n        throw new Error('updateCookie is not implemented');\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    removeCookie(_domain, _path, _key, _callback) {\n        throw new Error('removeCookie is not implemented');\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    removeCookies(_domain, _path, _callback) {\n        throw new Error('removeCookies is not implemented');\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    removeAllCookies(_callback) {\n        throw new Error('removeAllCookies is not implemented');\n    }\n    /**\n     * @internal No doc because this is an overload that supports the implementation\n     */\n    getAllCookies(_callback) {\n        throw new Error('getAllCookies is not implemented (therefore jar cannot be serialized)');\n    }\n}\nexports.Store = Store;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3Qvc3RvcmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQsSUFBSSx3QkFBd0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQseUJBQXlCO0FBQzFFLDBCQUEwQixpQkFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGRhcnNoXFxPbmVEcml2ZVxcRGVza3RvcFxcQ29kZVxcTUVSTiBXZWIgRGV2XFxHcmFwaGlcXG5vZGVfbW9kdWxlc1xcdG91Z2gtY29va2llXFxkaXN0XFxzdG9yZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIGRpc2FibGluZyB0aGlzIGxpbnQgb24gdGhpcyB3aG9sZSBmaWxlIGJlY2F1c2UgU3RvcmUgc2hvdWxkIGJlIGFic3RyYWN0XG4vLyBidXQgd2UgaGF2ZSBpbXBsZW1lbnRhdGlvbnMgaW4gdGhlIHdpbGQgdGhhdCBtYXkgbm90IGltcGxlbWVudCBhbGwgZmVhdHVyZXNcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdG9yZSA9IHZvaWQgMDtcbi8qKlxuICogQmFzZSBjbGFzcyBmb3Ige0BsaW5rIENvb2tpZUphcn0gc3RvcmVzLlxuICpcbiAqIFRoZSBzdG9yYWdlIG1vZGVsIGZvciBlYWNoIHtAbGluayBDb29raWVKYXJ9IGluc3RhbmNlIGNhbiBiZSByZXBsYWNlZCB3aXRoIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uLiBUaGUgZGVmYXVsdCBpc1xuICoge0BsaW5rIE1lbW9yeUNvb2tpZVN0b3JlfS5cbiAqXG4gKiBAcmVtYXJrc1xuICogLSBTdG9yZXMgc2hvdWxkIGluaGVyaXQgZnJvbSB0aGUgYmFzZSBTdG9yZSBjbGFzcywgd2hpY2ggaXMgYXZhaWxhYmxlIGFzIGEgdG9wLWxldmVsIGV4cG9ydC5cbiAqXG4gKiAtIFN0b3JlcyBhcmUgYXN5bmNocm9ub3VzIGJ5IGRlZmF1bHQsIGJ1dCBpZiB7QGxpbmsgU3RvcmUuc3luY2hyb25vdXN9IGlzIHNldCB0byB0cnVlLCB0aGVuIHRoZSBgKlN5bmNgIG1ldGhvZHNcbiAqICAgICBvZiB0aGUgY29udGFpbmluZyB7QGxpbmsgQ29va2llSmFyfSBjYW4gYmUgdXNlZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWwgTm8gZG9jIGJlY2F1c2UgdGhpcyBpcyBhbiBvdmVybG9hZCB0aGF0IHN1cHBvcnRzIHRoZSBpbXBsZW1lbnRhdGlvblxuICAgICAqL1xuICAgIGZpbmRDb29raWUoX2RvbWFpbiwgX3BhdGgsIF9rZXksIF9jYWxsYmFjaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZpbmRDb29raWUgaXMgbm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbCBObyBkb2MgYmVjYXVzZSB0aGlzIGlzIGFuIG92ZXJsb2FkIHRoYXQgc3VwcG9ydHMgdGhlIGltcGxlbWVudGF0aW9uXG4gICAgICovXG4gICAgZmluZENvb2tpZXMoX2RvbWFpbiwgX3BhdGgsIF9hbGxvd1NwZWNpYWxVc2VEb21haW4gPSBmYWxzZSwgX2NhbGxiYWNrKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZmluZENvb2tpZXMgaXMgbm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbCBObyBkb2MgYmVjYXVzZSB0aGlzIGlzIGFuIG92ZXJsb2FkIHRoYXQgc3VwcG9ydHMgdGhlIGltcGxlbWVudGF0aW9uXG4gICAgICovXG4gICAgcHV0Q29va2llKF9jb29raWUsIF9jYWxsYmFjaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3B1dENvb2tpZSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsIE5vIGRvYyBiZWNhdXNlIHRoaXMgaXMgYW4gb3ZlcmxvYWQgdGhhdCBzdXBwb3J0cyB0aGUgaW1wbGVtZW50YXRpb25cbiAgICAgKi9cbiAgICB1cGRhdGVDb29raWUoX29sZENvb2tpZSwgX25ld0Nvb2tpZSwgX2NhbGxiYWNrKSB7XG4gICAgICAgIC8vIHJlY29tbWVuZGVkIGRlZmF1bHQgaW1wbGVtZW50YXRpb246XG4gICAgICAgIC8vIHJldHVybiB0aGlzLnB1dENvb2tpZShuZXdDb29raWUsIGNiKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1cGRhdGVDb29raWUgaXMgbm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbCBObyBkb2MgYmVjYXVzZSB0aGlzIGlzIGFuIG92ZXJsb2FkIHRoYXQgc3VwcG9ydHMgdGhlIGltcGxlbWVudGF0aW9uXG4gICAgICovXG4gICAgcmVtb3ZlQ29va2llKF9kb21haW4sIF9wYXRoLCBfa2V5LCBfY2FsbGJhY2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmVDb29raWUgaXMgbm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbCBObyBkb2MgYmVjYXVzZSB0aGlzIGlzIGFuIG92ZXJsb2FkIHRoYXQgc3VwcG9ydHMgdGhlIGltcGxlbWVudGF0aW9uXG4gICAgICovXG4gICAgcmVtb3ZlQ29va2llcyhfZG9tYWluLCBfcGF0aCwgX2NhbGxiYWNrKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncmVtb3ZlQ29va2llcyBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsIE5vIGRvYyBiZWNhdXNlIHRoaXMgaXMgYW4gb3ZlcmxvYWQgdGhhdCBzdXBwb3J0cyB0aGUgaW1wbGVtZW50YXRpb25cbiAgICAgKi9cbiAgICByZW1vdmVBbGxDb29raWVzKF9jYWxsYmFjaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlbW92ZUFsbENvb2tpZXMgaXMgbm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbCBObyBkb2MgYmVjYXVzZSB0aGlzIGlzIGFuIG92ZXJsb2FkIHRoYXQgc3VwcG9ydHMgdGhlIGltcGxlbWVudGF0aW9uXG4gICAgICovXG4gICAgZ2V0QWxsQ29va2llcyhfY2FsbGJhY2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnZXRBbGxDb29raWVzIGlzIG5vdCBpbXBsZW1lbnRlZCAodGhlcmVmb3JlIGphciBjYW5ub3QgYmUgc2VyaWFsaXplZCknKTtcbiAgICB9XG59XG5leHBvcnRzLlN0b3JlID0gU3RvcmU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/store.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/tough-cookie/dist/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.safeToString = exports.objectToString = void 0;\nexports.createPromiseCallback = createPromiseCallback;\nexports.inOperator = inOperator;\n/** Wrapped `Object.prototype.toString`, so that you don't need to remember to use `.call()`. */\nconst objectToString = (obj) => Object.prototype.toString.call(obj);\nexports.objectToString = objectToString;\n/**\n * Converts an array to string, safely handling symbols, null prototype objects, and recursive arrays.\n */\nconst safeArrayToString = (arr, seenArrays) => {\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString#description\n    if (typeof arr.join !== 'function')\n        return (0, exports.objectToString)(arr);\n    seenArrays.add(arr);\n    const mapped = arr.map((val) => val === null || val === undefined || seenArrays.has(val)\n        ? ''\n        : safeToStringImpl(val, seenArrays));\n    return mapped.join();\n};\nconst safeToStringImpl = (val, seenArrays = new WeakSet()) => {\n    // Using .toString() fails for null/undefined and implicit conversion (val + \"\") fails for symbols\n    // and objects with null prototype\n    if (typeof val !== 'object' || val === null) {\n        return String(val);\n    }\n    else if (typeof val.toString === 'function') {\n        return Array.isArray(val)\n            ? // Arrays have a weird custom toString that we need to replicate\n                safeArrayToString(val, seenArrays)\n            : // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                String(val);\n    }\n    else {\n        // This case should just be objects with null prototype, so we can just use Object#toString\n        return (0, exports.objectToString)(val);\n    }\n};\n/** Safely converts any value to string, using the value's own `toString` when available. */\nconst safeToString = (val) => safeToStringImpl(val);\nexports.safeToString = safeToString;\n/** Converts a callback into a utility object where either a callback or a promise can be used. */\nfunction createPromiseCallback(cb) {\n    let callback;\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject) => {\n        resolve = _resolve;\n        reject = _reject;\n    });\n    if (typeof cb === 'function') {\n        callback = (err, result) => {\n            try {\n                if (err)\n                    cb(err);\n                // If `err` is null, we know `result` must be `T`\n                // The assertion isn't *strictly* correct, as `T` could be nullish, but, ehh, good enough...\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                else\n                    cb(null, result);\n            }\n            catch (e) {\n                reject(e instanceof Error ? e : new Error());\n            }\n        };\n    }\n    else {\n        callback = (err, result) => {\n            try {\n                // If `err` is null, we know `result` must be `T`\n                // The assertion isn't *strictly* correct, as `T` could be nullish, but, ehh, good enough...\n                if (err)\n                    reject(err);\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                else\n                    resolve(result);\n            }\n            catch (e) {\n                reject(e instanceof Error ? e : new Error());\n            }\n        };\n    }\n    return {\n        promise,\n        callback,\n        resolve: (value) => {\n            callback(null, value);\n            return promise;\n        },\n        reject: (error) => {\n            callback(error);\n            return promise;\n        },\n    };\n}\nfunction inOperator(k, o) {\n    return k in o;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3QvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsc0JBQXNCO0FBQzdDLDZCQUE2QjtBQUM3QixrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGRhcnNoXFxPbmVEcml2ZVxcRGVza3RvcFxcQ29kZVxcTUVSTiBXZWIgRGV2XFxHcmFwaGlcXG5vZGVfbW9kdWxlc1xcdG91Z2gtY29va2llXFxkaXN0XFx1dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2FmZVRvU3RyaW5nID0gZXhwb3J0cy5vYmplY3RUb1N0cmluZyA9IHZvaWQgMDtcbmV4cG9ydHMuY3JlYXRlUHJvbWlzZUNhbGxiYWNrID0gY3JlYXRlUHJvbWlzZUNhbGxiYWNrO1xuZXhwb3J0cy5pbk9wZXJhdG9yID0gaW5PcGVyYXRvcjtcbi8qKiBXcmFwcGVkIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCwgc28gdGhhdCB5b3UgZG9uJ3QgbmVlZCB0byByZW1lbWJlciB0byB1c2UgYC5jYWxsKClgLiAqL1xuY29uc3Qgb2JqZWN0VG9TdHJpbmcgPSAob2JqKSA9PiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKTtcbmV4cG9ydHMub2JqZWN0VG9TdHJpbmcgPSBvYmplY3RUb1N0cmluZztcbi8qKlxuICogQ29udmVydHMgYW4gYXJyYXkgdG8gc3RyaW5nLCBzYWZlbHkgaGFuZGxpbmcgc3ltYm9scywgbnVsbCBwcm90b3R5cGUgb2JqZWN0cywgYW5kIHJlY3Vyc2l2ZSBhcnJheXMuXG4gKi9cbmNvbnN0IHNhZmVBcnJheVRvU3RyaW5nID0gKGFyciwgc2VlbkFycmF5cykgPT4ge1xuICAgIC8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS90b1N0cmluZyNkZXNjcmlwdGlvblxuICAgIGlmICh0eXBlb2YgYXJyLmpvaW4gIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiAoMCwgZXhwb3J0cy5vYmplY3RUb1N0cmluZykoYXJyKTtcbiAgICBzZWVuQXJyYXlzLmFkZChhcnIpO1xuICAgIGNvbnN0IG1hcHBlZCA9IGFyci5tYXAoKHZhbCkgPT4gdmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkIHx8IHNlZW5BcnJheXMuaGFzKHZhbClcbiAgICAgICAgPyAnJ1xuICAgICAgICA6IHNhZmVUb1N0cmluZ0ltcGwodmFsLCBzZWVuQXJyYXlzKSk7XG4gICAgcmV0dXJuIG1hcHBlZC5qb2luKCk7XG59O1xuY29uc3Qgc2FmZVRvU3RyaW5nSW1wbCA9ICh2YWwsIHNlZW5BcnJheXMgPSBuZXcgV2Vha1NldCgpKSA9PiB7XG4gICAgLy8gVXNpbmcgLnRvU3RyaW5nKCkgZmFpbHMgZm9yIG51bGwvdW5kZWZpbmVkIGFuZCBpbXBsaWNpdCBjb252ZXJzaW9uICh2YWwgKyBcIlwiKSBmYWlscyBmb3Igc3ltYm9sc1xuICAgIC8vIGFuZCBvYmplY3RzIHdpdGggbnVsbCBwcm90b3R5cGVcbiAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ29iamVjdCcgfHwgdmFsID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbC50b1N0cmluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpXG4gICAgICAgICAgICA/IC8vIEFycmF5cyBoYXZlIGEgd2VpcmQgY3VzdG9tIHRvU3RyaW5nIHRoYXQgd2UgbmVlZCB0byByZXBsaWNhdGVcbiAgICAgICAgICAgICAgICBzYWZlQXJyYXlUb1N0cmluZyh2YWwsIHNlZW5BcnJheXMpXG4gICAgICAgICAgICA6IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tYmFzZS10by1zdHJpbmdcbiAgICAgICAgICAgICAgICBTdHJpbmcodmFsKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgY2FzZSBzaG91bGQganVzdCBiZSBvYmplY3RzIHdpdGggbnVsbCBwcm90b3R5cGUsIHNvIHdlIGNhbiBqdXN0IHVzZSBPYmplY3QjdG9TdHJpbmdcbiAgICAgICAgcmV0dXJuICgwLCBleHBvcnRzLm9iamVjdFRvU3RyaW5nKSh2YWwpO1xuICAgIH1cbn07XG4vKiogU2FmZWx5IGNvbnZlcnRzIGFueSB2YWx1ZSB0byBzdHJpbmcsIHVzaW5nIHRoZSB2YWx1ZSdzIG93biBgdG9TdHJpbmdgIHdoZW4gYXZhaWxhYmxlLiAqL1xuY29uc3Qgc2FmZVRvU3RyaW5nID0gKHZhbCkgPT4gc2FmZVRvU3RyaW5nSW1wbCh2YWwpO1xuZXhwb3J0cy5zYWZlVG9TdHJpbmcgPSBzYWZlVG9TdHJpbmc7XG4vKiogQ29udmVydHMgYSBjYWxsYmFjayBpbnRvIGEgdXRpbGl0eSBvYmplY3Qgd2hlcmUgZWl0aGVyIGEgY2FsbGJhY2sgb3IgYSBwcm9taXNlIGNhbiBiZSB1c2VkLiAqL1xuZnVuY3Rpb24gY3JlYXRlUHJvbWlzZUNhbGxiYWNrKGNiKSB7XG4gICAgbGV0IGNhbGxiYWNrO1xuICAgIGxldCByZXNvbHZlO1xuICAgIGxldCByZWplY3Q7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChfcmVzb2x2ZSwgX3JlamVjdCkgPT4ge1xuICAgICAgICByZXNvbHZlID0gX3Jlc29sdmU7XG4gICAgICAgIHJlamVjdCA9IF9yZWplY3Q7XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayA9IChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICBjYihlcnIpO1xuICAgICAgICAgICAgICAgIC8vIElmIGBlcnJgIGlzIG51bGwsIHdlIGtub3cgYHJlc3VsdGAgbXVzdCBiZSBgVGBcbiAgICAgICAgICAgICAgICAvLyBUaGUgYXNzZXJ0aW9uIGlzbid0ICpzdHJpY3RseSogY29ycmVjdCwgYXMgYFRgIGNvdWxkIGJlIG51bGxpc2gsIGJ1dCwgZWhoLCBnb29kIGVub3VnaC4uLlxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjYihudWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZSBpbnN0YW5jZW9mIEVycm9yID8gZSA6IG5ldyBFcnJvcigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrID0gKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIElmIGBlcnJgIGlzIG51bGwsIHdlIGtub3cgYHJlc3VsdGAgbXVzdCBiZSBgVGBcbiAgICAgICAgICAgICAgICAvLyBUaGUgYXNzZXJ0aW9uIGlzbid0ICpzdHJpY3RseSogY29ycmVjdCwgYXMgYFRgIGNvdWxkIGJlIG51bGxpc2gsIGJ1dCwgZWhoLCBnb29kIGVub3VnaC4uLlxuICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChlIGluc3RhbmNlb2YgRXJyb3IgPyBlIDogbmV3IEVycm9yKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwcm9taXNlLFxuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgcmVzb2x2ZTogKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVqZWN0OiAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9LFxuICAgIH07XG59XG5mdW5jdGlvbiBpbk9wZXJhdG9yKGssIG8pIHtcbiAgICByZXR1cm4gayBpbiBvO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/validators.js":
/*!******************************************************!*\
  !*** ./node_modules/tough-cookie/dist/validators.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* ************************************************************************************\nExtracted from check-types.js\nhttps://gitlab.com/philbooth/check-types.js\n\nMIT License\n\nCopyright (c) 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019 Phil Booth\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n************************************************************************************ */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ParameterError = void 0;\nexports.isNonEmptyString = isNonEmptyString;\nexports.isDate = isDate;\nexports.isEmptyString = isEmptyString;\nexports.isString = isString;\nexports.isObject = isObject;\nexports.isInteger = isInteger;\nexports.validate = validate;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/tough-cookie/dist/utils.js\");\n/* Validation functions copied from check-types package - https://www.npmjs.com/package/check-types */\n/** Determines whether the argument is a non-empty string. */\nfunction isNonEmptyString(data) {\n    return isString(data) && data !== '';\n}\n/** Determines whether the argument is a *valid* Date. */\nfunction isDate(data) {\n    return data instanceof Date && isInteger(data.getTime());\n}\n/** Determines whether the argument is the empty string. */\nfunction isEmptyString(data) {\n    return data === '' || (data instanceof String && data.toString() === '');\n}\n/** Determines whether the argument is a string. */\nfunction isString(data) {\n    return typeof data === 'string' || data instanceof String;\n}\n/** Determines whether the string representation of the argument is \"[object Object]\". */\nfunction isObject(data) {\n    return (0, utils_1.objectToString)(data) === '[object Object]';\n}\n/** Determines whether the argument is an integer. */\nfunction isInteger(data) {\n    return typeof data === 'number' && data % 1 === 0;\n}\n/* -- End validation functions -- */\n/**\n * When the first argument is false, an error is created with the given message. If a callback is\n * provided, the error is passed to the callback, otherwise the error is thrown.\n */\nfunction validate(bool, cbOrMessage, message) {\n    if (bool)\n        return; // Validation passes\n    const cb = typeof cbOrMessage === 'function' ? cbOrMessage : undefined;\n    let options = typeof cbOrMessage === 'function' ? message : cbOrMessage;\n    // The default message prior to v5 was '[object Object]' due to a bug, and the message is kept\n    // for backwards compatibility.\n    if (!isObject(options))\n        options = '[object Object]';\n    const err = new ParameterError((0, utils_1.safeToString)(options));\n    if (cb)\n        cb(err);\n    else\n        throw err;\n}\n/**\n * Represents a validation error.\n * @public\n */\nclass ParameterError extends Error {\n}\nexports.ParameterError = ParameterError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3QvdmFsaWRhdG9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsd0JBQXdCO0FBQ3hCLGNBQWM7QUFDZCxxQkFBcUI7QUFDckIsZ0JBQWdCO0FBQ2hCLGdCQUFnQjtBQUNoQixpQkFBaUI7QUFDakIsZ0JBQWdCO0FBQ2hCLGdCQUFnQixtQkFBTyxDQUFDLGdFQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGRhcnNoXFxPbmVEcml2ZVxcRGVza3RvcFxcQ29kZVxcTUVSTiBXZWIgRGV2XFxHcmFwaGlcXG5vZGVfbW9kdWxlc1xcdG91Z2gtY29va2llXFxkaXN0XFx2YWxpZGF0b3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5FeHRyYWN0ZWQgZnJvbSBjaGVjay10eXBlcy5qc1xuaHR0cHM6Ly9naXRsYWIuY29tL3BoaWxib290aC9jaGVjay10eXBlcy5qc1xuXG5NSVQgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMTIsIDIwMTMsIDIwMTQsIDIwMTUsIDIwMTYsIDIwMTcsIDIwMTgsIDIwMTkgUGhpbCBCb290aFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXJhbWV0ZXJFcnJvciA9IHZvaWQgMDtcbmV4cG9ydHMuaXNOb25FbXB0eVN0cmluZyA9IGlzTm9uRW1wdHlTdHJpbmc7XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcbmV4cG9ydHMuaXNFbXB0eVN0cmluZyA9IGlzRW1wdHlTdHJpbmc7XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5leHBvcnRzLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbmV4cG9ydHMudmFsaWRhdGUgPSB2YWxpZGF0ZTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbi8qIFZhbGlkYXRpb24gZnVuY3Rpb25zIGNvcGllZCBmcm9tIGNoZWNrLXR5cGVzIHBhY2thZ2UgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9jaGVjay10eXBlcyAqL1xuLyoqIERldGVybWluZXMgd2hldGhlciB0aGUgYXJndW1lbnQgaXMgYSBub24tZW1wdHkgc3RyaW5nLiAqL1xuZnVuY3Rpb24gaXNOb25FbXB0eVN0cmluZyhkYXRhKSB7XG4gICAgcmV0dXJuIGlzU3RyaW5nKGRhdGEpICYmIGRhdGEgIT09ICcnO1xufVxuLyoqIERldGVybWluZXMgd2hldGhlciB0aGUgYXJndW1lbnQgaXMgYSAqdmFsaWQqIERhdGUuICovXG5mdW5jdGlvbiBpc0RhdGUoZGF0YSkge1xuICAgIHJldHVybiBkYXRhIGluc3RhbmNlb2YgRGF0ZSAmJiBpc0ludGVnZXIoZGF0YS5nZXRUaW1lKCkpO1xufVxuLyoqIERldGVybWluZXMgd2hldGhlciB0aGUgYXJndW1lbnQgaXMgdGhlIGVtcHR5IHN0cmluZy4gKi9cbmZ1bmN0aW9uIGlzRW1wdHlTdHJpbmcoZGF0YSkge1xuICAgIHJldHVybiBkYXRhID09PSAnJyB8fCAoZGF0YSBpbnN0YW5jZW9mIFN0cmluZyAmJiBkYXRhLnRvU3RyaW5nKCkgPT09ICcnKTtcbn1cbi8qKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGFyZ3VtZW50IGlzIGEgc3RyaW5nLiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcoZGF0YSkge1xuICAgIHJldHVybiB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycgfHwgZGF0YSBpbnN0YW5jZW9mIFN0cmluZztcbn1cbi8qKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgYXJndW1lbnQgaXMgXCJbb2JqZWN0IE9iamVjdF1cIi4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KGRhdGEpIHtcbiAgICByZXR1cm4gKDAsIHV0aWxzXzEub2JqZWN0VG9TdHJpbmcpKGRhdGEpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cbi8qKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGFyZ3VtZW50IGlzIGFuIGludGVnZXIuICovXG5mdW5jdGlvbiBpc0ludGVnZXIoZGF0YSkge1xuICAgIHJldHVybiB0eXBlb2YgZGF0YSA9PT0gJ251bWJlcicgJiYgZGF0YSAlIDEgPT09IDA7XG59XG4vKiAtLSBFbmQgdmFsaWRhdGlvbiBmdW5jdGlvbnMgLS0gKi9cbi8qKlxuICogV2hlbiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgZmFsc2UsIGFuIGVycm9yIGlzIGNyZWF0ZWQgd2l0aCB0aGUgZ2l2ZW4gbWVzc2FnZS4gSWYgYSBjYWxsYmFjayBpc1xuICogcHJvdmlkZWQsIHRoZSBlcnJvciBpcyBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrLCBvdGhlcndpc2UgdGhlIGVycm9yIGlzIHRocm93bi5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGUoYm9vbCwgY2JPck1lc3NhZ2UsIG1lc3NhZ2UpIHtcbiAgICBpZiAoYm9vbClcbiAgICAgICAgcmV0dXJuOyAvLyBWYWxpZGF0aW9uIHBhc3Nlc1xuICAgIGNvbnN0IGNiID0gdHlwZW9mIGNiT3JNZXNzYWdlID09PSAnZnVuY3Rpb24nID8gY2JPck1lc3NhZ2UgOiB1bmRlZmluZWQ7XG4gICAgbGV0IG9wdGlvbnMgPSB0eXBlb2YgY2JPck1lc3NhZ2UgPT09ICdmdW5jdGlvbicgPyBtZXNzYWdlIDogY2JPck1lc3NhZ2U7XG4gICAgLy8gVGhlIGRlZmF1bHQgbWVzc2FnZSBwcmlvciB0byB2NSB3YXMgJ1tvYmplY3QgT2JqZWN0XScgZHVlIHRvIGEgYnVnLCBhbmQgdGhlIG1lc3NhZ2UgaXMga2VwdFxuICAgIC8vIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgICBpZiAoIWlzT2JqZWN0KG9wdGlvbnMpKVxuICAgICAgICBvcHRpb25zID0gJ1tvYmplY3QgT2JqZWN0XSc7XG4gICAgY29uc3QgZXJyID0gbmV3IFBhcmFtZXRlckVycm9yKCgwLCB1dGlsc18xLnNhZmVUb1N0cmluZykob3B0aW9ucykpO1xuICAgIGlmIChjYilcbiAgICAgICAgY2IoZXJyKTtcbiAgICBlbHNlXG4gICAgICAgIHRocm93IGVycjtcbn1cbi8qKlxuICogUmVwcmVzZW50cyBhIHZhbGlkYXRpb24gZXJyb3IuXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFBhcmFtZXRlckVycm9yIGV4dGVuZHMgRXJyb3Ige1xufVxuZXhwb3J0cy5QYXJhbWV0ZXJFcnJvciA9IFBhcmFtZXRlckVycm9yO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/validators.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tough-cookie/dist/version.js":
/*!***************************************************!*\
  !*** ./node_modules/tough-cookie/dist/version.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\n/**\n * The version of `tough-cookie`\n * @public\n */\nexports.version = '5.1.0';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdG91Z2gtY29va2llL2Rpc3QvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGRhcnNoXFxPbmVEcml2ZVxcRGVza3RvcFxcQ29kZVxcTUVSTiBXZWIgRGV2XFxHcmFwaGlcXG5vZGVfbW9kdWxlc1xcdG91Z2gtY29va2llXFxkaXN0XFx2ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52ZXJzaW9uID0gdm9pZCAwO1xuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiBgdG91Z2gtY29va2llYFxuICogQHB1YmxpY1xuICovXG5leHBvcnRzLnZlcnNpb24gPSAnNS4xLjAnO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tough-cookie/dist/version.js\n");

/***/ })

};
;